{"version":3,"file":"xterm-headless.js","mappings":"+GAMA,eACA,SAgBA,MAAaA,UAAwB,EAAAC,WAYnCC,YACUC,GAERC,QAFQ,KAAAD,WAAAA,EARM,KAAAE,gBAAkBC,KAAKC,SAAS,IAAI,EAAAC,cACpC,KAAAC,SAAWH,KAAKD,gBAAgBK,MAChC,KAAAC,gBAAkBL,KAAKC,SAAS,IAAI,EAAAC,cACpC,KAAAI,SAAWN,KAAKK,gBAAgBD,MAChC,KAAAG,cAAgBP,KAAKC,SAAS,IAAI,EAAAC,cAClC,KAAAM,OAASR,KAAKO,cAAcH,MAM1CJ,KAAKS,OAAS,IAAIC,MAASV,KAAKH,YAChCG,KAAKW,YAAc,EACnBX,KAAKY,QAAU,CACjB,CAEWC,gBACT,OAAOb,KAAKH,UACd,CAEWgB,cAAUC,GAEnB,GAAId,KAAKH,aAAeiB,EACtB,OAKF,MAAMC,EAAW,IAAIL,MAAqBI,GAC1C,IAAK,IAAIE,EAAI,EAAGA,EAAIC,KAAKC,IAAIJ,EAAcd,KAAKmB,QAASH,IACvDD,EAASC,GAAKhB,KAAKS,OAAOT,KAAKoB,gBAAgBJ,IAEjDhB,KAAKS,OAASM,EACdf,KAAKH,WAAaiB,EAClBd,KAAKW,YAAc,CACrB,CAEWQ,aACT,OAAOnB,KAAKY,OACd,CAEWO,WAAOE,GAChB,GAAIA,EAAYrB,KAAKY,QACnB,IAAK,IAAII,EAAIhB,KAAKY,QAASI,EAAIK,EAAWL,IACxChB,KAAKS,OAAOO,QAAKM,EAGrBtB,KAAKY,QAAUS,CACjB,CAUOE,IAAIC,GACT,OAAOxB,KAAKS,OAAOT,KAAKoB,gBAAgBI,GAC1C,CAUOC,IAAID,EAAeE,GACxB1B,KAAKS,OAAOT,KAAKoB,gBAAgBI,IAAUE,CAC7C,CAOOC,KAAKD,GACV1B,KAAKS,OAAOT,KAAKoB,gBAAgBpB,KAAKY,UAAYc,EAC9C1B,KAAKY,UAAYZ,KAAKH,YACxBG,KAAKW,cAAgBX,KAAKW,YAAcX,KAAKH,WAC7CG,KAAKO,cAAcqB,KAAK,IAExB5B,KAAKY,SAET,CAOOiB,UACL,GAAI7B,KAAKY,UAAYZ,KAAKH,WACxB,MAAM,IAAIiC,MAAM,4CAIlB,OAFA9B,KAAKW,cAAgBX,KAAKW,YAAcX,KAAKH,WAC7CG,KAAKO,cAAcqB,KAAK,GACjB5B,KAAKS,OAAOT,KAAKoB,gBAAgBpB,KAAKY,QAAU,GACzD,CAKWmB,aACT,OAAO/B,KAAKY,UAAYZ,KAAKH,UAC/B,CAMOmC,MACL,OAAOhC,KAAKS,OAAOT,KAAKoB,gBAAgBpB,KAAKY,UAAY,GAC3D,CAWOqB,OAAOC,EAAeC,KAAwBC,GAEnD,GAAID,EAAa,CACf,IAAK,IAAInB,EAAIkB,EAAOlB,EAAIhB,KAAKY,QAAUuB,EAAanB,IAClDhB,KAAKS,OAAOT,KAAKoB,gBAAgBJ,IAAMhB,KAAKS,OAAOT,KAAKoB,gBAAgBJ,EAAImB,IAE9EnC,KAAKY,SAAWuB,EAChBnC,KAAKD,gBAAgB6B,KAAK,CAAEJ,MAAOU,EAAOG,OAAQF,G,CAIpD,IAAK,IAAInB,EAAIhB,KAAKY,QAAU,EAAGI,GAAKkB,EAAOlB,IACzChB,KAAKS,OAAOT,KAAKoB,gBAAgBJ,EAAIoB,EAAMjB,SAAWnB,KAAKS,OAAOT,KAAKoB,gBAAgBJ,IAEzF,IAAK,IAAIA,EAAI,EAAGA,EAAIoB,EAAMjB,OAAQH,IAChChB,KAAKS,OAAOT,KAAKoB,gBAAgBc,EAAQlB,IAAMoB,EAAMpB,GAOvD,GALIoB,EAAMjB,QACRnB,KAAKK,gBAAgBuB,KAAK,CAAEJ,MAAOU,EAAOG,OAAQD,EAAMjB,SAItDnB,KAAKY,QAAUwB,EAAMjB,OAASnB,KAAKH,WAAY,CACjD,MAAMyC,EAAetC,KAAKY,QAAUwB,EAAMjB,OAAUnB,KAAKH,WACzDG,KAAKW,aAAe2B,EACpBtC,KAAKY,QAAUZ,KAAKH,WACpBG,KAAKO,cAAcqB,KAAKU,E,MAExBtC,KAAKY,SAAWwB,EAAMjB,MAE1B,CAMOoB,UAAUC,GACXA,EAAQxC,KAAKY,UACf4B,EAAQxC,KAAKY,SAEfZ,KAAKW,aAAe6B,EACpBxC,KAAKY,SAAW4B,EAChBxC,KAAKO,cAAcqB,KAAKY,EAC1B,CAEOC,cAAcP,EAAeM,EAAeE,GACjD,KAAIF,GAAS,GAAb,CAGA,GAAIN,EAAQ,GAAKA,GAASlC,KAAKY,QAC7B,MAAM,IAAIkB,MAAM,+BAElB,GAAII,EAAQQ,EAAS,EACnB,MAAM,IAAIZ,MAAM,gDAGlB,GAAIY,EAAS,EAAG,CACd,IAAK,IAAI1B,EAAIwB,EAAQ,EAAGxB,GAAK,EAAGA,IAC9BhB,KAAKyB,IAAIS,EAAQlB,EAAI0B,EAAQ1C,KAAKuB,IAAIW,EAAQlB,IAEhD,MAAM2B,EAAgBT,EAAQM,EAAQE,EAAU1C,KAAKY,QACrD,GAAI+B,EAAe,EAEjB,IADA3C,KAAKY,SAAW+B,EACT3C,KAAKY,QAAUZ,KAAKH,YACzBG,KAAKY,UACLZ,KAAKW,cACLX,KAAKO,cAAcqB,KAAK,E,MAI5B,IAAK,IAAIZ,EAAI,EAAGA,EAAIwB,EAAOxB,IACzBhB,KAAKyB,IAAIS,EAAQlB,EAAI0B,EAAQ1C,KAAKuB,IAAIW,EAAQlB,G,CAGpD,CAQQI,gBAAgBI,GACtB,OAAQxB,KAAKW,YAAca,GAASxB,KAAKH,UAC3C,EAxNF,gB,8ECfA,iBAAgB+C,EAASC,EAAQC,EAAgB,GAC/C,GAAmB,iBAARD,EACT,OAAOA,EAIT,MAAME,EAAoBrC,MAAMsC,QAAQH,GAAO,GAAK,CAAC,EAErD,IAAK,MAAMI,KAAOJ,EAEhBE,EAAaE,GAAOH,GAAS,EAAID,EAAII,GAAQJ,EAAII,IAAQL,EAAMC,EAAII,GAAMH,EAAQ,GAGnF,OAAOC,CACT,C,uFCCA,eACA,SACA,SACA,SACA,SACA,SAEA,QACA,SACA,SACA,SACA,SACA,SAGA,SACA,SACA,SAGA,IAAIG,GAA2B,EAE/B,MAAsBC,UAAqB,EAAAxD,WAqDzCC,YACEwD,GAEAtD,QAxCe,KAAAuD,UAAYrD,KAAKC,SAAS,IAAI,EAAAC,cAC/B,KAAAoD,SAAWtD,KAAKqD,UAAUjD,MACzB,KAAAmD,QAAUvD,KAAKC,SAAS,IAAI,EAAAC,cAC7B,KAAAsD,OAASxD,KAAKuD,QAAQnD,MAC5B,KAAAqD,YAAczD,KAAKC,SAAS,IAAI,EAAAC,cAC1B,KAAAwD,WAAa1D,KAAKyD,YAAYrD,MAC7B,KAAAuD,UAAY3D,KAAKC,SAAS,IAAI,EAAAC,cAC/B,KAAA0D,SAAW5D,KAAK2D,UAAUvD,MACvB,KAAAyD,eAAiB7D,KAAKC,SAAS,IAAI,EAAAC,cACtC,KAAA4D,cAAgB9D,KAAK6D,eAAezD,MAO1C,KAAA2D,UAAY/D,KAAKC,SAAS,IAAI,EAAAC,cA2BtCF,KAAKgE,sBAAwB,IAAI,EAAAC,qBACjCjE,KAAKkE,eAAiBlE,KAAKC,SAAS,IAAI,EAAAkE,eAAef,IACvDpD,KAAKgE,sBAAsBI,WAAW,EAAAC,gBAAiBrE,KAAKkE,gBAC5DlE,KAAKsE,eAAiBtE,KAAKC,SAASD,KAAKgE,sBAAsBO,eAAe,EAAAC,gBAC9ExE,KAAKgE,sBAAsBI,WAAW,EAAAK,eAAgBzE,KAAKsE,gBAC3DtE,KAAK0E,YAAc1E,KAAKC,SAASD,KAAKgE,sBAAsBO,eAAe,EAAAI,aAC3E3E,KAAKgE,sBAAsBI,WAAW,EAAAQ,YAAa5E,KAAK0E,aACxD1E,KAAK6E,YAAc7E,KAAKC,SAASD,KAAKgE,sBAAsBO,eAAe,EAAAO,cAC3E9E,KAAKgE,sBAAsBI,WAAW,EAAAW,aAAc/E,KAAK6E,aACzD7E,KAAKgF,iBAAmBhF,KAAKC,SAASD,KAAKgE,sBAAsBO,eAAe,EAAAU,mBAChFjF,KAAKgE,sBAAsBI,WAAW,EAAAc,kBAAmBlF,KAAKgF,kBAC9DhF,KAAKmF,eAAiBnF,KAAKC,SAASD,KAAKgE,sBAAsBO,eAAe,EAAAa,iBAC9EpF,KAAKgE,sBAAsBI,WAAW,EAAAiB,gBAAiBrF,KAAKmF,gBAC5DnF,KAAKsF,gBAAkBtF,KAAKgE,sBAAsBO,eAAe,EAAAgB,gBACjEvF,KAAKgE,sBAAsBI,WAAW,EAAAoB,gBAAiBxF,KAAKsF,iBAC5DtF,KAAKyF,gBAAkBzF,KAAKgE,sBAAsBO,eAAe,EAAAmB,gBACjE1F,KAAKgE,sBAAsBI,WAAW,EAAAuB,gBAAiB3F,KAAKyF,iBAG5DzF,KAAK4F,cAAgB5F,KAAKC,SAAS,IAAI,EAAA4F,aAAa7F,KAAKsE,eAAgBtE,KAAKsF,gBAAiBtF,KAAK6E,YAAa7E,KAAK0E,YAAa1E,KAAKkE,eAAgBlE,KAAKyF,gBAAiBzF,KAAKgF,iBAAkBhF,KAAKmF,iBAC1MnF,KAAKC,UAAS,IAAA6F,cAAa9F,KAAK4F,cAAclC,WAAY1D,KAAKyD,cAC/DzD,KAAKC,SAASD,KAAK4F,eAGnB5F,KAAKC,UAAS,IAAA6F,cAAa9F,KAAKsE,eAAeV,SAAU5D,KAAK2D,YAC9D3D,KAAKC,UAAS,IAAA6F,cAAa9F,KAAK6E,YAAYrB,OAAQxD,KAAKuD,UACzDvD,KAAKC,UAAS,IAAA6F,cAAa9F,KAAK6E,YAAYvB,SAAUtD,KAAKqD,YAC3DrD,KAAKC,SAASD,KAAK6E,YAAYkB,yBAAwB,IAAM/F,KAAKgG,oBAClEhG,KAAKC,SAASD,KAAK6E,YAAYoB,aAAY,IAAOjG,KAAKkG,aAAaC,qBACpEnG,KAAKC,SAASD,KAAKkE,eAAekC,uBAAuB,eAAeC,GAAKrG,KAAKsG,+BAA+BD,MACjHrG,KAAKC,SAASD,KAAKsE,eAAeiC,UAASnG,IACzCJ,KAAK+D,UAAUnC,KAAK,CAAE4E,SAAUxG,KAAKsE,eAAemC,OAAOC,MAAOC,OAAQ,IAC1E3G,KAAK4F,cAAcgB,eAAe5G,KAAKsE,eAAemC,OAAOI,UAAW7G,KAAKsE,eAAemC,OAAOK,aAAa,KAElH9G,KAAKC,SAASD,KAAK4F,cAAcW,UAASnG,IACxCJ,KAAK+D,UAAUnC,KAAK,CAAE4E,SAAUxG,KAAKsE,eAAemC,OAAOC,MAAOC,OAAQ,IAC1E3G,KAAK4F,cAAcgB,eAAe5G,KAAKsE,eAAemC,OAAOI,UAAW7G,KAAKsE,eAAemC,OAAOK,aAAa,KAIlH9G,KAAKkG,aAAelG,KAAKC,SAAS,IAAI,EAAA8G,aAAY,CAACC,EAAMC,IAAkBjH,KAAK4F,cAAcsB,MAAMF,EAAMC,MAC1GjH,KAAKC,UAAS,IAAA6F,cAAa9F,KAAKkG,aAAapC,cAAe9D,KAAK6D,iBAEjE7D,KAAKC,UAAS,IAAAkH,eAAa,K,MACR,QAAjB,EAAAnH,KAAKoH,oBAAY,SAAEC,UACnBrH,KAAKoH,kBAAe9F,CAAS,IAEjC,CAzEWiF,eAOT,OANKvG,KAAKsH,eACRtH,KAAKsH,aAAetH,KAAKC,SAAS,IAAI,EAAAC,cACtCF,KAAK+D,UAAU3D,OAAMmH,I,MACF,QAAjB,EAAAvH,KAAKsH,oBAAY,SAAE1F,KAAK2F,EAAGf,SAAS,KAGjCxG,KAAKsH,aAAalH,KAC3B,CAEWoH,WAAiB,OAAOxH,KAAKsE,eAAekD,IAAM,CAClDC,WAAiB,OAAOzH,KAAKsE,eAAemD,IAAM,CAClDC,cAAwB,OAAO1H,KAAKsE,eAAeoD,OAAS,CAC5DtE,cAAwC,OAAOpD,KAAKkE,eAAed,OAAS,CAC5EA,YAAQA,GACjB,IAAK,MAAMH,KAAOG,EAChBpD,KAAKkE,eAAed,QAAQH,GAAOG,EAAQH,EAE/C,CAyDO0E,MAAMX,EAA2BY,GACtC5H,KAAKkG,aAAayB,MAAMX,EAAMY,EAChC,CAWOC,UAAUb,EAA2Bc,GACtC9H,KAAK0E,YAAYqD,UAAY,EAAAC,aAAaC,OAAS/E,IACrDlD,KAAK0E,YAAYwD,KAAK,qDACtBhF,GAA2B,GAE7BlD,KAAKkG,aAAa2B,UAAUb,EAAMc,EACpC,CAEOK,OAAOC,EAAWC,GACnBC,MAAMF,IAAME,MAAMD,KAItBD,EAAInH,KAAKsH,IAAIH,EAAG,EAAAI,cAChBH,EAAIpH,KAAKsH,IAAIF,EAAG,EAAAI,cAEhBzI,KAAKsE,eAAe6D,OAAOC,EAAGC,GAChC,CAOOK,OAAOC,EAA2BC,GAAqB,GAC5D5I,KAAKsE,eAAeoE,OAAOC,EAAWC,EACxC,CASOC,YAAYC,EAAcC,EAA+BpC,GAC9D3G,KAAKsE,eAAeuE,YAAYC,EAAMC,EAAqBpC,EAC7D,CAMOqC,YAAYC,GACjBjJ,KAAKsE,eAAe0E,YAAYC,EAClC,CAKOC,cACLlJ,KAAKsE,eAAe4E,aACtB,CAKOlD,iBACLhG,KAAKsE,eAAe0B,gBACtB,CAEOmD,aAAaC,GAClBpJ,KAAKsE,eAAe6E,aAAaC,EACnC,CAGOC,mBAAmBC,EAAyB1B,GACjD,OAAO5H,KAAK4F,cAAcyD,mBAAmBC,EAAI1B,EACnD,CAGO2B,mBAAmBD,EAAyB1B,GACjD,OAAO5H,KAAK4F,cAAc2D,mBAAmBD,EAAI1B,EACnD,CAGO4B,mBAAmBF,EAAyB1B,GACjD,OAAO5H,KAAK4F,cAAc4D,mBAAmBF,EAAI1B,EACnD,CAGO6B,mBAAmBC,EAAe9B,GACvC,OAAO5H,KAAK4F,cAAc6D,mBAAmBC,EAAO9B,EACtD,CAEU+B,SACJ3J,KAAKkE,eAAe0F,WAAWC,aACjC7J,KAAK8J,oBAET,CAEOC,QACL/J,KAAK4F,cAAcmE,QACnB/J,KAAKsE,eAAeyF,QACpB/J,KAAKsF,gBAAgByE,QACrB/J,KAAK6E,YAAYkF,QACjB/J,KAAKgF,iBAAiB+E,OACxB,CAEQzD,+BAA+B5E,G,MACjCA,EACF1B,KAAK8J,sBAEY,QAAjB,EAAA9J,KAAKoH,oBAAY,SAAEC,UACnBrH,KAAKoH,kBAAe9F,EAExB,CAEUwI,qBACR,IAAK9J,KAAKoH,aAAc,CACtB,MAAM4C,EAA6B,GACnCA,EAAYrI,KAAK3B,KAAK0D,WAAW,EAAAuG,8BAA8BC,KAAK,KAAMlK,KAAKsE,kBAC/E0F,EAAYrI,KAAK3B,KAAKwJ,mBAAmB,CAAEW,MAAO,MAAO,MACvD,IAAAF,+BAA8BjK,KAAKsE,iBAC5B,MAETtE,KAAKoH,aAAe,CAClBC,QAAS,KACP,IAAK,MAAM+C,KAAKJ,EACdI,EAAE/C,S,GAKZ,EArPF,gB,oGCxBA,mCACU,KAAAgD,WAAgC,GAEhC,KAAAC,WAAqB,CAwC/B,CAtCalK,YAmBT,OAlBKJ,KAAKuK,SACRvK,KAAKuK,OAAUC,IACbxK,KAAKqK,WAAW1I,KAAK6I,GACrB,MAAMC,EAAa,CACjBpD,QAAS,KACP,IAAKrH,KAAKsK,UACR,IAAK,IAAItJ,EAAI,EAAGA,EAAIhB,KAAKqK,WAAWlJ,OAAQH,IAC1C,GAAIhB,KAAKqK,WAAWrJ,KAAOwJ,EAEzB,YADAxK,KAAKqK,WAAWpI,OAAOjB,EAAG,E,GAOpC,OAAOyJ,CAAU,GAGdzK,KAAKuK,MACd,CAEO3I,KAAK8I,EAASC,GACnB,MAAMC,EAA2B,GACjC,IAAK,IAAI5J,EAAI,EAAGA,EAAIhB,KAAKqK,WAAWlJ,OAAQH,IAC1C4J,EAAMjJ,KAAK3B,KAAKqK,WAAWrJ,IAE7B,IAAK,IAAIA,EAAI,EAAGA,EAAI4J,EAAMzJ,OAAQH,IAChC4J,EAAM5J,GAAG6J,UAAKvJ,EAAWoJ,EAAMC,EAEnC,CAEOtD,UACDrH,KAAKqK,aACPrK,KAAKqK,WAAWlJ,OAAS,GAE3BnB,KAAKsK,WAAY,CACnB,GAGF,wBAAgCQ,EAAiBC,GAC/C,OAAOD,GAAKzE,GAAK0E,EAAGnJ,KAAKyE,IAC3B,C,6hBC7DA,eACA,SACA,QACA,SACA,SACA,SACA,SAEA,SACA,SACA,SACA,SACA,SACA,SAEA,SAKM2E,EAAoC,CAAE,IAAK,EAAG,IAAK,EAAG,IAAK,EAAG,IAAK,EAAG,IAAK,EAAG,IAAK,GAgCnFC,EAAyB,OAQ/B,SAASC,EAAoBC,EAAWC,GACtC,GAAID,EAAI,GACN,OAAOC,EAAKC,cAAe,EAE7B,OAAQF,GACN,KAAK,EAAG,QAASC,EAAKE,WACtB,KAAK,EAAG,QAASF,EAAKG,YACtB,KAAK,EAAG,QAASH,EAAKI,eACtB,KAAK,EAAG,QAASJ,EAAKK,iBACtB,KAAK,EAAG,QAASL,EAAKM,SACtB,KAAK,EAAG,QAASN,EAAKO,SACtB,KAAK,EAAG,QAASP,EAAKQ,WACtB,KAAK,EAAG,QAASR,EAAKS,gBACtB,KAAK,EAAG,QAAST,EAAKU,YACtB,KAAK,GAAI,QAASV,EAAKW,cACvB,KAAK,GAAI,QAASX,EAAKY,YACvB,KAAK,GAAI,QAASZ,EAAKa,eACvB,KAAK,GAAI,QAASb,EAAKc,iBACvB,KAAK,GAAI,QAASd,EAAKe,oBACvB,KAAK,GAAI,QAASf,EAAKgB,kBACvB,KAAK,GAAI,QAAShB,EAAKiB,gBACvB,KAAK,GAAI,QAASjB,EAAKkB,mBACvB,KAAK,GAAI,QAASlB,EAAKmB,aACvB,KAAK,GAAI,QAASnB,EAAKoB,YACvB,KAAK,GAAI,QAASpB,EAAKqB,UACvB,KAAK,GAAI,QAASrB,EAAKsB,SACvB,KAAK,GAAI,QAAStB,EAAKC,YAEzB,OAAO,CACT,CAEA,IAAYsB,GAAZ,SAAYA,GACV,iDACA,kDACD,CAHD,CAAYA,EAAA,EAAAA,2BAAA,EAAAA,yBAAwB,KASpC,IAAIC,EAAQ,EASZ,MAAa/G,UAAqB,EAAAlG,WAqDhCC,YACmB0E,EACAgB,EACAuH,EACAnI,EACAoI,EACArH,EACAsH,EACAC,EACAC,EAAiC,IAAI,EAAAC,sBAEtDpN,QAViB,KAAAwE,eAAAA,EACA,KAAAgB,gBAAAA,EACA,KAAAuH,aAAAA,EACA,KAAAnI,YAAAA,EACA,KAAAoI,gBAAAA,EACA,KAAArH,gBAAAA,EACA,KAAAsH,kBAAAA,EACA,KAAAC,gBAAAA,EACA,KAAAC,QAAAA,EA7DX,KAAAE,aAA4B,IAAIC,YAAY,MAC5C,KAAAC,eAAgC,IAAI,EAAAC,cACpC,KAAAC,aAA4B,IAAI,EAAAC,YAChC,KAAAC,UAAsB,IAAI,EAAAC,SAC1B,KAAAC,aAAe,GACf,KAAAC,UAAY,GAEV,KAAAC,kBAA8B,GAC9B,KAAAC,eAA2B,GAE7B,KAAAC,aAA+B,EAAAC,kBAAkBpL,QAEjD,KAAAqL,uBAAyC,EAAAD,kBAAkBpL,QAIlD,KAAAsL,eAAiBlO,KAAKC,SAAS,IAAI,EAAAC,cACpC,KAAAiO,cAAgBnO,KAAKkO,eAAe9N,MACnC,KAAAgO,sBAAwBpO,KAAKC,SAAS,IAAI,EAAAC,cAC3C,KAAAmO,qBAAuBrO,KAAKoO,sBAAsBhO,MACjD,KAAAkO,gBAAkBtO,KAAKC,SAAS,IAAI,EAAAC,cACrC,KAAAqO,eAAiBvO,KAAKsO,gBAAgBlO,MACrC,KAAAoO,oBAAsBxO,KAAKC,SAAS,IAAI,EAAAC,cACzC,KAAAuO,mBAAqBzO,KAAKwO,oBAAoBpO,MAC7C,KAAAsO,wBAA0B1O,KAAKC,SAAS,IAAI,EAAAC,cAC7C,KAAAyO,uBAAyB3O,KAAK0O,wBAAwBtO,MACrD,KAAAwO,+BAAiC5O,KAAKC,SAAS,IAAI,EAAAC,cACpD,KAAA2O,8BAAgC7O,KAAK4O,+BAA+BxO,MAEnE,KAAA0O,YAAc9O,KAAKC,SAAS,IAAI,EAAAC,cACjC,KAAA6O,WAAa/O,KAAK8O,YAAY1O,MAC7B,KAAA4O,WAAahP,KAAKC,SAAS,IAAI,EAAAC,cAChC,KAAA+O,UAAYjP,KAAKgP,WAAW5O,MAC3B,KAAA8O,cAAgBlP,KAAKC,SAAS,IAAI,EAAAC,cACnC,KAAAiP,aAAenP,KAAKkP,cAAc9O,MACjC,KAAAqD,YAAczD,KAAKC,SAAS,IAAI,EAAAC,cACjC,KAAAwD,WAAa1D,KAAKyD,YAAYrD,MAC7B,KAAA2D,UAAY/D,KAAKC,SAAS,IAAI,EAAAC,cAC/B,KAAAqG,SAAWvG,KAAK+D,UAAU3D,MACzB,KAAAgP,eAAiBpP,KAAKC,SAAS,IAAI,EAAAC,cACpC,KAAAmP,cAAgBrP,KAAKoP,eAAehP,MACnC,KAAAkP,SAAWtP,KAAKC,SAAS,IAAI,EAAAC,cAC9B,KAAAqP,QAAUvP,KAAKsP,SAASlP,MAEhC,KAAAoP,YAA2B,CACjCC,QAAQ,EACRC,aAAc,EACdC,aAAc,EACdC,cAAe,EACfpJ,SAAU,GAsvFJ,KAAAqJ,eAAiB,CAAC,IAAD,SAvuFvB7P,KAAKC,SAASD,KAAKiN,SACnBjN,KAAK8P,iBAAmB,IAAIC,EAAgB/P,KAAKsE,gBAGjDtE,KAAKgQ,cAAgBhQ,KAAKsE,eAAemC,OACzCzG,KAAKC,SAASD,KAAKsE,eAAeoD,QAAQuI,kBAAiB5J,GAAKrG,KAAKgQ,cAAgB3J,EAAE6J,gBAKvFlQ,KAAKiN,QAAQkD,uBAAsB,CAACzG,EAAO0G,KACzCpQ,KAAK0E,YAAY2L,MAAM,qBAAsB,CAAEC,WAAYtQ,KAAKiN,QAAQsD,cAAc7G,GAAQ0G,OAAQA,EAAOI,WAAY,IAE3HxQ,KAAKiN,QAAQwD,uBAAsB/G,IACjC1J,KAAK0E,YAAY2L,MAAM,qBAAsB,CAAEC,WAAYtQ,KAAKiN,QAAQsD,cAAc7G,IAAS,IAEjG1J,KAAKiN,QAAQyD,2BAA0BC,IACrC3Q,KAAK0E,YAAY2L,MAAM,yBAA0B,CAAEM,QAAO,IAE5D3Q,KAAKiN,QAAQ2D,uBAAsB,CAACN,EAAYO,EAAQ7J,KACtDhH,KAAK0E,YAAY2L,MAAM,qBAAsB,CAAEC,aAAYO,SAAQ7J,QAAO,IAE5EhH,KAAKiN,QAAQ6D,uBAAsB,CAACpH,EAAOmH,EAAQE,KAClC,SAAXF,IACFE,EAAUA,EAAQP,WAEpBxQ,KAAK0E,YAAY2L,MAAM,qBAAsB,CAAEC,WAAYtQ,KAAKiN,QAAQsD,cAAc7G,GAAQmH,SAAQE,WAAU,IAMlH/Q,KAAKiN,QAAQ+D,iBAAgB,CAAChK,EAAM9E,EAAO+O,IAAQjR,KAAKkR,MAAMlK,EAAM9E,EAAO+O,KAK3EjR,KAAKiN,QAAQzD,mBAAmB,CAAEW,MAAO,MAAOiG,GAAUpQ,KAAKmR,YAAYf,KAC3EpQ,KAAKiN,QAAQzD,mBAAmB,CAAE4H,cAAe,IAAKjH,MAAO,MAAOiG,GAAUpQ,KAAKqR,WAAWjB,KAC9FpQ,KAAKiN,QAAQzD,mBAAmB,CAAEW,MAAO,MAAOiG,GAAUpQ,KAAKsR,SAASlB,KACxEpQ,KAAKiN,QAAQzD,mBAAmB,CAAE4H,cAAe,IAAKjH,MAAO,MAAOiG,GAAUpQ,KAAKuR,YAAYnB,KAC/FpQ,KAAKiN,QAAQzD,mBAAmB,CAAEW,MAAO,MAAOiG,GAAUpQ,KAAKwR,WAAWpB,KAC1EpQ,KAAKiN,QAAQzD,mBAAmB,CAAEW,MAAO,MAAOiG,GAAUpQ,KAAKyR,cAAcrB,KAC7EpQ,KAAKiN,QAAQzD,mBAAmB,CAAEW,MAAO,MAAOiG,GAAUpQ,KAAK0R,eAAetB,KAC9EpQ,KAAKiN,QAAQzD,mBAAmB,CAAEW,MAAO,MAAOiG,GAAUpQ,KAAK2R,eAAevB,KAC9EpQ,KAAKiN,QAAQzD,mBAAmB,CAAEW,MAAO,MAAOiG,GAAUpQ,KAAK4R,oBAAoBxB,KACnFpQ,KAAKiN,QAAQzD,mBAAmB,CAAEW,MAAO,MAAOiG,GAAUpQ,KAAK6R,mBAAmBzB,KAClFpQ,KAAKiN,QAAQzD,mBAAmB,CAAEW,MAAO,MAAOiG,GAAUpQ,KAAK8R,eAAe1B,KAC9EpQ,KAAKiN,QAAQzD,mBAAmB,CAAEW,MAAO,MAAOiG,GAAUpQ,KAAK+R,iBAAiB3B,KAChFpQ,KAAKiN,QAAQzD,mBAAmB,CAAEW,MAAO,MAAOiG,GAAUpQ,KAAKgS,eAAe5B,GAAQ,KACtFpQ,KAAKiN,QAAQzD,mBAAmB,CAAEyI,OAAQ,IAAK9H,MAAO,MAAOiG,GAAUpQ,KAAKgS,eAAe5B,GAAQ,KACnGpQ,KAAKiN,QAAQzD,mBAAmB,CAAEW,MAAO,MAAOiG,GAAUpQ,KAAKkS,YAAY9B,GAAQ,KACnFpQ,KAAKiN,QAAQzD,mBAAmB,CAAEyI,OAAQ,IAAK9H,MAAO,MAAOiG,GAAUpQ,KAAKkS,YAAY9B,GAAQ,KAChGpQ,KAAKiN,QAAQzD,mBAAmB,CAAEW,MAAO,MAAOiG,GAAUpQ,KAAKmS,YAAY/B,KAC3EpQ,KAAKiN,QAAQzD,mBAAmB,CAAEW,MAAO,MAAOiG,GAAUpQ,KAAKoS,YAAYhC,KAC3EpQ,KAAKiN,QAAQzD,mBAAmB,CAAEW,MAAO,MAAOiG,GAAUpQ,KAAKqS,YAAYjC,KAC3EpQ,KAAKiN,QAAQzD,mBAAmB,CAAEW,MAAO,MAAOiG,GAAUpQ,KAAKsS,SAASlC,KACxEpQ,KAAKiN,QAAQzD,mBAAmB,CAAEW,MAAO,MAAOiG,GAAUpQ,KAAKuS,WAAWnC,KAC1EpQ,KAAKiN,QAAQzD,mBAAmB,CAAEW,MAAO,MAAOiG,GAAUpQ,KAAKwS,WAAWpC,KAC1EpQ,KAAKiN,QAAQzD,mBAAmB,CAAEW,MAAO,MAAOiG,GAAUpQ,KAAKyS,kBAAkBrC,KACjFpQ,KAAKiN,QAAQzD,mBAAmB,CAAEW,MAAO,MAAOiG,GAAUpQ,KAAK0S,gBAAgBtC,KAC/EpQ,KAAKiN,QAAQzD,mBAAmB,CAAEW,MAAO,MAAOiG,GAAUpQ,KAAK2S,kBAAkBvC,KACjFpQ,KAAKiN,QAAQzD,mBAAmB,CAAEW,MAAO,MAAOiG,GAAUpQ,KAAK4S,yBAAyBxC,KACxFpQ,KAAKiN,QAAQzD,mBAAmB,CAAEW,MAAO,MAAOiG,GAAUpQ,KAAK6S,4BAA4BzC,KAC3FpQ,KAAKiN,QAAQzD,mBAAmB,CAAEyI,OAAQ,IAAK9H,MAAO,MAAOiG,GAAUpQ,KAAK8S,8BAA8B1C,KAC1GpQ,KAAKiN,QAAQzD,mBAAmB,CAAEW,MAAO,MAAOiG,GAAUpQ,KAAK+S,gBAAgB3C,KAC/EpQ,KAAKiN,QAAQzD,mBAAmB,CAAEW,MAAO,MAAOiG,GAAUpQ,KAAKgT,kBAAkB5C,KACjFpQ,KAAKiN,QAAQzD,mBAAmB,CAAEW,MAAO,MAAOiG,GAAUpQ,KAAKiT,WAAW7C,KAC1EpQ,KAAKiN,QAAQzD,mBAAmB,CAAEW,MAAO,MAAOiG,GAAUpQ,KAAKkT,SAAS9C,KACxEpQ,KAAKiN,QAAQzD,mBAAmB,CAAEW,MAAO,MAAOiG,GAAUpQ,KAAKmT,QAAQ/C,KACvEpQ,KAAKiN,QAAQzD,mBAAmB,CAAEyI,OAAQ,IAAK9H,MAAO,MAAOiG,GAAUpQ,KAAKoT,eAAehD,KAC3FpQ,KAAKiN,QAAQzD,mBAAmB,CAAEW,MAAO,MAAOiG,GAAUpQ,KAAKqT,UAAUjD,KACzEpQ,KAAKiN,QAAQzD,mBAAmB,CAAEyI,OAAQ,IAAK9H,MAAO,MAAOiG,GAAUpQ,KAAKsT,iBAAiBlD,KAC7FpQ,KAAKiN,QAAQzD,mBAAmB,CAAEW,MAAO,MAAOiG,GAAUpQ,KAAKuT,eAAenD,KAC9EpQ,KAAKiN,QAAQzD,mBAAmB,CAAEW,MAAO,MAAOiG,GAAUpQ,KAAKwT,aAAapD,KAC5EpQ,KAAKiN,QAAQzD,mBAAmB,CAAEyI,OAAQ,IAAK9H,MAAO,MAAOiG,GAAUpQ,KAAKyT,oBAAoBrD,KAChGpQ,KAAKiN,QAAQzD,mBAAmB,CAAE4H,cAAe,IAAKjH,MAAO,MAAOiG,GAAUpQ,KAAK0T,UAAUtD,KAC7FpQ,KAAKiN,QAAQzD,mBAAmB,CAAE4H,cAAe,IAAKjH,MAAO,MAAOiG,GAAUpQ,KAAK2T,eAAevD,KAClGpQ,KAAKiN,QAAQzD,mBAAmB,CAAEW,MAAO,MAAOiG,GAAUpQ,KAAK4T,gBAAgBxD,KAC/EpQ,KAAKiN,QAAQzD,mBAAmB,CAAEW,MAAO,MAAOiG,GAAUpQ,KAAK6T,WAAWzD,KAC1EpQ,KAAKiN,QAAQzD,mBAAmB,CAAEW,MAAO,MAAOiG,GAAUpQ,KAAK8T,cAAc1D,KAC7EpQ,KAAKiN,QAAQzD,mBAAmB,CAAEW,MAAO,MAAOiG,GAAUpQ,KAAK+T,cAAc3D,KAC7EpQ,KAAKiN,QAAQzD,mBAAmB,CAAE4H,cAAe,IAAMjH,MAAO,MAAOiG,GAAUpQ,KAAKgU,cAAc5D,KAClGpQ,KAAKiN,QAAQzD,mBAAmB,CAAE4H,cAAe,IAAMjH,MAAO,MAAOiG,GAAUpQ,KAAKiU,cAAc7D,KAClGpQ,KAAKiN,QAAQzD,mBAAmB,CAAE4H,cAAe,IAAKjH,MAAO,MAAOiG,GAAUpQ,KAAKkU,gBAAgB9D,KACnGpQ,KAAKiN,QAAQzD,mBAAmB,CAAE4H,cAAe,IAAKjH,MAAO,MAAOiG,GAAUpQ,KAAKmU,YAAY/D,GAAQ,KACvGpQ,KAAKiN,QAAQzD,mBAAmB,CAAEyI,OAAQ,IAAKb,cAAe,IAAKjH,MAAO,MAAOiG,GAAUpQ,KAAKmU,YAAY/D,GAAQ,KAKpHpQ,KAAKiN,QAAQmH,kBAAkB,EAAAC,GAAGC,KAAK,IAAMtU,KAAKuU,SAClDvU,KAAKiN,QAAQmH,kBAAkB,EAAAC,GAAGG,IAAI,IAAMxU,KAAKyU,aACjDzU,KAAKiN,QAAQmH,kBAAkB,EAAAC,GAAGK,IAAI,IAAM1U,KAAKyU,aACjDzU,KAAKiN,QAAQmH,kBAAkB,EAAAC,GAAGM,IAAI,IAAM3U,KAAKyU,aACjDzU,KAAKiN,QAAQmH,kBAAkB,EAAAC,GAAGO,IAAI,IAAM5U,KAAK6U,mBACjD7U,KAAKiN,QAAQmH,kBAAkB,EAAAC,GAAGS,IAAI,IAAM9U,KAAK+U,cACjD/U,KAAKiN,QAAQmH,kBAAkB,EAAAC,GAAGW,IAAI,IAAMhV,KAAKiV,QACjDjV,KAAKiN,QAAQmH,kBAAkB,EAAAC,GAAGa,IAAI,IAAMlV,KAAKmV,aACjDnV,KAAKiN,QAAQmH,kBAAkB,EAAAC,GAAGe,IAAI,IAAMpV,KAAKqV,YAGjDrV,KAAKiN,QAAQmH,kBAAkB,EAAAkB,GAAGC,KAAK,IAAMvV,KAAKwB,UAClDxB,KAAKiN,QAAQmH,kBAAkB,EAAAkB,GAAGE,KAAK,IAAMxV,KAAKyV,aAClDzV,KAAKiN,QAAQmH,kBAAkB,EAAAkB,GAAGI,KAAK,IAAM1V,KAAK2V,WAMlD3V,KAAKiN,QAAQxD,mBAAmB,EAAG,IAAI,EAAAmM,YAAW5O,IAAUhH,KAAK6V,SAAS7O,GAAOhH,KAAK8V,YAAY9O,IAAc,MAEhHhH,KAAKiN,QAAQxD,mBAAmB,EAAG,IAAI,EAAAmM,YAAW5O,GAAQhH,KAAK8V,YAAY9O,MAE3EhH,KAAKiN,QAAQxD,mBAAmB,EAAG,IAAI,EAAAmM,YAAW5O,GAAQhH,KAAK6V,SAAS7O,MAGxEhH,KAAKiN,QAAQxD,mBAAmB,EAAG,IAAI,EAAAmM,YAAW5O,GAAQhH,KAAK+V,wBAAwB/O,MAKvFhH,KAAKiN,QAAQxD,mBAAmB,EAAG,IAAI,EAAAmM,YAAW5O,GAAQhH,KAAKgW,aAAahP,MAE5EhH,KAAKiN,QAAQxD,mBAAmB,GAAI,IAAI,EAAAmM,YAAW5O,GAAQhH,KAAKiW,mBAAmBjP,MAEnFhH,KAAKiN,QAAQxD,mBAAmB,GAAI,IAAI,EAAAmM,YAAW5O,GAAQhH,KAAKkW,mBAAmBlP,MAEnFhH,KAAKiN,QAAQxD,mBAAmB,GAAI,IAAI,EAAAmM,YAAW5O,GAAQhH,KAAKmW,uBAAuBnP,MAavFhH,KAAKiN,QAAQxD,mBAAmB,IAAK,IAAI,EAAAmM,YAAW5O,GAAQhH,KAAKoW,oBAAoBpP,MAIrFhH,KAAKiN,QAAQxD,mBAAmB,IAAK,IAAI,EAAAmM,YAAW5O,GAAQhH,KAAKqW,eAAerP,MAEhFhH,KAAKiN,QAAQxD,mBAAmB,IAAK,IAAI,EAAAmM,YAAW5O,GAAQhH,KAAKsW,eAAetP,MAEhFhH,KAAKiN,QAAQxD,mBAAmB,IAAK,IAAI,EAAAmM,YAAW5O,GAAQhH,KAAKuW,mBAAmBvP,MAYpFhH,KAAKiN,QAAQ5D,mBAAmB,CAAEc,MAAO,MAAO,IAAMnK,KAAK6T,eAC3D7T,KAAKiN,QAAQ5D,mBAAmB,CAAEc,MAAO,MAAO,IAAMnK,KAAK+T,kBAC3D/T,KAAKiN,QAAQ5D,mBAAmB,CAAEc,MAAO,MAAO,IAAMnK,KAAKwB,UAC3DxB,KAAKiN,QAAQ5D,mBAAmB,CAAEc,MAAO,MAAO,IAAMnK,KAAKyV,aAC3DzV,KAAKiN,QAAQ5D,mBAAmB,CAAEc,MAAO,MAAO,IAAMnK,KAAK2V,WAC3D3V,KAAKiN,QAAQ5D,mBAAmB,CAAEc,MAAO,MAAO,IAAMnK,KAAKwW,iBAC3DxW,KAAKiN,QAAQ5D,mBAAmB,CAAEc,MAAO,MAAO,IAAMnK,KAAKyW,0BAC3DzW,KAAKiN,QAAQ5D,mBAAmB,CAAEc,MAAO,MAAO,IAAMnK,KAAK0W,sBAC3D1W,KAAKiN,QAAQ5D,mBAAmB,CAAEc,MAAO,MAAO,IAAMnK,KAAK2W,cAC3D3W,KAAKiN,QAAQ5D,mBAAmB,CAAEc,MAAO,MAAO,IAAMnK,KAAK4W,UAAU,KACrE5W,KAAKiN,QAAQ5D,mBAAmB,CAAEc,MAAO,MAAO,IAAMnK,KAAK4W,UAAU,KACrE5W,KAAKiN,QAAQ5D,mBAAmB,CAAEc,MAAO,MAAO,IAAMnK,KAAK4W,UAAU,KACrE5W,KAAKiN,QAAQ5D,mBAAmB,CAAEc,MAAO,MAAO,IAAMnK,KAAK4W,UAAU,KACrE5W,KAAKiN,QAAQ5D,mBAAmB,CAAEc,MAAO,MAAO,IAAMnK,KAAK4W,UAAU,KACrE5W,KAAKiN,QAAQ5D,mBAAmB,CAAE+H,cAAe,IAAKjH,MAAO,MAAO,IAAMnK,KAAK6W,yBAC/E7W,KAAKiN,QAAQ5D,mBAAmB,CAAE+H,cAAe,IAAKjH,MAAO,MAAO,IAAMnK,KAAK6W,yBAC/E,IAAK,MAAMC,KAAQ,EAAAC,SACjB/W,KAAKiN,QAAQ5D,mBAAmB,CAAE+H,cAAe,IAAKjH,MAAO2M,IAAQ,IAAM9W,KAAKgX,cAAc,IAAMF,KACpG9W,KAAKiN,QAAQ5D,mBAAmB,CAAE+H,cAAe,IAAKjH,MAAO2M,IAAQ,IAAM9W,KAAKgX,cAAc,IAAMF,KACpG9W,KAAKiN,QAAQ5D,mBAAmB,CAAE+H,cAAe,IAAKjH,MAAO2M,IAAQ,IAAM9W,KAAKgX,cAAc,IAAMF,KACpG9W,KAAKiN,QAAQ5D,mBAAmB,CAAE+H,cAAe,IAAKjH,MAAO2M,IAAQ,IAAM9W,KAAKgX,cAAc,IAAMF,KACpG9W,KAAKiN,QAAQ5D,mBAAmB,CAAE+H,cAAe,IAAKjH,MAAO2M,IAAQ,IAAM9W,KAAKgX,cAAc,IAAMF,KACpG9W,KAAKiN,QAAQ5D,mBAAmB,CAAE+H,cAAe,IAAKjH,MAAO2M,IAAQ,IAAM9W,KAAKgX,cAAc,IAAMF,KACpG9W,KAAKiN,QAAQ5D,mBAAmB,CAAE+H,cAAe,IAAKjH,MAAO2M,IAAQ,IAAM9W,KAAKgX,cAAc,IAAMF,KAEtG9W,KAAKiN,QAAQ5D,mBAAmB,CAAE+H,cAAe,IAAKjH,MAAO,MAAO,IAAMnK,KAAKiX,2BAK/EjX,KAAKiN,QAAQiK,iBAAiBC,IAC5BnX,KAAK0E,YAAY0S,MAAM,kBAAmBD,GACnCA,KAMTnX,KAAKiN,QAAQ1D,mBAAmB,CAAE6H,cAAe,IAAKjH,MAAO,KAAO,IAAI,EAAAkN,YAAW,CAACrQ,EAAMoJ,IAAWpQ,KAAKsX,oBAAoBtQ,EAAMoJ,KACtI,CA7POmH,cAAgC,OAAOvX,KAAK+N,YAAc,CAkQzDyJ,eAAe9H,EAAsBC,EAAsBC,EAAuBpJ,GACxFxG,KAAKwP,YAAYC,QAAS,EAC1BzP,KAAKwP,YAAYE,aAAeA,EAChC1P,KAAKwP,YAAYG,aAAeA,EAChC3P,KAAKwP,YAAYI,cAAgBA,EACjC5P,KAAKwP,YAAYhJ,SAAWA,CAC9B,CAEQiR,uBAAuBC,GAEzB1X,KAAK0E,YAAYqD,UAAY,EAAAC,aAAaC,MAC5C0P,QAAQC,KAAK,CAACF,EAAG,IAAIC,SAAQ,CAACE,EAAKC,IAAQC,YAAW,IAAMD,EAAI,kBArS7C,SAsShBE,OAAMC,IACL,GAAY,kBAARA,EACF,MAAMA,EAERC,QAAQhQ,KAAK,kDAAiE,GAGtF,CAEQiQ,oBACN,OAAOnY,KAAK+N,aAAaqK,SAASC,KACpC,CAeOnR,MAAMF,EAA2BC,GACtC,IAAIqR,EACA5I,EAAe1P,KAAKgQ,cAAc5H,EAClCuH,EAAe3P,KAAKgQ,cAAc3H,EAClCnG,EAAQ,EACZ,MAAMqW,EAAYvY,KAAKwP,YAAYC,OAEnC,GAAI8I,EAAW,CAEb,GAAID,EAAStY,KAAKiN,QAAQ/F,MAAMlH,KAAKmN,aAAcnN,KAAKwP,YAAYI,cAAe3I,GAEjF,OADAjH,KAAKyX,uBAAuBa,GACrBA,EAET5I,EAAe1P,KAAKwP,YAAYE,aAChCC,EAAe3P,KAAKwP,YAAYG,aAChC3P,KAAKwP,YAAYC,QAAS,EACtBzI,EAAK7F,OAAS8J,IAChB/I,EAAQlC,KAAKwP,YAAYhJ,SAAWyE,E,CA0BxC,GArBIjL,KAAK0E,YAAYqD,UAAY,EAAAC,aAAawQ,OAC5CxY,KAAK0E,YAAY2L,MAAM,gBAA+B,iBAATrJ,EAAoB,KAAKA,KAAU,KAAKtG,MAAM+X,UAAUC,IAAI7N,KAAK7D,GAAMX,GAAKsS,OAAOC,aAAavS,KAAIwS,KAAK,QAA0B,iBAAT7R,EACnKA,EAAK8R,MAAM,IAAIJ,KAAIrS,GAAKA,EAAE0S,WAAW,KACrC/R,GAKFhH,KAAKmN,aAAahM,OAAS6F,EAAK7F,QAC9BnB,KAAKmN,aAAahM,OAAS8J,IAC7BjL,KAAKmN,aAAe,IAAIC,YAAYnM,KAAKC,IAAI8F,EAAK7F,OAAQ8J,KAMzDsN,GACHvY,KAAK8P,iBAAiBkJ,aAIpBhS,EAAK7F,OAAS8J,EAChB,IAAK,IAAIjK,EAAIkB,EAAOlB,EAAIgG,EAAK7F,OAAQH,GAAKiK,EAAwB,CAChE,MAAMgG,EAAMjQ,EAAIiK,EAAyBjE,EAAK7F,OAASH,EAAIiK,EAAyBjE,EAAK7F,OACnF8X,EAAuB,iBAATjS,EAChBhH,KAAKqN,eAAe6L,OAAOlS,EAAKmS,UAAUnY,EAAGiQ,GAAMjR,KAAKmN,cACxDnN,KAAKuN,aAAa2L,OAAOlS,EAAKoS,SAASpY,EAAGiQ,GAAMjR,KAAKmN,cACzD,GAAImL,EAAStY,KAAKiN,QAAQ/F,MAAMlH,KAAKmN,aAAc8L,GAGjD,OAFAjZ,KAAKwX,eAAe9H,EAAcC,EAAcsJ,EAAKjY,GACrDhB,KAAKyX,uBAAuBa,GACrBA,C,MAIX,IAAKC,EAAW,CACd,MAAMU,EAAuB,iBAATjS,EAChBhH,KAAKqN,eAAe6L,OAAOlS,EAAMhH,KAAKmN,cACtCnN,KAAKuN,aAAa2L,OAAOlS,EAAMhH,KAAKmN,cACxC,GAAImL,EAAStY,KAAKiN,QAAQ/F,MAAMlH,KAAKmN,aAAc8L,GAGjD,OAFAjZ,KAAKwX,eAAe9H,EAAcC,EAAcsJ,EAAK,GACrDjZ,KAAKyX,uBAAuBa,GACrBA,C,CAKTtY,KAAKgQ,cAAc5H,IAAMsH,GAAgB1P,KAAKgQ,cAAc3H,IAAMsH,GACpE3P,KAAKkP,cAActN,OAIrB5B,KAAKoO,sBAAsBxM,KAAK5B,KAAK8P,iBAAiB5N,MAAOlC,KAAK8P,iBAAiBmB,IACrF,CAEOC,MAAMlK,EAAmB9E,EAAe+O,GAC7C,IAAIN,EACA0I,EACJ,MAAMC,EAAUtZ,KAAKsF,gBAAgBgU,QAC/BC,EAAmBvZ,KAAK8M,gBAAgBlD,WAAW2P,iBACnD/R,EAAOxH,KAAKsE,eAAekD,KAC3BgS,EAAiBxZ,KAAK6M,aAAa4M,gBAAgBC,WACnDC,EAAa3Z,KAAK6M,aAAa+M,MAAMD,WACrCE,EAAU7Z,KAAK+N,aACrB,IAAI+L,EAAY9Z,KAAKgQ,cAAc+J,MAAMxY,IAAIvB,KAAKgQ,cAAcgK,MAAQha,KAAKgQ,cAAc3H,GAE3FrI,KAAK8P,iBAAiBmK,UAAUja,KAAKgQ,cAAc3H,GAG/CrI,KAAKgQ,cAAc5H,GAAK6I,EAAM/O,EAAQ,GAAsD,IAAjD4X,EAAUI,SAASla,KAAKgQ,cAAc5H,EAAI,IACvF0R,EAAUK,qBAAqBna,KAAKgQ,cAAc5H,EAAI,EAAG,EAAG,EAAGyR,EAAQO,GAAIP,EAAQQ,GAAIR,EAAQzB,UAGjG,IAAK,IAAIkC,EAAMpY,EAAOoY,EAAMrJ,IAAOqJ,EAAK,CAUtC,GATA3J,EAAO3J,EAAKsT,GAIZjB,EAAUrZ,KAAKgN,gBAAgBuN,QAAQ5J,GAKnCA,EAAO,KAAO2I,EAAS,CACzB,MAAMkB,EAAKlB,EAAQX,OAAOC,aAAajI,IACnC6J,IACF7J,EAAO6J,EAAGzB,WAAW,G,CAezB,GAXIQ,GACFvZ,KAAK8O,YAAYlN,MAAK,IAAA6Y,qBAAoB9J,IAExC3Q,KAAKmY,qBACPnY,KAAKyF,gBAAgBiV,cAAc1a,KAAKmY,oBAAqBnY,KAAKgQ,cAAcgK,MAAQha,KAAKgQ,cAAc3H,GAOxGgR,IAAWrZ,KAAKgQ,cAAc5H,EAAnC,CAeA,GAAIpI,KAAKgQ,cAAc5H,EAAIiR,EAAU,GAAK7R,EAGxC,GAAIgS,EAAgB,CAElB,KAAOxZ,KAAKgQ,cAAc5H,EAAIZ,GAC5BsS,EAAUK,qBAAqBna,KAAKgQ,cAAc5H,IAAK,EAAG,EAAGyR,EAAQO,GAAIP,EAAQQ,GAAIR,EAAQzB,UAE/FpY,KAAKgQ,cAAc5H,EAAI,EACvBpI,KAAKgQ,cAAc3H,IACfrI,KAAKgQ,cAAc3H,IAAMrI,KAAKgQ,cAAclJ,aAAe,GAC7D9G,KAAKgQ,cAAc3H,IACnBrI,KAAKsE,eAAeoE,OAAO1I,KAAK2a,kBAAkB,KAE9C3a,KAAKgQ,cAAc3H,GAAKrI,KAAKsE,eAAemD,OAC9CzH,KAAKgQ,cAAc3H,EAAIrI,KAAKsE,eAAemD,KAAO,GAIpDzH,KAAKgQ,cAAc+J,MAAMxY,IAAIvB,KAAKgQ,cAAcgK,MAAQha,KAAKgQ,cAAc3H,GAAIO,WAAY,GAG7FkR,EAAY9Z,KAAKgQ,cAAc+J,MAAMxY,IAAIvB,KAAKgQ,cAAcgK,MAAQha,KAAKgQ,cAAc3H,E,MAGvF,GADArI,KAAKgQ,cAAc5H,EAAIZ,EAAO,EACd,IAAZ6R,EAGF,SAuBN,GAjBIM,IAEFG,EAAUc,YAAY5a,KAAKgQ,cAAc5H,EAAGiR,EAASrZ,KAAKgQ,cAAc6K,YAAYhB,GAAUA,GAIzD,IAAjCC,EAAUI,SAAS1S,EAAO,IAC5BsS,EAAUK,qBAAqB3S,EAAO,EAAG,EAAAsT,eAAgB,EAAAC,gBAAiBlB,EAAQO,GAAIP,EAAQQ,GAAIR,EAAQzB,WAK9G0B,EAAUK,qBAAqBna,KAAKgQ,cAAc5H,IAAKuI,EAAM0I,EAASQ,EAAQO,GAAIP,EAAQQ,GAAIR,EAAQzB,UAKlGiB,EAAU,EACZ,OAASA,GAEPS,EAAUK,qBAAqBna,KAAKgQ,cAAc5H,IAAK,EAAG,EAAGyR,EAAQO,GAAIP,EAAQQ,GAAIR,EAAQzB,S,MApE1F0B,EAAUI,SAASla,KAAKgQ,cAAc5H,EAAI,GAM7C0R,EAAUkB,mBAAmBhb,KAAKgQ,cAAc5H,EAAI,EAAGuI,GAFvDmJ,EAAUkB,mBAAmBhb,KAAKgQ,cAAc5H,EAAI,EAAGuI,E,CAwEzDM,EAAM/O,EAAQ,IAChB4X,EAAUmB,SAASjb,KAAKgQ,cAAc5H,EAAI,EAAGpI,KAAKyN,WAChB,IAA9BzN,KAAKyN,UAAUyM,YAAoBla,KAAKyN,UAAUyN,UAAY,MAChElb,KAAKiN,QAAQkO,mBAAqB,EACzBnb,KAAKyN,UAAU2N,aACxBpb,KAAKiN,QAAQkO,mBAAqBnb,KAAKyN,UAAU4N,WAAWtC,WAAW,GAEvE/Y,KAAKiN,QAAQkO,mBAAqBnb,KAAKyN,UAAU6N,SAKjDtb,KAAKgQ,cAAc5H,EAAIZ,GAAQyJ,EAAM/O,EAAQ,GAAkD,IAA7C4X,EAAUI,SAASla,KAAKgQ,cAAc5H,KAAa0R,EAAUyB,WAAWvb,KAAKgQ,cAAc5H,IAC/I0R,EAAUK,qBAAqBna,KAAKgQ,cAAc5H,EAAG,EAAG,EAAGyR,EAAQO,GAAIP,EAAQQ,GAAIR,EAAQzB,UAG7FpY,KAAK8P,iBAAiBmK,UAAUja,KAAKgQ,cAAc3H,EACrD,CAKOmB,mBAAmBF,EAAyB1B,GACjD,MAAiB,MAAb0B,EAAGa,OAAkBb,EAAG2I,QAAW3I,EAAG8H,cASnCpR,KAAKiN,QAAQzD,mBAAmBF,EAAI1B,GAPlC5H,KAAKiN,QAAQzD,mBAAmBF,GAAI8G,IACpClF,EAAoBkF,EAAOA,OAAO,GAAIpQ,KAAK8M,gBAAgBlD,WAAWkK,gBAGpElM,EAASwI,IAItB,CAKO7G,mBAAmBD,EAAyB1B,GACjD,OAAO5H,KAAKiN,QAAQ1D,mBAAmBD,EAAI,IAAI,EAAA+N,WAAWzP,GAC5D,CAKOyB,mBAAmBC,EAAyB1B,GACjD,OAAO5H,KAAKiN,QAAQ5D,mBAAmBC,EAAI1B,EAC7C,CAKO6B,mBAAmBC,EAAe9B,GACvC,OAAO5H,KAAKiN,QAAQxD,mBAAmBC,EAAO,IAAI,EAAAkM,WAAWhO,GAC/D,CAUO2M,OAEL,OADAvU,KAAKkO,eAAetM,QACb,CACT,CAYO6S,WAmBL,OAlBAzU,KAAK8P,iBAAiBmK,UAAUja,KAAKgQ,cAAc3H,GAC/CrI,KAAK8M,gBAAgBlD,WAAW4R,aAClCxb,KAAKgQ,cAAc5H,EAAI,GAEzBpI,KAAKgQ,cAAc3H,IACfrI,KAAKgQ,cAAc3H,IAAMrI,KAAKgQ,cAAclJ,aAAe,GAC7D9G,KAAKgQ,cAAc3H,IACnBrI,KAAKsE,eAAeoE,OAAO1I,KAAK2a,mBACvB3a,KAAKgQ,cAAc3H,GAAKrI,KAAKsE,eAAemD,OACrDzH,KAAKgQ,cAAc3H,EAAIrI,KAAKsE,eAAemD,KAAO,GAGhDzH,KAAKgQ,cAAc5H,GAAKpI,KAAKsE,eAAekD,MAC9CxH,KAAKgQ,cAAc5H,IAErBpI,KAAK8P,iBAAiBmK,UAAUja,KAAKgQ,cAAc3H,GAEnDrI,KAAKyD,YAAY7B,QACV,CACT,CAQOiT,iBAEL,OADA7U,KAAKgQ,cAAc5H,EAAI,GAChB,CACT,CAaO2M,Y,MAEL,IAAK/U,KAAK6M,aAAa4M,gBAAgBgC,kBAKrC,OAJAzb,KAAK0b,kBACD1b,KAAKgQ,cAAc5H,EAAI,GACzBpI,KAAKgQ,cAAc5H,KAEd,EAQT,GAFApI,KAAK0b,gBAAgB1b,KAAKsE,eAAekD,MAErCxH,KAAKgQ,cAAc5H,EAAI,EACzBpI,KAAKgQ,cAAc5H,SAUnB,GAA6B,IAAzBpI,KAAKgQ,cAAc5H,GAClBpI,KAAKgQ,cAAc3H,EAAIrI,KAAKgQ,cAAcnJ,WAC1C7G,KAAKgQ,cAAc3H,GAAKrI,KAAKgQ,cAAclJ,eACkC,QAA7E,EAAA9G,KAAKgQ,cAAc+J,MAAMxY,IAAIvB,KAAKgQ,cAAcgK,MAAQha,KAAKgQ,cAAc3H,UAAE,eAAEO,WAAW,CAC7F5I,KAAKgQ,cAAc+J,MAAMxY,IAAIvB,KAAKgQ,cAAcgK,MAAQha,KAAKgQ,cAAc3H,GAAIO,WAAY,EAC3F5I,KAAKgQ,cAAc3H,IACnBrI,KAAKgQ,cAAc5H,EAAIpI,KAAKsE,eAAekD,KAAO,EAKlD,MAAM4B,EAAOpJ,KAAKgQ,cAAc+J,MAAMxY,IAAIvB,KAAKgQ,cAAcgK,MAAQha,KAAKgQ,cAAc3H,GACpFe,EAAKuS,SAAS3b,KAAKgQ,cAAc5H,KAAOgB,EAAKmS,WAAWvb,KAAKgQ,cAAc5H,IAC7EpI,KAAKgQ,cAAc5H,G,CAQzB,OADApI,KAAK0b,mBACE,CACT,CAQOzG,MACL,GAAIjV,KAAKgQ,cAAc5H,GAAKpI,KAAKsE,eAAekD,KAC9C,OAAO,EAET,MAAMoU,EAAY5b,KAAKgQ,cAAc5H,EAKrC,OAJApI,KAAKgQ,cAAc5H,EAAIpI,KAAKgQ,cAAc6L,WACtC7b,KAAK8M,gBAAgBlD,WAAW2P,kBAClCvZ,KAAKgP,WAAWpN,KAAK5B,KAAKgQ,cAAc5H,EAAIwT,IAEvC,CACT,CASOzG,WAEL,OADAnV,KAAKsF,gBAAgBsR,UAAU,IACxB,CACT,CASOvB,UAEL,OADArV,KAAKsF,gBAAgBsR,UAAU,IACxB,CACT,CAKQ8E,gBAAgBI,EAAiB9b,KAAKsE,eAAekD,KAAO,GAClExH,KAAKgQ,cAAc5H,EAAInH,KAAKC,IAAI4a,EAAQ7a,KAAKsH,IAAI,EAAGvI,KAAKgQ,cAAc5H,IACvEpI,KAAKgQ,cAAc3H,EAAIrI,KAAK6M,aAAa4M,gBAAgBsC,OACrD9a,KAAKC,IAAIlB,KAAKgQ,cAAclJ,aAAc7F,KAAKsH,IAAIvI,KAAKgQ,cAAcnJ,UAAW7G,KAAKgQ,cAAc3H,IACpGpH,KAAKC,IAAIlB,KAAKsE,eAAemD,KAAO,EAAGxG,KAAKsH,IAAI,EAAGvI,KAAKgQ,cAAc3H,IAC1ErI,KAAK8P,iBAAiBmK,UAAUja,KAAKgQ,cAAc3H,EACrD,CAKQ2T,WAAW5T,EAAWC,GAC5BrI,KAAK8P,iBAAiBmK,UAAUja,KAAKgQ,cAAc3H,GAC/CrI,KAAK6M,aAAa4M,gBAAgBsC,QACpC/b,KAAKgQ,cAAc5H,EAAIA,EACvBpI,KAAKgQ,cAAc3H,EAAIrI,KAAKgQ,cAAcnJ,UAAYwB,IAEtDrI,KAAKgQ,cAAc5H,EAAIA,EACvBpI,KAAKgQ,cAAc3H,EAAIA,GAEzBrI,KAAK0b,kBACL1b,KAAK8P,iBAAiBmK,UAAUja,KAAKgQ,cAAc3H,EACrD,CAKQ4T,YAAY7T,EAAWC,GAG7BrI,KAAK0b,kBACL1b,KAAKgc,WAAWhc,KAAKgQ,cAAc5H,EAAIA,EAAGpI,KAAKgQ,cAAc3H,EAAIA,EACnE,CASOiJ,SAASlB,GAEd,MAAM8L,EAAYlc,KAAKgQ,cAAc3H,EAAIrI,KAAKgQ,cAAcnJ,UAM5D,OALIqV,GAAa,EACflc,KAAKic,YAAY,GAAIhb,KAAKC,IAAIgb,EAAW9L,EAAOA,OAAO,IAAM,IAE7DpQ,KAAKic,YAAY,IAAK7L,EAAOA,OAAO,IAAM,KAErC,CACT,CASOoB,WAAWpB,GAEhB,MAAM+L,EAAenc,KAAKgQ,cAAclJ,aAAe9G,KAAKgQ,cAAc3H,EAM1E,OALI8T,GAAgB,EAClBnc,KAAKic,YAAY,EAAGhb,KAAKC,IAAIib,EAAc/L,EAAOA,OAAO,IAAM,IAE/DpQ,KAAKic,YAAY,EAAG7L,EAAOA,OAAO,IAAM,IAEnC,CACT,CAQOqB,cAAcrB,GAEnB,OADApQ,KAAKic,YAAY7L,EAAOA,OAAO,IAAM,EAAG,IACjC,CACT,CAQOsB,eAAetB,GAEpB,OADApQ,KAAKic,cAAc7L,EAAOA,OAAO,IAAM,GAAI,IACpC,CACT,CAUOuB,eAAevB,GAGpB,OAFApQ,KAAKwR,WAAWpB,GAChBpQ,KAAKgQ,cAAc5H,EAAI,GAChB,CACT,CAUOwJ,oBAAoBxB,GAGzB,OAFApQ,KAAKsR,SAASlB,GACdpQ,KAAKgQ,cAAc5H,EAAI,GAChB,CACT,CAQOyJ,mBAAmBzB,GAExB,OADApQ,KAAKgc,YAAY5L,EAAOA,OAAO,IAAM,GAAK,EAAGpQ,KAAKgQ,cAAc3H,IACzD,CACT,CAWOyJ,eAAe1B,GAOpB,OANApQ,KAAKgc,WAEF5L,EAAOjP,QAAU,GAAMiP,EAAOA,OAAO,IAAM,GAAK,EAAI,GAEpDA,EAAOA,OAAO,IAAM,GAAK,IAErB,CACT,CASOsC,gBAAgBtC,GAErB,OADApQ,KAAKgc,YAAY5L,EAAOA,OAAO,IAAM,GAAK,EAAGpQ,KAAKgQ,cAAc3H,IACzD,CACT,CAQOsK,kBAAkBvC,GAEvB,OADApQ,KAAKic,YAAY7L,EAAOA,OAAO,IAAM,EAAG,IACjC,CACT,CAQO2C,gBAAgB3C,GAErB,OADApQ,KAAKgc,WAAWhc,KAAKgQ,cAAc5H,GAAIgI,EAAOA,OAAO,IAAM,GAAK,IACzD,CACT,CASO4C,kBAAkB5C,GAEvB,OADApQ,KAAKic,YAAY,EAAG7L,EAAOA,OAAO,IAAM,IACjC,CACT,CAUO6C,WAAW7C,GAEhB,OADApQ,KAAK8R,eAAe1B,IACb,CACT,CAaO8C,SAAS9C,GACd,MAAMgM,EAAQhM,EAAOA,OAAO,GAM5B,OALc,IAAVgM,SACKpc,KAAKgQ,cAAcqM,KAAKrc,KAAKgQ,cAAc5H,GAC/B,IAAVgU,IACTpc,KAAKgQ,cAAcqM,KAAO,CAAC,IAEtB,CACT,CAQOtK,iBAAiB3B,GACtB,GAAIpQ,KAAKgQ,cAAc5H,GAAKpI,KAAKsE,eAAekD,KAC9C,OAAO,EAET,IAAI4U,EAAQhM,EAAOA,OAAO,IAAM,EAChC,KAAOgM,KACLpc,KAAKgQ,cAAc5H,EAAIpI,KAAKgQ,cAAc6L,WAE5C,OAAO,CACT,CAOOpJ,kBAAkBrC,GACvB,GAAIpQ,KAAKgQ,cAAc5H,GAAKpI,KAAKsE,eAAekD,KAC9C,OAAO,EAET,IAAI4U,EAAQhM,EAAOA,OAAO,IAAM,EAEhC,KAAOgM,KACLpc,KAAKgQ,cAAc5H,EAAIpI,KAAKgQ,cAAcsM,WAE5C,OAAO,CACT,CAOOpI,gBAAgB9D,GACrB,MAAMsH,EAAItH,EAAOA,OAAO,GAGxB,OAFU,IAANsH,IAAS1X,KAAK+N,aAAasM,IAAM,WAC3B,IAAN3C,GAAiB,IAANA,IAAS1X,KAAK+N,aAAasM,KAAM,YACzC,CACT,CAYQkC,mBAAmBlU,EAAWnG,EAAe+O,EAAauL,GAAqB,EAAOC,GAA0B,GACtH,MAAMrT,EAAOpJ,KAAKgQ,cAAc+J,MAAMxY,IAAIvB,KAAKgQ,cAAcgK,MAAQ3R,GACrEe,EAAKsT,aACHxa,EACA+O,EACAjR,KAAKgQ,cAAc6K,YAAY7a,KAAK2a,kBACpC3a,KAAK2a,iBACL8B,GAEED,IACFpT,EAAKR,WAAY,EAErB,CAOQ+T,iBAAiBtU,EAAWoU,GAA0B,GAC5D,MAAMrT,EAAOpJ,KAAKgQ,cAAc+J,MAAMxY,IAAIvB,KAAKgQ,cAAcgK,MAAQ3R,GACrEe,EAAKwT,KAAK5c,KAAKgQ,cAAc6K,YAAY7a,KAAK2a,kBAAmB8B,GACjEzc,KAAKsE,eAAemC,OAAOoW,aAAa7c,KAAKgQ,cAAcgK,MAAQ3R,GACnEe,EAAKR,WAAY,CACnB,CA0BOoJ,eAAe5B,EAAiBqM,GAA0B,GAE/D,IAAIK,EACJ,OAFA9c,KAAK0b,gBAAgB1b,KAAKsE,eAAekD,MAEjC4I,EAAOA,OAAO,IACpB,KAAK,EAIH,IAHA0M,EAAI9c,KAAKgQ,cAAc3H,EACvBrI,KAAK8P,iBAAiBmK,UAAU6C,GAChC9c,KAAKuc,mBAAmBO,IAAK9c,KAAKgQ,cAAc5H,EAAGpI,KAAKsE,eAAekD,KAA+B,IAAzBxH,KAAKgQ,cAAc5H,EAASqU,GAClGK,EAAI9c,KAAKsE,eAAemD,KAAMqV,IACnC9c,KAAK2c,iBAAiBG,EAAGL,GAE3Bzc,KAAK8P,iBAAiBmK,UAAU6C,GAChC,MACF,KAAK,EASH,IARAA,EAAI9c,KAAKgQ,cAAc3H,EACvBrI,KAAK8P,iBAAiBmK,UAAU6C,GAEhC9c,KAAKuc,mBAAmBO,EAAG,EAAG9c,KAAKgQ,cAAc5H,EAAI,GAAG,EAAMqU,GAC1Dzc,KAAKgQ,cAAc5H,EAAI,GAAKpI,KAAKsE,eAAekD,OAElDxH,KAAKgQ,cAAc+J,MAAMxY,IAAIub,EAAI,GAAIlU,WAAY,GAE5CkU,KACL9c,KAAK2c,iBAAiBG,EAAGL,GAE3Bzc,KAAK8P,iBAAiBmK,UAAU,GAChC,MACF,KAAK,EAGH,IAFA6C,EAAI9c,KAAKsE,eAAemD,KACxBzH,KAAK8P,iBAAiBmK,UAAU6C,EAAI,GAC7BA,KACL9c,KAAK2c,iBAAiBG,EAAGL,GAE3Bzc,KAAK8P,iBAAiBmK,UAAU,GAChC,MACF,KAAK,EAEH,MAAM8C,EAAiB/c,KAAKgQ,cAAc+J,MAAM5Y,OAASnB,KAAKsE,eAAemD,KACzEsV,EAAiB,IACnB/c,KAAKgQ,cAAc+J,MAAMxX,UAAUwa,GACnC/c,KAAKgQ,cAAcgK,MAAQ/Y,KAAKsH,IAAIvI,KAAKgQ,cAAcgK,MAAQ+C,EAAgB,GAC/E/c,KAAKgQ,cAActJ,MAAQzF,KAAKsH,IAAIvI,KAAKgQ,cAActJ,MAAQqW,EAAgB,GAE/E/c,KAAK+D,UAAUnC,KAAK,IAI1B,OAAO,CACT,CAwBOsQ,YAAY9B,EAAiBqM,GAA0B,GAE5D,OADAzc,KAAK0b,gBAAgB1b,KAAKsE,eAAekD,MACjC4I,EAAOA,OAAO,IACpB,KAAK,EACHpQ,KAAKuc,mBAAmBvc,KAAKgQ,cAAc3H,EAAGrI,KAAKgQ,cAAc5H,EAAGpI,KAAKsE,eAAekD,KAA+B,IAAzBxH,KAAKgQ,cAAc5H,EAASqU,GAC1H,MACF,KAAK,EACHzc,KAAKuc,mBAAmBvc,KAAKgQ,cAAc3H,EAAG,EAAGrI,KAAKgQ,cAAc5H,EAAI,GAAG,EAAOqU,GAClF,MACF,KAAK,EACHzc,KAAKuc,mBAAmBvc,KAAKgQ,cAAc3H,EAAG,EAAGrI,KAAKsE,eAAekD,MAAM,EAAMiV,GAIrF,OADAzc,KAAK8P,iBAAiBmK,UAAUja,KAAKgQ,cAAc3H,IAC5C,CACT,CAWO8J,YAAY/B,GACjBpQ,KAAK0b,kBACL,IAAIU,EAAQhM,EAAOA,OAAO,IAAM,EAEhC,GAAIpQ,KAAKgQ,cAAc3H,EAAIrI,KAAKgQ,cAAclJ,cAAgB9G,KAAKgQ,cAAc3H,EAAIrI,KAAKgQ,cAAcnJ,UACtG,OAAO,EAGT,MAAMmW,EAAchd,KAAKgQ,cAAcgK,MAAQha,KAAKgQ,cAAc3H,EAE5D4U,EAAyBjd,KAAKsE,eAAemD,KAAO,EAAIzH,KAAKgQ,cAAclJ,aAC3EoW,EAAuBld,KAAKsE,eAAemD,KAAO,EAAIzH,KAAKgQ,cAAcgK,MAAQiD,EAAyB,EAChH,KAAOb,KAGLpc,KAAKgQ,cAAc+J,MAAM9X,OAAOib,EAAuB,EAAG,GAC1Dld,KAAKgQ,cAAc+J,MAAM9X,OAAO+a,EAAK,EAAGhd,KAAKgQ,cAAcmN,aAAand,KAAK2a,mBAK/E,OAFA3a,KAAK8P,iBAAiBlJ,eAAe5G,KAAKgQ,cAAc3H,EAAGrI,KAAKgQ,cAAclJ,cAC9E9G,KAAKgQ,cAAc5H,EAAI,GAChB,CACT,CAWOgK,YAAYhC,GACjBpQ,KAAK0b,kBACL,IAAIU,EAAQhM,EAAOA,OAAO,IAAM,EAEhC,GAAIpQ,KAAKgQ,cAAc3H,EAAIrI,KAAKgQ,cAAclJ,cAAgB9G,KAAKgQ,cAAc3H,EAAIrI,KAAKgQ,cAAcnJ,UACtG,OAAO,EAGT,MAAMmW,EAAchd,KAAKgQ,cAAcgK,MAAQha,KAAKgQ,cAAc3H,EAElE,IAAIyU,EAGJ,IAFAA,EAAI9c,KAAKsE,eAAemD,KAAO,EAAIzH,KAAKgQ,cAAclJ,aACtDgW,EAAI9c,KAAKsE,eAAemD,KAAO,EAAIzH,KAAKgQ,cAAcgK,MAAQ8C,EACvDV,KAGLpc,KAAKgQ,cAAc+J,MAAM9X,OAAO+a,EAAK,GACrChd,KAAKgQ,cAAc+J,MAAM9X,OAAO6a,EAAG,EAAG9c,KAAKgQ,cAAcmN,aAAand,KAAK2a,mBAK7E,OAFA3a,KAAK8P,iBAAiBlJ,eAAe5G,KAAKgQ,cAAc3H,EAAGrI,KAAKgQ,cAAclJ,cAC9E9G,KAAKgQ,cAAc5H,EAAI,GAChB,CACT,CAaO+I,YAAYf,GACjBpQ,KAAK0b,kBACL,MAAMtS,EAAOpJ,KAAKgQ,cAAc+J,MAAMxY,IAAIvB,KAAKgQ,cAAcgK,MAAQha,KAAKgQ,cAAc3H,GAUxF,OATIe,IACFA,EAAKwR,YACH5a,KAAKgQ,cAAc5H,EACnBgI,EAAOA,OAAO,IAAM,EACpBpQ,KAAKgQ,cAAc6K,YAAY7a,KAAK2a,kBACpC3a,KAAK2a,kBAEP3a,KAAK8P,iBAAiBmK,UAAUja,KAAKgQ,cAAc3H,KAE9C,CACT,CAaOgK,YAAYjC,GACjBpQ,KAAK0b,kBACL,MAAMtS,EAAOpJ,KAAKgQ,cAAc+J,MAAMxY,IAAIvB,KAAKgQ,cAAcgK,MAAQha,KAAKgQ,cAAc3H,GAUxF,OATIe,IACFA,EAAKgU,YACHpd,KAAKgQ,cAAc5H,EACnBgI,EAAOA,OAAO,IAAM,EACpBpQ,KAAKgQ,cAAc6K,YAAY7a,KAAK2a,kBACpC3a,KAAK2a,kBAEP3a,KAAK8P,iBAAiBmK,UAAUja,KAAKgQ,cAAc3H,KAE9C,CACT,CAUOiK,SAASlC,GACd,IAAIgM,EAAQhM,EAAOA,OAAO,IAAM,EAEhC,KAAOgM,KACLpc,KAAKgQ,cAAc+J,MAAM9X,OAAOjC,KAAKgQ,cAAcgK,MAAQha,KAAKgQ,cAAcnJ,UAAW,GACzF7G,KAAKgQ,cAAc+J,MAAM9X,OAAOjC,KAAKgQ,cAAcgK,MAAQha,KAAKgQ,cAAclJ,aAAc,EAAG9G,KAAKgQ,cAAcmN,aAAand,KAAK2a,mBAGtI,OADA3a,KAAK8P,iBAAiBlJ,eAAe5G,KAAKgQ,cAAcnJ,UAAW7G,KAAKgQ,cAAclJ,eAC/E,CACT,CAOOyL,WAAWnC,GAChB,IAAIgM,EAAQhM,EAAOA,OAAO,IAAM,EAEhC,KAAOgM,KACLpc,KAAKgQ,cAAc+J,MAAM9X,OAAOjC,KAAKgQ,cAAcgK,MAAQha,KAAKgQ,cAAclJ,aAAc,GAC5F9G,KAAKgQ,cAAc+J,MAAM9X,OAAOjC,KAAKgQ,cAAcgK,MAAQha,KAAKgQ,cAAcnJ,UAAW,EAAG7G,KAAKgQ,cAAcmN,aAAa,EAAAnP,oBAG9H,OADAhO,KAAK8P,iBAAiBlJ,eAAe5G,KAAKgQ,cAAcnJ,UAAW7G,KAAKgQ,cAAclJ,eAC/E,CACT,CAoBOuK,WAAWjB,GAChB,GAAIpQ,KAAKgQ,cAAc3H,EAAIrI,KAAKgQ,cAAclJ,cAAgB9G,KAAKgQ,cAAc3H,EAAIrI,KAAKgQ,cAAcnJ,UACtG,OAAO,EAET,MAAMuV,EAAQhM,EAAOA,OAAO,IAAM,EAClC,IAAK,IAAI/H,EAAIrI,KAAKgQ,cAAcnJ,UAAWwB,GAAKrI,KAAKgQ,cAAclJ,eAAgBuB,EAAG,CACpF,MAAMe,EAAOpJ,KAAKgQ,cAAc+J,MAAMxY,IAAIvB,KAAKgQ,cAAcgK,MAAQ3R,GACrEe,EAAKgU,YAAY,EAAGhB,EAAOpc,KAAKgQ,cAAc6K,YAAY7a,KAAK2a,kBAAmB3a,KAAK2a,kBACvFvR,EAAKR,WAAY,C,CAGnB,OADA5I,KAAK8P,iBAAiBlJ,eAAe5G,KAAKgQ,cAAcnJ,UAAW7G,KAAKgQ,cAAclJ,eAC/E,CACT,CAqBOyK,YAAYnB,GACjB,GAAIpQ,KAAKgQ,cAAc3H,EAAIrI,KAAKgQ,cAAclJ,cAAgB9G,KAAKgQ,cAAc3H,EAAIrI,KAAKgQ,cAAcnJ,UACtG,OAAO,EAET,MAAMuV,EAAQhM,EAAOA,OAAO,IAAM,EAClC,IAAK,IAAI/H,EAAIrI,KAAKgQ,cAAcnJ,UAAWwB,GAAKrI,KAAKgQ,cAAclJ,eAAgBuB,EAAG,CACpF,MAAMe,EAAOpJ,KAAKgQ,cAAc+J,MAAMxY,IAAIvB,KAAKgQ,cAAcgK,MAAQ3R,GACrEe,EAAKwR,YAAY,EAAGwB,EAAOpc,KAAKgQ,cAAc6K,YAAY7a,KAAK2a,kBAAmB3a,KAAK2a,kBACvFvR,EAAKR,WAAY,C,CAGnB,OADA5I,KAAK8P,iBAAiBlJ,eAAe5G,KAAKgQ,cAAcnJ,UAAW7G,KAAKgQ,cAAclJ,eAC/E,CACT,CAWOkN,cAAc5D,GACnB,GAAIpQ,KAAKgQ,cAAc3H,EAAIrI,KAAKgQ,cAAclJ,cAAgB9G,KAAKgQ,cAAc3H,EAAIrI,KAAKgQ,cAAcnJ,UACtG,OAAO,EAET,MAAMuV,EAAQhM,EAAOA,OAAO,IAAM,EAClC,IAAK,IAAI/H,EAAIrI,KAAKgQ,cAAcnJ,UAAWwB,GAAKrI,KAAKgQ,cAAclJ,eAAgBuB,EAAG,CACpF,MAAMe,EAAOpJ,KAAKgQ,cAAc+J,MAAMxY,IAAIvB,KAAKgQ,cAAcgK,MAAQ3R,GACrEe,EAAKwR,YAAY5a,KAAKgQ,cAAc5H,EAAGgU,EAAOpc,KAAKgQ,cAAc6K,YAAY7a,KAAK2a,kBAAmB3a,KAAK2a,kBAC1GvR,EAAKR,WAAY,C,CAGnB,OADA5I,KAAK8P,iBAAiBlJ,eAAe5G,KAAKgQ,cAAcnJ,UAAW7G,KAAKgQ,cAAclJ,eAC/E,CACT,CAWOmN,cAAc7D,GACnB,GAAIpQ,KAAKgQ,cAAc3H,EAAIrI,KAAKgQ,cAAclJ,cAAgB9G,KAAKgQ,cAAc3H,EAAIrI,KAAKgQ,cAAcnJ,UACtG,OAAO,EAET,MAAMuV,EAAQhM,EAAOA,OAAO,IAAM,EAClC,IAAK,IAAI/H,EAAIrI,KAAKgQ,cAAcnJ,UAAWwB,GAAKrI,KAAKgQ,cAAclJ,eAAgBuB,EAAG,CACpF,MAAMe,EAAOpJ,KAAKgQ,cAAc+J,MAAMxY,IAAIvB,KAAKgQ,cAAcgK,MAAQ3R,GACrEe,EAAKgU,YAAYpd,KAAKgQ,cAAc5H,EAAGgU,EAAOpc,KAAKgQ,cAAc6K,YAAY7a,KAAK2a,kBAAmB3a,KAAK2a,kBAC1GvR,EAAKR,WAAY,C,CAGnB,OADA5I,KAAK8P,iBAAiBlJ,eAAe5G,KAAKgQ,cAAcnJ,UAAW7G,KAAKgQ,cAAclJ,eAC/E,CACT,CAUO0L,WAAWpC,GAChBpQ,KAAK0b,kBACL,MAAMtS,EAAOpJ,KAAKgQ,cAAc+J,MAAMxY,IAAIvB,KAAKgQ,cAAcgK,MAAQha,KAAKgQ,cAAc3H,GAUxF,OATIe,IACFA,EAAKsT,aACH1c,KAAKgQ,cAAc5H,EACnBpI,KAAKgQ,cAAc5H,GAAKgI,EAAOA,OAAO,IAAM,GAC5CpQ,KAAKgQ,cAAc6K,YAAY7a,KAAK2a,kBACpC3a,KAAK2a,kBAEP3a,KAAK8P,iBAAiBmK,UAAUja,KAAKgQ,cAAc3H,KAE9C,CACT,CA6BOuK,yBAAyBxC,GAC9B,IAAKpQ,KAAKiN,QAAQkO,mBAChB,OAAO,EAGT,MAAMha,EAASiP,EAAOA,OAAO,IAAM,EAC7BpJ,EAAO,IAAIoG,YAAYjM,GAC7B,IAAK,IAAIH,EAAI,EAAGA,EAAIG,IAAUH,EAC5BgG,EAAKhG,GAAKhB,KAAKiN,QAAQkO,mBAGzB,OADAnb,KAAKkR,MAAMlK,EAAM,EAAGA,EAAK7F,SAClB,CACT,CA2BO0R,4BAA4BzC,GACjC,OAAIA,EAAOA,OAAO,GAAK,IAGnBpQ,KAAKqd,IAAI,UAAYrd,KAAKqd,IAAI,iBAAmBrd,KAAKqd,IAAI,UAC5Drd,KAAK6M,aAAayQ,iBAAiB,EAAAjJ,GAAGkJ,IAAM,UACnCvd,KAAKqd,IAAI,UAClBrd,KAAK6M,aAAayQ,iBAAiB,EAAAjJ,GAAGkJ,IAAM,UALrC,CAQX,CA0BOzK,8BAA8B1C,GACnC,OAAIA,EAAOA,OAAO,GAAK,IAMnBpQ,KAAKqd,IAAI,SACXrd,KAAK6M,aAAayQ,iBAAiB,EAAAjJ,GAAGkJ,IAAM,cACnCvd,KAAKqd,IAAI,gBAClBrd,KAAK6M,aAAayQ,iBAAiB,EAAAjJ,GAAGkJ,IAAM,cACnCvd,KAAKqd,IAAI,SAGlBrd,KAAK6M,aAAayQ,iBAAiBlN,EAAOA,OAAO,GAAK,KAC7CpQ,KAAKqd,IAAI,WAClBrd,KAAK6M,aAAayQ,iBAAiB,EAAAjJ,GAAGkJ,IAAM,mBAdrC,CAiBX,CAMQF,IAAIG,GACV,OAAyE,KAAjExd,KAAK8M,gBAAgBlD,WAAW6T,SAAW,IAAIC,QAAQF,EACjE,CAmBOrK,QAAQ/C,GACb,IAAK,IAAIpP,EAAI,EAAGA,EAAIoP,EAAOjP,OAAQH,IACjC,OAAQoP,EAAOA,OAAOpP,IACpB,KAAK,EACHhB,KAAK6M,aAAa+M,MAAMD,YAAa,EACrC,MACF,KAAK,GACH3Z,KAAK8M,gBAAgB1J,QAAQoY,YAAa,EAIhD,OAAO,CACT,CAoHOpI,eAAehD,GACpB,IAAK,IAAIpP,EAAI,EAAGA,EAAIoP,EAAOjP,OAAQH,IACjC,OAAQoP,EAAOA,OAAOpP,IACpB,KAAK,EACHhB,KAAK6M,aAAa4M,gBAAgBkE,uBAAwB,EAC1D,MACF,KAAK,EACH3d,KAAKsF,gBAAgBsY,YAAY,EAAG,EAAAC,iBACpC7d,KAAKsF,gBAAgBsY,YAAY,EAAG,EAAAC,iBACpC7d,KAAKsF,gBAAgBsY,YAAY,EAAG,EAAAC,iBACpC7d,KAAKsF,gBAAgBsY,YAAY,EAAG,EAAAC,iBAEpC,MACF,KAAK,EAMC7d,KAAK8M,gBAAgBlD,WAAWkK,cAAczI,cAChDrL,KAAKsE,eAAe6D,OAAO,IAAKnI,KAAKsE,eAAemD,MACpDzH,KAAKsO,gBAAgB1M,QAEvB,MACF,KAAK,EACH5B,KAAK6M,aAAa4M,gBAAgBsC,QAAS,EAC3C/b,KAAKgc,WAAW,EAAG,GACnB,MACF,KAAK,EACHhc,KAAK6M,aAAa4M,gBAAgBC,YAAa,EAC/C,MACF,KAAK,GACH1Z,KAAK8M,gBAAgB1J,QAAQ0a,aAAc,EAC3C,MACF,KAAK,GACH9d,KAAK6M,aAAa4M,gBAAgBgC,mBAAoB,EACtD,MACF,KAAK,GACHzb,KAAK0E,YAAY2L,MAAM,6CACvBrQ,KAAK6M,aAAa4M,gBAAgBsE,mBAAoB,EACtD/d,KAAK0O,wBAAwB9M,OAC7B,MACF,KAAK,EAEH5B,KAAK+M,kBAAkBiR,eAAiB,MACxC,MACF,KAAK,IAEHhe,KAAK+M,kBAAkBiR,eAAiB,QACxC,MACF,KAAK,KACHhe,KAAK+M,kBAAkBiR,eAAiB,OACxC,MACF,KAAK,KAGHhe,KAAK+M,kBAAkBiR,eAAiB,MACxC,MACF,KAAK,KAGHhe,KAAK6M,aAAa4M,gBAAgBwE,WAAY,EAC9Cje,KAAKwO,oBAAoB5M,OACzB,MACF,KAAK,KACH5B,KAAK0E,YAAY2L,MAAM,yCACvB,MACF,KAAK,KACHrQ,KAAK+M,kBAAkBmR,eAAiB,MACxC,MACF,KAAK,KACHle,KAAK0E,YAAY2L,MAAM,yCACvB,MACF,KAAK,KACHrQ,KAAK+M,kBAAkBmR,eAAiB,aACxC,MACF,KAAK,GACHle,KAAK6M,aAAasR,gBAAiB,EACnC,MACF,KAAK,KACHne,KAAK6T,aACL,MACF,KAAK,KACH7T,KAAK6T,aAEP,KAAK,GACL,KAAK,KACH7T,KAAKsE,eAAeoD,QAAQ0W,kBAAkBpe,KAAK2a,kBACnD3a,KAAK6M,aAAawR,qBAAsB,EACxCre,KAAKoO,sBAAsBxM,KAAK,EAAG5B,KAAKsE,eAAemD,KAAO,GAC9DzH,KAAK0O,wBAAwB9M,OAC7B,MACF,KAAK,KACH5B,KAAK6M,aAAa4M,gBAAgB6E,oBAAqB,EAI7D,OAAO,CACT,CAuBOjL,UAAUjD,GACf,IAAK,IAAIpP,EAAI,EAAGA,EAAIoP,EAAOjP,OAAQH,IACjC,OAAQoP,EAAOA,OAAOpP,IACpB,KAAK,EACHhB,KAAK6M,aAAa+M,MAAMD,YAAa,EACrC,MACF,KAAK,GACH3Z,KAAK8M,gBAAgB1J,QAAQoY,YAAa,EAIhD,OAAO,CACT,CAgHOlI,iBAAiBlD,GACtB,IAAK,IAAIpP,EAAI,EAAGA,EAAIoP,EAAOjP,OAAQH,IACjC,OAAQoP,EAAOA,OAAOpP,IACpB,KAAK,EACHhB,KAAK6M,aAAa4M,gBAAgBkE,uBAAwB,EAC1D,MACF,KAAK,EAMC3d,KAAK8M,gBAAgBlD,WAAWkK,cAAczI,cAChDrL,KAAKsE,eAAe6D,OAAO,GAAInI,KAAKsE,eAAemD,MACnDzH,KAAKsO,gBAAgB1M,QAEvB,MACF,KAAK,EACH5B,KAAK6M,aAAa4M,gBAAgBsC,QAAS,EAC3C/b,KAAKgc,WAAW,EAAG,GACnB,MACF,KAAK,EACHhc,KAAK6M,aAAa4M,gBAAgBC,YAAa,EAC/C,MACF,KAAK,GACH1Z,KAAK8M,gBAAgB1J,QAAQ0a,aAAc,EAC3C,MACF,KAAK,GACH9d,KAAK6M,aAAa4M,gBAAgBgC,mBAAoB,EACtD,MACF,KAAK,GACHzb,KAAK0E,YAAY2L,MAAM,oCACvBrQ,KAAK6M,aAAa4M,gBAAgBsE,mBAAoB,EACtD/d,KAAK0O,wBAAwB9M,OAC7B,MACF,KAAK,EACL,KAAK,IACL,KAAK,KACL,KAAK,KACH5B,KAAK+M,kBAAkBiR,eAAiB,OACxC,MACF,KAAK,KACHhe,KAAK6M,aAAa4M,gBAAgBwE,WAAY,EAC9C,MACF,KAAK,KACHje,KAAK0E,YAAY2L,MAAM,yCACvB,MACF,KAAK,KAML,KAAK,KACHrQ,KAAK+M,kBAAkBmR,eAAiB,UACxC,MALF,KAAK,KACHle,KAAK0E,YAAY2L,MAAM,yCACvB,MAIF,KAAK,GACHrQ,KAAK6M,aAAasR,gBAAiB,EACnC,MACF,KAAK,KACHne,KAAK+T,gBACL,MACF,KAAK,KAEL,KAAK,GACL,KAAK,KAEH/T,KAAKsE,eAAeoD,QAAQ6W,uBACH,OAArBnO,EAAOA,OAAOpP,IAChBhB,KAAK+T,gBAEP/T,KAAK6M,aAAawR,qBAAsB,EACxCre,KAAKoO,sBAAsBxM,KAAK,EAAG5B,KAAKsE,eAAemD,KAAO,GAC9DzH,KAAK0O,wBAAwB9M,OAC7B,MACF,KAAK,KACH5B,KAAK6M,aAAa4M,gBAAgB6E,oBAAqB,EAI7D,OAAO,CACT,CAmCOnK,YAAY/D,EAAiBoO,GAWlC,MAAMC,EAAKze,KAAK6M,aAAa4M,iBACrBuE,eAAgBU,EAAeR,eAAgBS,GAAkB3e,KAAK+M,kBACxE6R,EAAK5e,KAAK6M,cACV,QAAEnF,EAAO,KAAEF,GAASxH,KAAKsE,gBACzB,OAAEua,EAAM,IAAEC,GAAQpX,EAClB0D,EAAOpL,KAAK8M,gBAAgBlD,WAM5BmV,EAAOrd,GAAsBA,EAAQ,EAAQ,EAE7CgW,EAAItH,EAAOA,OAAO,GAExB,OARW4O,EASatH,EATFuH,EAQlBT,EACQ,IAAN9G,EAAqB,EACf,IAANA,EAAqBqH,EAAIH,EAAGhF,MAAMD,YAC5B,KAANjC,EAAsB,EAChB,KAANA,EAAsBqH,EAAI3T,EAAKoQ,YACvB,EAGJ,IAAN9D,EAAqBqH,EAAIN,EAAGd,uBACtB,IAANjG,EAAqBtM,EAAK0I,cAAczI,YAAwB,KAAT7D,EAAc,EAAmB,MAATA,EAAe,EAAQ,EAAoB,EACpH,IAANkQ,EAAqBqH,EAAIN,EAAG1C,QACtB,IAANrE,EAAqBqH,EAAIN,EAAG/E,YACtB,IAANhC,EAAqB,EACf,IAANA,EAAqBqH,EAAsB,QAAlBL,GACnB,KAANhH,EAAsBqH,EAAI3T,EAAK0S,aACzB,KAANpG,EAAsBqH,GAAKH,EAAGT,gBACxB,KAANzG,EAAsBqH,EAAIN,EAAGhD,mBACvB,KAAN/D,EAAsBqH,EAAIN,EAAGV,mBACvB,MAANrG,EAAwBqH,EAAsB,UAAlBL,GACtB,OAANhH,EAAwBqH,EAAsB,SAAlBL,GACtB,OAANhH,EAAwBqH,EAAsB,QAAlBL,GACtB,OAANhH,EAAwBqH,EAAIN,EAAGR,WACzB,OAANvG,EAAwB,EAClB,OAANA,EAAwBqH,EAAsB,QAAlBJ,GACtB,OAANjH,EAAwB,EAClB,OAANA,EAAwBqH,EAAsB,eAAlBJ,GACtB,OAANjH,EAAwB,EAClB,KAANA,GAAkB,OAANA,GAAoB,OAANA,EAAwBqH,EAAIF,IAAWC,GAC3D,OAANpH,EAAwBqH,EAAIN,EAAGH,oBACvB,EApCVM,EAAGtB,iBAAiB,GAAG,EAAAjJ,GAAGkJ,OAAOiB,EAAO,GAAK,MAAMQ,KAAKC,QACjD,EAFC,IAACD,EAAWC,CAsCxB,CAKQC,iBAAiBC,EAAeC,EAAcC,EAAYC,EAAYC,GAS5E,OARa,IAATH,GACFD,GAAS,SACTA,IAAS,SACTA,GAAS,EAAAK,cAAcC,aAAa,CAACJ,EAAIC,EAAIC,KAC3B,IAATH,IACTD,IAAS,SACTA,GAAS,SAA2B,IAALE,GAE1BF,CACT,CAMQO,cAActP,EAAiBkK,EAAaqF,GAKlD,MAAMC,EAAO,CAAC,EAAG,GAAI,EAAG,EAAG,EAAG,GAG9B,IAAIC,EAAS,EAGTC,EAAU,EAEd,EAAG,CAED,GADAF,EAAKE,EAAUD,GAAUzP,EAAOA,OAAOkK,EAAMwF,GACzC1P,EAAO2P,aAAazF,EAAMwF,GAAU,CACtC,MAAME,EAAY5P,EAAO6P,aAAa3F,EAAMwF,GAC5C,IAAI9e,EAAI,EACR,GACkB,IAAZ4e,EAAK,KACPC,EAAS,GAEXD,EAAKE,EAAU9e,EAAI,EAAI6e,GAAUG,EAAUhf,WAClCA,EAAIgf,EAAU7e,QAAUH,EAAI8e,EAAU,EAAID,EAASD,EAAKze,QACnE,K,CAGF,GAAiB,IAAZye,EAAK,IAAYE,EAAUD,GAAU,GACxB,IAAZD,EAAK,IAAYE,EAAUD,GAAU,EACzC,MAGED,EAAK,KACPC,EAAS,E,SAEFC,EAAUxF,EAAMlK,EAAOjP,QAAU2e,EAAUD,EAASD,EAAKze,QAGpE,IAAK,IAAIH,EAAI,EAAGA,EAAI4e,EAAKze,SAAUH,GAChB,IAAb4e,EAAK5e,KACP4e,EAAK5e,GAAK,GAKd,OAAQ4e,EAAK,IACX,KAAK,GACHD,EAAKvF,GAAKpa,KAAKkf,iBAAiBS,EAAKvF,GAAIwF,EAAK,GAAIA,EAAK,GAAIA,EAAK,GAAIA,EAAK,IACzE,MACF,KAAK,GACHD,EAAKtF,GAAKra,KAAKkf,iBAAiBS,EAAKtF,GAAIuF,EAAK,GAAIA,EAAK,GAAIA,EAAK,GAAIA,EAAK,IACzE,MACF,KAAK,GACHD,EAAKvH,SAAWuH,EAAKvH,SAASxV,QAC9B+c,EAAKvH,SAAS8H,eAAiBlgB,KAAKkf,iBAAiBS,EAAKvH,SAAS8H,eAAgBN,EAAK,GAAIA,EAAK,GAAIA,EAAK,GAAIA,EAAK,IAGvH,OAAOE,CACT,CAWQK,kBAAkBC,EAAeT,GAGvCA,EAAKvH,SAAWuH,EAAKvH,SAASxV,WAGxBwd,GAASA,EAAQ,KACrBA,EAAQ,GAEVT,EAAKvH,SAASiI,eAAiBD,EAC/BT,EAAKvF,IAAM,UAGG,IAAVgG,IACFT,EAAKvF,KAAM,WAIbuF,EAAKW,gBACP,CAEQC,aAAaZ,GACnBA,EAAKvF,GAAK,EAAApM,kBAAkBoM,GAC5BuF,EAAKtF,GAAK,EAAArM,kBAAkBqM,GAC5BsF,EAAKvH,SAAWuH,EAAKvH,SAASxV,QAG9B+c,EAAKvH,SAASiI,eAAiB,EAC/BV,EAAKvH,SAAS8H,iBAAkB,SAChCP,EAAKW,gBACP,CAoFO/M,eAAenD,GAEpB,GAAsB,IAAlBA,EAAOjP,QAAqC,IAArBiP,EAAOA,OAAO,GAEvC,OADApQ,KAAKugB,aAAavgB,KAAK+N,eAChB,EAGT,MAAMyS,EAAIpQ,EAAOjP,OACjB,IAAIuW,EACJ,MAAMiI,EAAO3f,KAAK+N,aAElB,IAAK,IAAI/M,EAAI,EAAGA,EAAIwf,EAAGxf,IACrB0W,EAAItH,EAAOA,OAAOpP,GACd0W,GAAK,IAAMA,GAAK,IAElBiI,EAAKvF,KAAM,SACXuF,EAAKvF,IAAM,SAAqB1C,EAAI,IAC3BA,GAAK,IAAMA,GAAK,IAEzBiI,EAAKtF,KAAM,SACXsF,EAAKtF,IAAM,SAAqB3C,EAAI,IAC3BA,GAAK,IAAMA,GAAK,IAEzBiI,EAAKvF,KAAM,SACXuF,EAAKvF,IAAM,SAAqB1C,EAAI,IAC3BA,GAAK,KAAOA,GAAK,KAE1BiI,EAAKtF,KAAM,SACXsF,EAAKtF,IAAM,SAAqB3C,EAAI,KACrB,IAANA,EAET1X,KAAKugB,aAAaZ,GACH,IAANjI,EAETiI,EAAKvF,IAAM,UACI,IAAN1C,EAETiI,EAAKtF,IAAM,SACI,IAAN3C,GAETiI,EAAKvF,IAAM,UACXpa,KAAKmgB,kBAAkB/P,EAAO2P,aAAa/e,GAAKoP,EAAO6P,aAAajf,GAAI,GAAK,EAAuB2e,IACrF,IAANjI,EAETiI,EAAKvF,IAAM,UACI,IAAN1C,EAGTiI,EAAKvF,IAAM,SACI,IAAN1C,EAETiI,EAAKvF,IAAM,WACI,IAAN1C,EAETiI,EAAKvF,IAAM,WACI,IAAN1C,EAETiI,EAAKtF,IAAM,UACI,KAAN3C,EAET1X,KAAKmgB,kBAAkB,EAAuBR,GAC/B,KAANjI,GAETiI,EAAKvF,KAAM,UACXuF,EAAKtF,KAAM,WACI,KAAN3C,EAETiI,EAAKtF,KAAM,SACI,KAAN3C,GAETiI,EAAKvF,KAAM,UACXpa,KAAKmgB,kBAAkB,EAAqBR,IAC7B,KAANjI,EAETiI,EAAKvF,KAAM,UACI,KAAN1C,EAETiI,EAAKvF,KAAM,SACI,KAAN1C,EAETiI,EAAKvF,KAAM,WACI,KAAN1C,EAETiI,EAAKvF,IAAM,WACI,KAAN1C,GAETiI,EAAKvF,KAAM,SACXuF,EAAKvF,IAA6B,SAAvB,EAAApM,kBAAkBoM,IACd,KAAN1C,GAETiI,EAAKtF,KAAM,SACXsF,EAAKtF,IAA6B,SAAvB,EAAArM,kBAAkBqM,IACd,KAAN3C,GAAkB,KAANA,GAAkB,KAANA,EAEjC1W,GAAKhB,KAAK0f,cAActP,EAAQpP,EAAG2e,GACpB,KAANjI,GACTiI,EAAKvH,SAAWuH,EAAKvH,SAASxV,QAC9B+c,EAAKvH,SAAS8H,gBAAkB,EAChCP,EAAKW,kBACU,MAAN5I,GAETiI,EAAKvF,KAAM,SACXuF,EAAKvF,IAA6B,SAAvB,EAAApM,kBAAkBoM,GAC7BuF,EAAKtF,KAAM,SACXsF,EAAKtF,IAA6B,SAAvB,EAAArM,kBAAkBqM,IAE7Bra,KAAK0E,YAAY2L,MAAM,6BAA8BqH,GAGzD,OAAO,CACT,CA2BOlE,aAAapD,GAClB,OAAQA,EAAOA,OAAO,IACpB,KAAK,EAEHpQ,KAAK6M,aAAayQ,iBAAiB,GAAG,EAAAjJ,GAAGkJ,UACzC,MACF,KAAK,EAEH,MAAMlV,EAAIrI,KAAKgQ,cAAc3H,EAAI,EAC3BD,EAAIpI,KAAKgQ,cAAc5H,EAAI,EACjCpI,KAAK6M,aAAayQ,iBAAiB,GAAG,EAAAjJ,GAAGkJ,OAAOlV,KAAKD,MAGzD,OAAO,CACT,CAGOqL,oBAAoBrD,GAGzB,GACO,IADCA,EAAOA,OAAO,GACpB,CAEE,MAAM/H,EAAIrI,KAAKgQ,cAAc3H,EAAI,EAC3BD,EAAIpI,KAAKgQ,cAAc5H,EAAI,EACjCpI,KAAK6M,aAAayQ,iBAAiB,GAAG,EAAAjJ,GAAGkJ,QAAQlV,KAAKD,KACjD,CAkBT,OAAO,CACT,CAqBOsL,UAAUtD,GAkBf,OAjBApQ,KAAK6M,aAAasR,gBAAiB,EACnCne,KAAK0O,wBAAwB9M,OAC7B5B,KAAKgQ,cAAcnJ,UAAY,EAC/B7G,KAAKgQ,cAAclJ,aAAe9G,KAAKsE,eAAemD,KAAO,EAC7DzH,KAAK+N,aAAe,EAAAC,kBAAkBpL,QACtC5C,KAAK6M,aAAa9C,QAClB/J,KAAKsF,gBAAgByE,QAGrB/J,KAAKgQ,cAAcyQ,OAAS,EAC5BzgB,KAAKgQ,cAAc0Q,OAAS1gB,KAAKgQ,cAAcgK,MAC/Cha,KAAKgQ,cAAc2Q,iBAAiBvG,GAAKpa,KAAK+N,aAAaqM,GAC3Dpa,KAAKgQ,cAAc2Q,iBAAiBtG,GAAKra,KAAK+N,aAAasM,GAC3Dra,KAAKgQ,cAAc4Q,aAAe5gB,KAAKsF,gBAAgBgU,QAGvDtZ,KAAK6M,aAAa4M,gBAAgBsC,QAAS,GACpC,CACT,CAqBOpI,eAAevD,GACpB,MAAMgM,EAAQhM,EAAOA,OAAO,IAAM,EAClC,OAAQgM,GACN,KAAK,EACL,KAAK,EACHpc,KAAK8M,gBAAgB1J,QAAQyd,YAAc,QAC3C,MACF,KAAK,EACL,KAAK,EACH7gB,KAAK8M,gBAAgB1J,QAAQyd,YAAc,YAC3C,MACF,KAAK,EACL,KAAK,EACH7gB,KAAK8M,gBAAgB1J,QAAQyd,YAAc,MAG/C,MAAMC,EAAa1E,EAAQ,GAAM,EAEjC,OADApc,KAAK8M,gBAAgB1J,QAAQ0a,YAAcgD,GACpC,CACT,CASOlN,gBAAgBxD,GACrB,MAAM2Q,EAAM3Q,EAAOA,OAAO,IAAM,EAChC,IAAI4Q,EAWJ,OATI5Q,EAAOjP,OAAS,IAAM6f,EAAS5Q,EAAOA,OAAO,IAAMpQ,KAAKsE,eAAemD,MAAmB,IAAXuZ,KACjFA,EAAShhB,KAAKsE,eAAemD,MAG3BuZ,EAASD,IACX/gB,KAAKgQ,cAAcnJ,UAAYka,EAAM,EACrC/gB,KAAKgQ,cAAclJ,aAAeka,EAAS,EAC3ChhB,KAAKgc,WAAW,EAAG,KAEd,CACT,CAgCOlI,cAAc1D,GACnB,IAAKlF,EAAoBkF,EAAOA,OAAO,GAAIpQ,KAAK8M,gBAAgBlD,WAAWkK,eACzE,OAAO,EAET,MAAMmN,EAAU7Q,EAAOjP,OAAS,EAAKiP,EAAOA,OAAO,GAAK,EACxD,OAAQA,EAAOA,OAAO,IACpB,KAAK,GACY,IAAX6Q,GACFjhB,KAAK4O,+BAA+BhN,KAAK+K,EAAyBuU,qBAEpE,MACF,KAAK,GACHlhB,KAAK4O,+BAA+BhN,KAAK+K,EAAyBwU,sBAClE,MACF,KAAK,GACCnhB,KAAKsE,gBACPtE,KAAK6M,aAAayQ,iBAAiB,GAAG,EAAAjJ,GAAGkJ,SAASvd,KAAKsE,eAAemD,QAAQzH,KAAKsE,eAAekD,SAEpG,MACF,KAAK,GACY,IAAXyZ,GAA2B,IAAXA,IAClBjhB,KAAK6N,kBAAkBlM,KAAK3B,KAAK2N,cAC7B3N,KAAK6N,kBAAkB1M,OAtqFjB,IAuqFRnB,KAAK6N,kBAAkBuT,SAGZ,IAAXH,GAA2B,IAAXA,IAClBjhB,KAAK8N,eAAenM,KAAK3B,KAAK4N,WAC1B5N,KAAK8N,eAAe3M,OA5qFd,IA6qFRnB,KAAK8N,eAAesT,SAGxB,MACF,KAAK,GACY,IAAXH,GAA2B,IAAXA,GACdjhB,KAAK6N,kBAAkB1M,QACzBnB,KAAK6V,SAAS7V,KAAK6N,kBAAkB7L,OAG1B,IAAXif,GAA2B,IAAXA,GACdjhB,KAAK8N,eAAe3M,QACtBnB,KAAK8V,YAAY9V,KAAK8N,eAAe9L,OAK7C,OAAO,CACT,CAWO6R,WAAWzD,GAMhB,OALApQ,KAAKgQ,cAAcyQ,OAASzgB,KAAKgQ,cAAc5H,EAC/CpI,KAAKgQ,cAAc0Q,OAAS1gB,KAAKgQ,cAAcgK,MAAQha,KAAKgQ,cAAc3H,EAC1ErI,KAAKgQ,cAAc2Q,iBAAiBvG,GAAKpa,KAAK+N,aAAaqM,GAC3Dpa,KAAKgQ,cAAc2Q,iBAAiBtG,GAAKra,KAAK+N,aAAasM,GAC3Dra,KAAKgQ,cAAc4Q,aAAe5gB,KAAKsF,gBAAgBgU,SAChD,CACT,CAWOvF,cAAc3D,GAUnB,OATApQ,KAAKgQ,cAAc5H,EAAIpI,KAAKgQ,cAAcyQ,QAAU,EACpDzgB,KAAKgQ,cAAc3H,EAAIpH,KAAKsH,IAAIvI,KAAKgQ,cAAc0Q,OAAS1gB,KAAKgQ,cAAcgK,MAAO,GACtFha,KAAK+N,aAAaqM,GAAKpa,KAAKgQ,cAAc2Q,iBAAiBvG,GAC3Dpa,KAAK+N,aAAasM,GAAKra,KAAKgQ,cAAc2Q,iBAAiBtG,GAC3Dra,KAAKsF,gBAAgBgU,QAAWtZ,KAAaqhB,cACzCrhB,KAAKgQ,cAAc4Q,eACrB5gB,KAAKsF,gBAAgBgU,QAAUtZ,KAAKgQ,cAAc4Q,cAEpD5gB,KAAK0b,mBACE,CACT,CAaO7F,SAAS7O,GAGd,OAFAhH,KAAK2N,aAAe3G,EACpBhH,KAAKoP,eAAexN,KAAKoF,IAClB,CACT,CAMO8O,YAAY9O,GAEjB,OADAhH,KAAK4N,UAAY5G,GACV,CACT,CAUO+O,wBAAwB/O,GAC7B,MAAM5G,EAAqB,GACrBkhB,EAAQta,EAAK8R,MAAM,KACzB,KAAOwI,EAAMngB,OAAS,GAAG,CACvB,MAAMogB,EAAMD,EAAMF,QACZI,EAAOF,EAAMF,QACnB,GAAI,QAAQK,KAAKF,GAAM,CACrB,MAAM/f,EAAQkgB,SAASH,GACvB,GAAI,GAAK/f,GAASA,EAAQ,IACxB,GAAa,MAATggB,EACFphB,EAAMuB,KAAK,CAAEggB,KAAM,EAAyBngB,cACvC,CACL,MAAM2d,GAAQ,IAAAyC,YAAWJ,GACrBrC,GACF/e,EAAMuB,KAAK,CAAEggB,KAAM,EAAsBngB,QAAO2d,S,GAS1D,OAHI/e,EAAMe,QACRnB,KAAKsP,SAAS1N,KAAKxB,IAEd,CACT,CAkBO4V,aAAahP,GAClB,MAAM6a,EAAO7a,EAAK8R,MAAM,KACxB,QAAI+I,EAAK1gB,OAAS,KAGd0gB,EAAK,GACA7hB,KAAK8hB,iBAAiBD,EAAK,GAAIA,EAAK,KAEzCA,EAAK,IAGF7hB,KAAK+hB,mBACd,CAEQD,iBAAiB1R,EAAgB4R,GAEnChiB,KAAKmY,qBACPnY,KAAK+hB,mBAEP,MAAME,EAAe7R,EAAO0I,MAAM,KAClC,IAAIxP,EACJ,MAAM4Y,EAAeD,EAAaE,WAAU9b,GAAKA,EAAE+b,WAAW,SAO9D,OANsB,IAAlBF,IACF5Y,EAAK2Y,EAAaC,GAAcG,MAAM,SAAM/gB,GAE9CtB,KAAK+N,aAAaqK,SAAWpY,KAAK+N,aAAaqK,SAASxV,QACxD5C,KAAK+N,aAAaqK,SAASC,MAAQrY,KAAKyF,gBAAgB6c,aAAa,CAAEhZ,KAAI0Y,QAC3EhiB,KAAK+N,aAAauS,kBACX,CACT,CAEQyB,mBAIN,OAHA/hB,KAAK+N,aAAaqK,SAAWpY,KAAK+N,aAAaqK,SAASxV,QACxD5C,KAAK+N,aAAaqK,SAASC,MAAQ,EACnCrY,KAAK+N,aAAauS,kBACX,CACT,CAUQiC,yBAAyBvb,EAActE,GAC7C,MAAM4e,EAAQta,EAAK8R,MAAM,KACzB,IAAK,IAAI9X,EAAI,EAAGA,EAAIsgB,EAAMngB,UACpBuB,GAAU1C,KAAK6P,eAAe1O,UADAH,IAAK0B,EAEvC,GAAiB,MAAb4e,EAAMtgB,GACRhB,KAAKsP,SAAS1N,KAAK,CAAC,CAAE+f,KAAM,EAAyBngB,MAAOxB,KAAK6P,eAAenN,UAC3E,CACL,MAAMyc,GAAQ,IAAAyC,YAAWN,EAAMtgB,IAC3Bme,GACFnf,KAAKsP,SAAS1N,KAAK,CAAC,CAAE+f,KAAM,EAAsBngB,MAAOxB,KAAK6P,eAAenN,GAASyc,U,CAI5F,OAAO,CACT,CAwBOlJ,mBAAmBjP,GACxB,OAAOhH,KAAKuiB,yBAAyBvb,EAAM,EAC7C,CAOOkP,mBAAmBlP,GACxB,OAAOhH,KAAKuiB,yBAAyBvb,EAAM,EAC7C,CAOOmP,uBAAuBnP,GAC5B,OAAOhH,KAAKuiB,yBAAyBvb,EAAM,EAC7C,CAUOoP,oBAAoBpP,GACzB,IAAKA,EAEH,OADAhH,KAAKsP,SAAS1N,KAAK,CAAC,CAAE+f,KAAM,MACrB,EAET,MAAMvhB,EAAqB,GACrBkhB,EAAQta,EAAK8R,MAAM,KACzB,IAAK,IAAI9X,EAAI,EAAGA,EAAIsgB,EAAMngB,SAAUH,EAClC,GAAI,QAAQygB,KAAKH,EAAMtgB,IAAK,CAC1B,MAAMQ,EAAQkgB,SAASJ,EAAMtgB,IACzB,GAAKQ,GAASA,EAAQ,KACxBpB,EAAMuB,KAAK,CAAEggB,KAAM,EAA0BngB,S,CAOnD,OAHIpB,EAAMe,QACRnB,KAAKsP,SAAS1N,KAAKxB,IAEd,CACT,CAOOiW,eAAerP,GAEpB,OADAhH,KAAKsP,SAAS1N,KAAK,CAAC,CAAE+f,KAAM,EAA0BngB,MAAO,QACtD,CACT,CAOO8U,eAAetP,GAEpB,OADAhH,KAAKsP,SAAS1N,KAAK,CAAC,CAAE+f,KAAM,EAA0BngB,MAAO,QACtD,CACT,CAOO+U,mBAAmBvP,GAExB,OADAhH,KAAKsP,SAAS1N,KAAK,CAAC,CAAE+f,KAAM,EAA0BngB,MAAO,QACtD,CACT,CAWOiU,WAGL,OAFAzV,KAAKgQ,cAAc5H,EAAI,EACvBpI,KAAKwB,SACE,CACT,CAOOiV,wBAIL,OAHAzW,KAAK0E,YAAY2L,MAAM,6CACvBrQ,KAAK6M,aAAa4M,gBAAgBsE,mBAAoB,EACtD/d,KAAK0O,wBAAwB9M,QACtB,CACT,CAOO8U,oBAIL,OAHA1W,KAAK0E,YAAY2L,MAAM,oCACvBrQ,KAAK6M,aAAa4M,gBAAgBsE,mBAAoB,EACtD/d,KAAK0O,wBAAwB9M,QACtB,CACT,CAQOiV,uBAGL,OAFA7W,KAAKsF,gBAAgBsR,UAAU,GAC/B5W,KAAKsF,gBAAgBsY,YAAY,EAAG,EAAAC,kBAC7B,CACT,CAkBO7G,cAAcwL,GACnB,OAA8B,IAA1BA,EAAerhB,QACjBnB,KAAK6W,wBACE,IAEiB,MAAtB2L,EAAe,IAGnBxiB,KAAKsF,gBAAgBsY,YAAY5S,EAAOwX,EAAe,IAAK,EAAAzL,SAASyL,EAAe,KAAO,EAAA3E,kBAFlF,EAIX,CAWOrc,QAUL,OATAxB,KAAK0b,kBACL1b,KAAKgQ,cAAc3H,IACfrI,KAAKgQ,cAAc3H,IAAMrI,KAAKgQ,cAAclJ,aAAe,GAC7D9G,KAAKgQ,cAAc3H,IACnBrI,KAAKsE,eAAeoE,OAAO1I,KAAK2a,mBACvB3a,KAAKgQ,cAAc3H,GAAKrI,KAAKsE,eAAemD,OACrDzH,KAAKgQ,cAAc3H,EAAIrI,KAAKsE,eAAemD,KAAO,GAEpDzH,KAAK0b,mBACE,CACT,CAYO/F,SAEL,OADA3V,KAAKgQ,cAAcqM,KAAKrc,KAAKgQ,cAAc5H,IAAK,GACzC,CACT,CAWOoO,eAEL,GADAxW,KAAK0b,kBACD1b,KAAKgQ,cAAc3H,IAAMrI,KAAKgQ,cAAcnJ,UAAW,CAIzD,MAAM4b,EAAqBziB,KAAKgQ,cAAclJ,aAAe9G,KAAKgQ,cAAcnJ,UAChF7G,KAAKgQ,cAAc+J,MAAMtX,cAAczC,KAAKgQ,cAAcgK,MAAQha,KAAKgQ,cAAc3H,EAAGoa,EAAoB,GAC5GziB,KAAKgQ,cAAc+J,MAAMtY,IAAIzB,KAAKgQ,cAAcgK,MAAQha,KAAKgQ,cAAc3H,EAAGrI,KAAKgQ,cAAcmN,aAAand,KAAK2a,mBACnH3a,KAAK8P,iBAAiBlJ,eAAe5G,KAAKgQ,cAAcnJ,UAAW7G,KAAKgQ,cAAclJ,a,MAEtF9G,KAAKgQ,cAAc3H,IACnBrI,KAAK0b,kBAEP,OAAO,CACT,CAOO/E,YAGL,OAFA3W,KAAKiN,QAAQlD,QACb/J,KAAKsO,gBAAgB1M,QACd,CACT,CAEOmI,QACL/J,KAAK+N,aAAe,EAAAC,kBAAkBpL,QACtC5C,KAAKiO,uBAAyB,EAAAD,kBAAkBpL,OAClD,CAKQ+X,iBAGN,OAFA3a,KAAKiO,uBAAuBoM,KAAM,SAClCra,KAAKiO,uBAAuBoM,IAA6B,SAAvBra,KAAK+N,aAAasM,GAC7Cra,KAAKiO,sBACd,CAYO2I,UAAU8L,GAEf,OADA1iB,KAAKsF,gBAAgBsR,UAAU8L,IACxB,CACT,CAUOzL,yBAEL,MAAM0L,EAAO,IAAI,EAAAjV,SACjBiV,EAAKrH,QAAU,GAAK,GAAsB,IAAIvC,WAAW,GACzD4J,EAAKvI,GAAKpa,KAAK+N,aAAaqM,GAC5BuI,EAAKtI,GAAKra,KAAK+N,aAAasM,GAG5Bra,KAAKgc,WAAW,EAAG,GACnB,IAAK,IAAI4G,EAAU,EAAGA,EAAU5iB,KAAKsE,eAAemD,OAAQmb,EAAS,CACnE,MAAM5F,EAAMhd,KAAKgQ,cAAcgK,MAAQha,KAAKgQ,cAAc3H,EAAIua,EACxDxZ,EAAOpJ,KAAKgQ,cAAc+J,MAAMxY,IAAIyb,GACtC5T,IACFA,EAAKwT,KAAK+F,GACVvZ,EAAKR,WAAY,E,CAKrB,OAFA5I,KAAK8P,iBAAiB+S,eACtB7iB,KAAKgc,WAAW,EAAG,IACZ,CACT,CA6BO1E,oBAAoBtQ,EAAcoJ,GACvC,MAMM0S,EAAI9iB,KAAKsE,eAAemC,OACxB2E,EAAOpL,KAAK8M,gBAAgBlD,WAGlC,MAVU,CAACmZ,IACT/iB,KAAK6M,aAAayQ,iBAAiB,GAAG,EAAAjJ,GAAGkJ,MAAMwF,IAAI,EAAA1O,GAAGkJ,UAC/C,GAQiByF,CAAb,OAAThc,EAAwB,OAAOhH,KAAK+N,aAAakV,cAAgB,EAAI,MAC5D,OAATjc,EAAwB,aACf,MAATA,EAAuB,OAAO8b,EAAEjc,UAAY,KAAKic,EAAEhc,aAAe,KAEzD,MAATE,EAAuB,SACd,OAATA,EAAwB,OAPc,CAAE,MAAS,EAAG,UAAa,EAAG,IAAO,GAOrCoE,EAAKyV,cAAgBzV,EAAK0S,YAAc,EAAI,OAC7E,OACX,CAEOlX,eAAesc,EAAYC,GAChCnjB,KAAK8P,iBAAiBlJ,eAAesc,EAAIC,EAC3C,EA3qGF,iBAwrGA,IAAMpT,EAAN,MAIEnQ,YACmC0E,GAAA,KAAAA,eAAAA,EAEjCtE,KAAKgZ,YACP,CAEOA,aACLhZ,KAAKkC,MAAQlC,KAAKsE,eAAemC,OAAO4B,EACxCrI,KAAKiR,IAAMjR,KAAKsE,eAAemC,OAAO4B,CACxC,CAEO4R,UAAU5R,GACXA,EAAIrI,KAAKkC,MACXlC,KAAKkC,MAAQmG,EACJA,EAAIrI,KAAKiR,MAClBjR,KAAKiR,IAAM5I,EAEf,CAEOzB,eAAesc,EAAYC,GAC5BD,EAAKC,IACPvW,EAAQsW,EACRA,EAAKC,EACLA,EAAKvW,GAEHsW,EAAKljB,KAAKkC,QACZlC,KAAKkC,MAAQghB,GAEXC,EAAKnjB,KAAKiR,MACZjR,KAAKiR,IAAMkS,EAEf,CAEON,eACL7iB,KAAK4G,eAAe,EAAG5G,KAAKsE,eAAemD,KAAO,EACpD,GAvCIsI,EAAe,GAKhB,MAAAtL,iBALCsL,E,cC9uGN,SAAgBqT,EAAapZ,GAC3B,IAAK,MAAMI,KAAKJ,EACdI,EAAE/C,UAEJ2C,EAAY7I,OAAS,CACvB,C,+HAxDA,mBAIEvB,cAHU,KAAAyjB,aAA8B,GAC9B,KAAAC,aAAuB,CAGjC,CAKOjc,UACLrH,KAAKsjB,aAAc,EACnB,IAAK,MAAMlZ,KAAKpK,KAAKqjB,aACnBjZ,EAAE/C,UAEJrH,KAAKqjB,aAAaliB,OAAS,CAC7B,CAOOlB,SAAgCmK,GAErC,OADApK,KAAKqjB,aAAa1hB,KAAKyI,GAChBA,CACT,CAOOmZ,WAAkCnZ,GACvC,MAAM5I,EAAQxB,KAAKqjB,aAAa3F,QAAQtT,IACzB,IAAX5I,GACFxB,KAAKqjB,aAAaphB,OAAOT,EAAO,EAEpC,GAMF,wBAA6BwhB,GAC3B,MAAO,CAAE3b,QAAS2b,EACpB,EAKA,iBAUA,qCAA0CQ,GACxC,MAAO,CAAEnc,QAAS,IAAM+b,EAAaI,GACvC,C,uMC3Da,EAAAC,OAA+B,oBAAdC,UAC9B,MAAMC,EAAa,EAAM,OAAI,OAASD,UAAUC,UAC1CC,EAAY,EAAM,OAAI,OAASF,UAAUE,SAElC,EAAAC,UAAYF,EAAUG,SAAS,WAC/B,EAAAC,aAAeJ,EAAUG,SAAS,QAClC,EAAAE,SAAW,iCAAiCC,KAAKN,GAC9D,8BACE,IAAK,EAAAK,SACH,OAAO,EAET,MAAME,EAAeP,EAAUQ,MAAM,kBACrC,OAAqB,OAAjBD,GAAyBA,EAAa/iB,OAAS,EAC1C,EAEFugB,SAASwC,EAAa,GAC/B,EAKa,EAAAE,MAAQ,CAAC,YAAa,WAAY,SAAU,UAAUN,SAASF,GAC/D,EAAAS,OAAsB,SAAbT,EACT,EAAAU,SAAwB,WAAbV,EACX,EAAAW,UAAY,CAAC,UAAW,QAAS,QAAS,SAAST,SAASF,GAC5D,EAAAY,QAAUZ,EAASlG,QAAQ,UAAY,EAEvC,EAAA+G,WAAa,WAAWR,KAAKN,E,gICrC1C,eA2BA,MAAee,EAAf,cACU,KAAAC,OAAmC,GAEnC,KAAAC,GAAK,CAkEf,CA7DSC,QAAQC,GACb9kB,KAAK2kB,OAAOhjB,KAAKmjB,GACjB9kB,KAAK+kB,QACP,CAEOC,QACL,KAAOhlB,KAAK4kB,GAAK5kB,KAAK2kB,OAAOxjB,QACtBnB,KAAK2kB,OAAO3kB,KAAK4kB,OACpB5kB,KAAK4kB,KAGT5kB,KAAKilB,OACP,CAEOA,QACDjlB,KAAKklB,gBACPllB,KAAKmlB,gBAAgBnlB,KAAKklB,eAC1BllB,KAAKklB,mBAAgB5jB,GAEvBtB,KAAK4kB,GAAK,EACV5kB,KAAK2kB,OAAOxjB,OAAS,CACvB,CAEQ4jB,SACD/kB,KAAKklB,gBACRllB,KAAKklB,cAAgBllB,KAAKolB,iBAAiBplB,KAAKqlB,SAASnb,KAAKlK,OAElE,CAEQqlB,SAASC,GACftlB,KAAKklB,mBAAgB5jB,EACrB,IAAIikB,EAAe,EACfC,EAAc,EACdC,EAAwBH,EAASI,gBACjCC,EAAoB,EACxB,KAAO3lB,KAAK4kB,GAAK5kB,KAAK2kB,OAAOxjB,QAAQ,CAanC,GAZAokB,EAAeK,KAAKC,MACf7lB,KAAK2kB,OAAO3kB,KAAK4kB,OACpB5kB,KAAK4kB,KAKPW,EAAetkB,KAAKsH,IAAI,EAAGqd,KAAKC,MAAQN,GACxCC,EAAcvkB,KAAKsH,IAAIgd,EAAcC,GAGrCG,EAAoBL,EAASI,gBACX,IAAdF,EAAoBG,EAOtB,OAJIF,EAAwBF,GAAgB,IAC1CrN,QAAQhQ,KAAK,4CAA4CjH,KAAK6kB,IAAI7kB,KAAK8kB,MAAMN,EAAwBF,cAEvGvlB,KAAK+kB,SAGPU,EAAwBE,C,CAE1B3lB,KAAKilB,OACP,EAQF,MAAae,UAA0BtB,EAC3BU,iBAAiBxd,GACzB,OAAOmQ,YAAW,IAAMnQ,EAAS5H,KAAKimB,gBAAgB,MACxD,CAEUd,gBAAgB7U,GACxB4V,aAAa5V,EACf,CAEQ2V,gBAAgBE,GACtB,MAAMlV,EAAM2U,KAAKC,MAAQM,EACzB,MAAO,CACLT,cAAe,IAAMzkB,KAAKsH,IAAI,EAAG0I,EAAM2U,KAAKC,OAEhD,EAdF,sBAoCa,EAAAO,eAAkB,EAAA3C,QAAU,wBAAyB4C,OAnBlE,cAAoC3B,EACxBU,iBAAiBxd,GACzB,OAAO0e,oBAAoB1e,EAC7B,CAEUud,gBAAgB7U,GACxBiW,mBAAmBjW,EACrB,GAYkG0V,EAMpG,0BAGEpmB,cACEI,KAAKwmB,OAAS,IAAI,EAAAJ,aACpB,CAEO3kB,IAAIqjB,GACT9kB,KAAKwmB,OAAOvB,QACZjlB,KAAKwmB,OAAO3B,QAAQC,EACtB,CAEOE,QACLhlB,KAAKwmB,OAAOxB,OACd,E,wGC/JF,eAGA,yCAA8CyB,GAW5C,MAAMrd,EAAOqd,EAAchgB,OAAOsT,MAAMxY,IAAIklB,EAAchgB,OAAOuT,MAAQyM,EAAchgB,OAAO4B,EAAI,GAC5Fqe,EAAWtd,aAAI,EAAJA,EAAM7H,IAAIklB,EAAcjf,KAAO,GAE1CiO,EAAWgR,EAAchgB,OAAOsT,MAAMxY,IAAIklB,EAAchgB,OAAOuT,MAAQyM,EAAchgB,OAAO4B,GAC9FoN,GAAYiR,IACdjR,EAAS7M,UAAa8d,EAAS,EAAAC,wBAA0B,EAAA7L,gBAAkB4L,EAAS,EAAAC,wBAA0B,EAAAC,qBAElH,C,sGClBA,MAAapH,EAAb,cAsBS,KAAApF,GAAK,EACL,KAAAC,GAAK,EACL,KAAAjC,SAA2B,IAAIyO,CA+FxC,CAtHSC,kBAAkBplB,GACvB,MAAO,CACLA,IAAU,GAAuB,IACjCA,IAAU,EAAyB,IAC3B,IAARA,EAEJ,CAEOolB,oBAAoBplB,GACzB,OAAmB,IAAXA,EAAM,KAAa,IAAmC,IAAXA,EAAM,KAAa,EAAoC,IAAXA,EAAM,EACvG,CAEOkB,QACL,MAAMmkB,EAAS,IAAIvH,EAInB,OAHAuH,EAAO3M,GAAKpa,KAAKoa,GACjB2M,EAAO1M,GAAKra,KAAKqa,GACjB0M,EAAO3O,SAAWpY,KAAKoY,SAASxV,QACzBmkB,CACT,CAQOC,YAA4B,OAAiB,SAAVhnB,KAAKoa,EAAsB,CAC9D6M,SAA4B,OAAiB,UAAVjnB,KAAKoa,EAAmB,CAC3D8M,cACL,OAAIlnB,KAAKmnB,oBAAuD,IAAjCnnB,KAAKoY,SAASiI,eACpC,EAEQ,UAAVrgB,KAAKoa,EACd,CACOgN,UAA4B,OAAiB,UAAVpnB,KAAKoa,EAAoB,CAC5DiN,cAA4B,OAAiB,WAAVrnB,KAAKoa,EAAwB,CAChEkN,WAA4B,OAAiB,SAAVtnB,KAAKqa,EAAqB,CAC7DkN,QAA4B,OAAiB,UAAVvnB,KAAKqa,EAAkB,CAC1DmN,kBAA4B,OAAiB,WAAVxnB,KAAKoa,EAA4B,CACpE6I,cAA4B,OAAiB,UAAVjjB,KAAKqa,EAAwB,CAGhEoN,iBAA2B,OAAiB,SAAVznB,KAAKoa,EAAyB,CAChEsN,iBAA2B,OAAiB,SAAV1nB,KAAKqa,EAAyB,CAChEsN,UAA2B,OAA0C,WAAxB,SAAV3nB,KAAKoa,GAAgD,CACxFwN,UAA2B,OAA0C,WAAxB,SAAV5nB,KAAKqa,GAAgD,CACxFwN,cAA2B,OAA0C,WAAxB,SAAV7nB,KAAKoa,KAAqF,WAAxB,SAAVpa,KAAKoa,GAAiD,CACjJ0N,cAA2B,OAA0C,WAAxB,SAAV9nB,KAAKqa,KAAqF,WAAxB,SAAVra,KAAKqa,GAAiD,CACjJ0N,cAA2B,OAA0C,IAAxB,SAAV/nB,KAAKoa,GAAgC,CACxE4N,cAA2B,OAA0C,IAAxB,SAAVhoB,KAAKqa,GAAgC,CACxE4N,qBAAgC,OAAmB,IAAZjoB,KAAKoa,IAAwB,IAAZpa,KAAKqa,EAAU,CAGvE6N,aACL,OAAkB,SAAVloB,KAAKoa,IACX,KAAK,SACL,KAAK,SAAqB,OAAiB,IAAVpa,KAAKoa,GACtC,KAAK,SAAqB,OAAiB,SAAVpa,KAAKoa,GACtC,QAA0B,OAAQ,EAEtC,CACO+N,aACL,OAAkB,SAAVnoB,KAAKqa,IACX,KAAK,SACL,KAAK,SAAqB,OAAiB,IAAVra,KAAKqa,GACtC,KAAK,SAAqB,OAAiB,SAAVra,KAAKqa,GACtC,QAA0B,OAAQ,EAEtC,CAGO8M,mBACL,OAAiB,UAAVnnB,KAAKqa,EACd,CACOiG,iBACDtgB,KAAKoY,SAASgQ,UAChBpoB,KAAKqa,KAAM,UAEXra,KAAKqa,IAAM,SAEf,CACOgO,oBACL,GAAe,UAAVroB,KAAKqa,KAA+Bra,KAAKoY,SAAS8H,eACrD,OAAuC,SAA/BlgB,KAAKoY,SAAS8H,gBACpB,KAAK,SACL,KAAK,SAAqB,OAAsC,IAA/BlgB,KAAKoY,SAAS8H,eAC/C,KAAK,SAAqB,OAAsC,SAA/BlgB,KAAKoY,SAAS8H,eAC/C,QAA0B,OAAOlgB,KAAKkoB,aAG1C,OAAOloB,KAAKkoB,YACd,CACOI,wBACL,OAAkB,UAAVtoB,KAAKqa,KAA+Bra,KAAKoY,SAAS8H,eACvB,SAA/BlgB,KAAKoY,SAAS8H,eACdlgB,KAAKynB,gBACX,CACOc,sBACL,OAAkB,UAAVvoB,KAAKqa,KAA+Bra,KAAKoY,SAAS8H,eACE,WAAxB,SAA/BlgB,KAAKoY,SAAS8H,gBACflgB,KAAK2nB,SACX,CACOa,0BACL,OAAkB,UAAVxoB,KAAKqa,KAA+Bra,KAAKoY,SAAS8H,eACE,WAAxB,SAA/BlgB,KAAKoY,SAAS8H,iBAC8C,WAAxB,SAA/BlgB,KAAKoY,SAAS8H,gBACpBlgB,KAAK6nB,aACX,CACOY,0BACL,OAAkB,UAAVzoB,KAAKqa,KAA+Bra,KAAKoY,SAAS8H,eACE,IAAxB,SAA/BlgB,KAAKoY,SAAS8H,gBACflgB,KAAK+nB,aACX,CACOW,oBACL,OAAiB,UAAV1oB,KAAKoa,GACG,UAAVpa,KAAKqa,GAA4Bra,KAAKoY,SAASiI,eAAiB,EACjE,CACN,EAtHF,kBA8HA,MAAawG,EAyCXjnB,YACE+oB,EAAc,EACdtQ,EAAgB,GA1CV,KAAAuQ,KAAe,EAgCf,KAAAC,OAAiB,EAYvB7oB,KAAK4oB,KAAOD,EACZ3oB,KAAK6oB,OAASxQ,CAChB,CA7CWsQ,UACT,OAAI3oB,KAAK6oB,QAEQ,UAAZ7oB,KAAK4oB,KACL5oB,KAAKqgB,gBAAkB,GAGrBrgB,KAAK4oB,IACd,CACWD,QAAIjnB,GAAiB1B,KAAK4oB,KAAOlnB,CAAO,CAExC2e,qBAET,OAAIrgB,KAAK6oB,OACA,GAEW,UAAZ7oB,KAAK4oB,OAAoC,EACnD,CACWvI,mBAAe3e,GACxB1B,KAAK4oB,OAAQ,UACb5oB,KAAK4oB,MAASlnB,GAAS,GAAM,SAC/B,CAEWwe,qBACT,OAAmB,SAAZlgB,KAAK4oB,IACd,CACW1I,mBAAexe,GACxB1B,KAAK4oB,OAAQ,SACb5oB,KAAK4oB,MAAgB,SAARlnB,CACf,CAGW2W,YACT,OAAOrY,KAAK6oB,MACd,CACWxQ,UAAM3W,GACf1B,KAAK6oB,OAASnnB,CAChB,CAUOkB,QACL,OAAO,IAAIikB,EAAc7mB,KAAK4oB,KAAM5oB,KAAK6oB,OAC3C,CAMOT,UACL,OAA+B,IAAxBpoB,KAAKqgB,gBAA0D,IAAhBrgB,KAAK6oB,MAC7D,EA3DF,iB,kGCjIA,eAGA,SACA,SACA,SACA,SACA,SAEA,SACA,SACA,SAEa,EAAAC,gBAAkB,WAS/B,eAoBElpB,YACUmpB,EACAjc,EACAxI,GAFA,KAAAykB,eAAAA,EACA,KAAAjc,gBAAAA,EACA,KAAAxI,eAAAA,EArBH,KAAAoC,MAAgB,EAChB,KAAAsT,MAAgB,EAChB,KAAA3R,EAAY,EACZ,KAAAD,EAAY,EAGZ,KAAAiU,KAAkD,CAAC,EACnD,KAAAqE,OAAiB,EACjB,KAAAD,OAAiB,EACjB,KAAAE,iBAAmB,EAAA3S,kBAAkBpL,QACrC,KAAAge,aAAqC,EAAA/C,gBACrC,KAAAmL,QAAoB,GACnB,KAAAC,UAAuB,EAAAvb,SAASwb,aAAa,CAAC,EAAG,EAAAC,eAAgB,EAAApO,gBAAiB,EAAAD,iBAClF,KAAAsO,gBAA6B,EAAA1b,SAASwb,aAAa,CAAC,EAAG,EAAAG,qBAAsB,EAAAC,sBAAuB,EAAA1C,uBAGpG,KAAA2C,aAAuB,EA6NvB,KAAAC,oBAAsB,IAAI,EAAApD,cAC1B,KAAAqD,uBAAyB,EAvN/BzpB,KAAK0pB,MAAQ1pB,KAAKsE,eAAekD,KACjCxH,KAAK2pB,MAAQ3pB,KAAKsE,eAAemD,KACjCzH,KAAK+Z,MAAQ,IAAI,EAAAra,aAA0BM,KAAK4pB,wBAAwB5pB,KAAK2pB,QAC7E3pB,KAAK6G,UAAY,EACjB7G,KAAK8G,aAAe9G,KAAK2pB,MAAQ,EACjC3pB,KAAK6pB,eACP,CAEOhP,YAAY8E,GAUjB,OATIA,GACF3f,KAAKipB,UAAU7O,GAAKuF,EAAKvF,GACzBpa,KAAKipB,UAAU5O,GAAKsF,EAAKtF,GACzBra,KAAKipB,UAAU7Q,SAAWuH,EAAKvH,WAE/BpY,KAAKipB,UAAU7O,GAAK,EACpBpa,KAAKipB,UAAU5O,GAAK,EACpBra,KAAKipB,UAAU7Q,SAAW,IAAI,EAAAyO,eAEzB7mB,KAAKipB,SACd,CAEOa,kBAAkBnK,GAUvB,OATIA,GACF3f,KAAKopB,gBAAgBhP,GAAKuF,EAAKvF,GAC/Bpa,KAAKopB,gBAAgB/O,GAAKsF,EAAKtF,GAC/Bra,KAAKopB,gBAAgBhR,SAAWuH,EAAKvH,WAErCpY,KAAKopB,gBAAgBhP,GAAK,EAC1Bpa,KAAKopB,gBAAgB/O,GAAK,EAC1Bra,KAAKopB,gBAAgBhR,SAAW,IAAI,EAAAyO,eAE/B7mB,KAAKopB,eACd,CAEOjM,aAAawC,EAAsB/W,GACxC,OAAO,IAAI,EAAAmhB,WAAW/pB,KAAKsE,eAAekD,KAAMxH,KAAK6a,YAAY8E,GAAO/W,EAC1E,CAEWohB,oBACT,OAAOhqB,KAAK+oB,gBAAkB/oB,KAAK+Z,MAAMlZ,UAAYb,KAAK2pB,KAC5D,CAEWM,yBACT,MACMC,EADYlqB,KAAKga,MAAQha,KAAKqI,EACNrI,KAAK0G,MACnC,OAAQwjB,GAAa,GAAKA,EAAYlqB,KAAK2pB,KAC7C,CAOQC,wBAAwBniB,GAC9B,IAAKzH,KAAK+oB,eACR,OAAOthB,EAGT,MAAM0iB,EAAsB1iB,EAAOzH,KAAK8M,gBAAgBlD,WAAWwgB,WAEnE,OAAOD,EAAsB,EAAArB,gBAAkB,EAAAA,gBAAkBqB,CACnE,CAKOE,iBAAiBC,GACtB,GAA0B,IAAtBtqB,KAAK+Z,MAAM5Y,OAAc,MACVG,IAAbgpB,IACFA,EAAW,EAAAtc,mBAEb,IAAIhN,EAAIhB,KAAK2pB,MACb,KAAO3oB,KACLhB,KAAK+Z,MAAMpY,KAAK3B,KAAKmd,aAAamN,G,CAGxC,CAKOrF,QACLjlB,KAAK0G,MAAQ,EACb1G,KAAKga,MAAQ,EACbha,KAAKqI,EAAI,EACTrI,KAAKoI,EAAI,EACTpI,KAAK+Z,MAAQ,IAAI,EAAAra,aAA0BM,KAAK4pB,wBAAwB5pB,KAAK2pB,QAC7E3pB,KAAK6G,UAAY,EACjB7G,KAAK8G,aAAe9G,KAAK2pB,MAAQ,EACjC3pB,KAAK6pB,eACP,CAOO1hB,OAAOoiB,EAAiBC,GAE7B,MAAMC,EAAWzqB,KAAK6a,YAAY,EAAA7M,mBAGlC,IAAI0c,EAAmB,EAIvB,MAAM5pB,EAAed,KAAK4pB,wBAAwBY,GAOlD,GANI1pB,EAAed,KAAK+Z,MAAMlZ,YAC5Bb,KAAK+Z,MAAMlZ,UAAYC,GAKrBd,KAAK+Z,MAAM5Y,OAAS,EAAG,CAEzB,GAAInB,KAAK0pB,MAAQa,EACf,IAAK,IAAIvpB,EAAI,EAAGA,EAAIhB,KAAK+Z,MAAM5Y,OAAQH,IAErC0pB,IAAqB1qB,KAAK+Z,MAAMxY,IAAIP,GAAImH,OAAOoiB,EAASE,GAK5D,IAAIE,EAAS,EACb,GAAI3qB,KAAK2pB,MAAQa,EACf,IAAK,IAAIniB,EAAIrI,KAAK2pB,MAAOthB,EAAImiB,EAASniB,IAChCrI,KAAK+Z,MAAM5Y,OAASqpB,EAAUxqB,KAAKga,QACjCha,KAAK8M,gBAAgBlD,WAAWC,YAGlC7J,KAAK+Z,MAAMpY,KAAK,IAAI,EAAAooB,WAAWQ,EAASE,IAEpCzqB,KAAKga,MAAQ,GAAKha,KAAK+Z,MAAM5Y,QAAUnB,KAAKga,MAAQha,KAAKqI,EAAIsiB,EAAS,GAGxE3qB,KAAKga,QACL2Q,IACI3qB,KAAK0G,MAAQ,GAEf1G,KAAK0G,SAKP1G,KAAK+Z,MAAMpY,KAAK,IAAI,EAAAooB,WAAWQ,EAASE,UAMhD,IAAK,IAAIpiB,EAAIrI,KAAK2pB,MAAOthB,EAAImiB,EAASniB,IAChCrI,KAAK+Z,MAAM5Y,OAASqpB,EAAUxqB,KAAKga,QACjCha,KAAK+Z,MAAM5Y,OAASnB,KAAKga,MAAQha,KAAKqI,EAAI,EAE5CrI,KAAK+Z,MAAM/X,OAGXhC,KAAKga,QACLha,KAAK0G,UAQb,GAAI5F,EAAed,KAAK+Z,MAAMlZ,UAAW,CAEvC,MAAM+pB,EAAe5qB,KAAK+Z,MAAM5Y,OAASL,EACrC8pB,EAAe,IACjB5qB,KAAK+Z,MAAMxX,UAAUqoB,GACrB5qB,KAAKga,MAAQ/Y,KAAKsH,IAAIvI,KAAKga,MAAQ4Q,EAAc,GACjD5qB,KAAK0G,MAAQzF,KAAKsH,IAAIvI,KAAK0G,MAAQkkB,EAAc,GACjD5qB,KAAK0gB,OAASzf,KAAKsH,IAAIvI,KAAK0gB,OAASkK,EAAc,IAErD5qB,KAAK+Z,MAAMlZ,UAAYC,C,CAIzBd,KAAKoI,EAAInH,KAAKC,IAAIlB,KAAKoI,EAAGmiB,EAAU,GACpCvqB,KAAKqI,EAAIpH,KAAKC,IAAIlB,KAAKqI,EAAGmiB,EAAU,GAChCG,IACF3qB,KAAKqI,GAAKsiB,GAEZ3qB,KAAKygB,OAASxf,KAAKC,IAAIlB,KAAKygB,OAAQ8J,EAAU,GAE9CvqB,KAAK6G,UAAY,C,CAKnB,GAFA7G,KAAK8G,aAAe0jB,EAAU,EAE1BxqB,KAAK6qB,mBACP7qB,KAAK8qB,QAAQP,EAASC,GAGlBxqB,KAAK0pB,MAAQa,GACf,IAAK,IAAIvpB,EAAI,EAAGA,EAAIhB,KAAK+Z,MAAM5Y,OAAQH,IAErC0pB,IAAqB1qB,KAAK+Z,MAAMxY,IAAIP,GAAImH,OAAOoiB,EAASE,GAK9DzqB,KAAK0pB,MAAQa,EACbvqB,KAAK2pB,MAAQa,EAEbxqB,KAAKwpB,oBAAoBvE,QAErByF,EAAmB,GAAM1qB,KAAK+Z,MAAM5Y,SACtCnB,KAAKypB,uBAAyB,EAC9BzpB,KAAKwpB,oBAAoB3E,SAAQ,IAAM7kB,KAAK+qB,0BAEhD,CAKQA,wBACN,IAAIC,GAAY,EACZhrB,KAAKypB,wBAA0BzpB,KAAK+Z,MAAM5Y,SAG5CnB,KAAKypB,uBAAyB,EAC9BuB,GAAY,GAEd,IAAIC,EAAU,EACd,KAAOjrB,KAAKypB,uBAAyBzpB,KAAK+Z,MAAM5Y,QAG9C,GAFA8pB,GAAWjrB,KAAK+Z,MAAMxY,IAAIvB,KAAKypB,0BAA2ByB,gBAEtDD,EAAU,IACZ,OAAO,EAMX,OAAOD,CACT,CAEYH,uBACV,OAAO7qB,KAAK+oB,iBAAmB/oB,KAAK8M,gBAAgBlD,WAAWC,WACjE,CAEQihB,QAAQP,EAAiBC,GAC3BxqB,KAAK0pB,QAAUa,IAKfA,EAAUvqB,KAAK0pB,MACjB1pB,KAAKmrB,cAAcZ,EAASC,GAE5BxqB,KAAKorB,eAAeb,EAASC,GAEjC,CAEQW,cAAcZ,EAAiBC,GACrC,MAAMa,GAAqB,IAAAC,8BAA6BtrB,KAAK+Z,MAAO/Z,KAAK0pB,MAAOa,EAASvqB,KAAKga,MAAQha,KAAKqI,EAAGrI,KAAK6a,YAAY,EAAA7M,oBAC/H,GAAIqd,EAASlqB,OAAS,EAAG,CACvB,MAAMoqB,GAAkB,IAAAC,6BAA4BxrB,KAAK+Z,MAAOsR,IAChE,IAAAI,4BAA2BzrB,KAAK+Z,MAAOwR,EAAgBG,QACvD1rB,KAAK2rB,4BAA4BpB,EAASC,EAASe,EAAgBK,a,CAEvE,CAEQD,4BAA4BpB,EAAiBC,EAAiBoB,GACpE,MAAMnB,EAAWzqB,KAAK6a,YAAY,EAAA7M,mBAElC,IAAI6d,EAAsBD,EAC1B,KAAOC,KAAwB,GACV,IAAf7rB,KAAKga,OACHha,KAAKqI,EAAI,GACXrI,KAAKqI,IAEHrI,KAAK+Z,MAAM5Y,OAASqpB,GAEtBxqB,KAAK+Z,MAAMpY,KAAK,IAAI,EAAAooB,WAAWQ,EAASE,MAGtCzqB,KAAK0G,QAAU1G,KAAKga,OACtBha,KAAK0G,QAEP1G,KAAKga,SAGTha,KAAK0gB,OAASzf,KAAKsH,IAAIvI,KAAK0gB,OAASkL,EAAc,EACrD,CAEQR,eAAeb,EAAiBC,GACtC,MAAMC,EAAWzqB,KAAK6a,YAAY,EAAA7M,mBAG5B8d,EAAW,GACjB,IAAIC,EAAgB,EAEpB,IAAK,IAAI1jB,EAAIrI,KAAK+Z,MAAM5Y,OAAS,EAAGkH,GAAK,EAAGA,IAAK,CAE/C,IAAIoN,EAAWzV,KAAK+Z,MAAMxY,IAAI8G,GAC9B,IAAKoN,IAAaA,EAAS7M,WAAa6M,EAASuW,oBAAsBzB,EACrE,SAIF,MAAM0B,EAA6B,CAACxW,GACpC,KAAOA,EAAS7M,WAAaP,EAAI,GAC/BoN,EAAWzV,KAAK+Z,MAAMxY,MAAM8G,GAC5B4jB,EAAaC,QAAQzW,GAKvB,MAAM0W,EAAYnsB,KAAKga,MAAQha,KAAKqI,EACpC,GAAI8jB,GAAa9jB,GAAK8jB,EAAY9jB,EAAI4jB,EAAa9qB,OACjD,SAGF,MAAMirB,EAAiBH,EAAaA,EAAa9qB,OAAS,GAAG6qB,mBACvDK,GAAkB,IAAAC,gCAA+BL,EAAcjsB,KAAK0pB,MAAOa,GAC3EgC,EAAaF,EAAgBlrB,OAAS8qB,EAAa9qB,OACzD,IAAIqrB,EAGFA,EAFiB,IAAfxsB,KAAKga,OAAeha,KAAKqI,IAAMrI,KAAK+Z,MAAM5Y,OAAS,EAEtCF,KAAKsH,IAAI,EAAGvI,KAAKqI,EAAIrI,KAAK+Z,MAAMlZ,UAAY0rB,GAE5CtrB,KAAKsH,IAAI,EAAGvI,KAAK+Z,MAAM5Y,OAASnB,KAAK+Z,MAAMlZ,UAAY0rB,GAIxE,MAAME,EAAyB,GAC/B,IAAK,IAAIzrB,EAAI,EAAGA,EAAIurB,EAAYvrB,IAAK,CACnC,MAAM0rB,EAAU1sB,KAAKmd,aAAa,EAAAnP,mBAAmB,GACrDye,EAAS9qB,KAAK+qB,E,CAEZD,EAAStrB,OAAS,IACpB2qB,EAASnqB,KAAK,CAGZO,MAAOmG,EAAI4jB,EAAa9qB,OAAS4qB,EACjCU,aAEFV,GAAiBU,EAAStrB,QAE5B8qB,EAAatqB,QAAQ8qB,GAGrB,IAAIE,EAAgBN,EAAgBlrB,OAAS,EACzCyrB,EAAUP,EAAgBM,GACd,IAAZC,IACFD,IACAC,EAAUP,EAAgBM,IAE5B,IAAIE,EAAeZ,EAAa9qB,OAASorB,EAAa,EAClDO,EAASV,EACb,KAAOS,GAAgB,GAAG,CACxB,MAAME,EAAc9rB,KAAKC,IAAI4rB,EAAQF,GACrC,QAAoCtrB,IAAhC2qB,EAAaU,GAGf,MASF,GAPAV,EAAaU,GAAeK,cAAcf,EAAaY,GAAeC,EAASC,EAAaH,EAAUG,EAAaA,GAAa,GAChIH,GAAWG,EACK,IAAZH,IACFD,IACAC,EAAUP,EAAgBM,IAE5BG,GAAUC,EACK,IAAXD,EAAc,CAChBD,IACA,MAAMI,EAAoBhsB,KAAKsH,IAAIskB,EAAc,GACjDC,GAAS,IAAAI,6BAA4BjB,EAAcgB,EAAmBjtB,KAAK0pB,M,EAK/E,IAAK,IAAI1oB,EAAI,EAAGA,EAAIirB,EAAa9qB,OAAQH,IACnCqrB,EAAgBrrB,GAAKupB,GACvB0B,EAAajrB,GAAGmsB,QAAQd,EAAgBrrB,GAAIypB,GAKhD,IAAIoB,EAAsBU,EAAaC,EACvC,KAAOX,KAAwB,GACV,IAAf7rB,KAAKga,MACHha,KAAKqI,EAAImiB,EAAU,GACrBxqB,KAAKqI,IACLrI,KAAK+Z,MAAM/X,QAEXhC,KAAKga,QACLha,KAAK0G,SAIH1G,KAAKga,MAAQ/Y,KAAKC,IAAIlB,KAAK+Z,MAAMlZ,UAAWb,KAAK+Z,MAAM5Y,OAAS4qB,GAAiBvB,IAC/ExqB,KAAKga,QAAUha,KAAK0G,OACtB1G,KAAK0G,QAEP1G,KAAKga,SAIXha,KAAK0gB,OAASzf,KAAKC,IAAIlB,KAAK0gB,OAAS6L,EAAYvsB,KAAKga,MAAQwQ,EAAU,E,CAM1E,GAAIsB,EAAS3qB,OAAS,EAAG,CAGvB,MAAMisB,EAA+B,GAG/BC,EAA8B,GACpC,IAAK,IAAIrsB,EAAI,EAAGA,EAAIhB,KAAK+Z,MAAM5Y,OAAQH,IACrCqsB,EAAc1rB,KAAK3B,KAAK+Z,MAAMxY,IAAIP,IAEpC,MAAMssB,EAAsBttB,KAAK+Z,MAAM5Y,OAEvC,IAAIosB,EAAoBD,EAAsB,EAC1CE,EAAoB,EACpBC,EAAe3B,EAAS0B,GAC5BxtB,KAAK+Z,MAAM5Y,OAASF,KAAKC,IAAIlB,KAAK+Z,MAAMlZ,UAAWb,KAAK+Z,MAAM5Y,OAAS4qB,GACvE,IAAI2B,EAAqB,EACzB,IAAK,IAAI1sB,EAAIC,KAAKC,IAAIlB,KAAK+Z,MAAMlZ,UAAY,EAAGysB,EAAsBvB,EAAgB,GAAI/qB,GAAK,EAAGA,IAChG,GAAIysB,GAAgBA,EAAavrB,MAAQqrB,EAAoBG,EAAoB,CAE/E,IAAK,IAAIC,EAAQF,EAAahB,SAAStrB,OAAS,EAAGwsB,GAAS,EAAGA,IAC7D3tB,KAAK+Z,MAAMtY,IAAIT,IAAKysB,EAAahB,SAASkB,IAE5C3sB,IAGAosB,EAAazrB,KAAK,CAChBH,MAAO+rB,EAAoB,EAC3BlrB,OAAQorB,EAAahB,SAAStrB,SAGhCusB,GAAsBD,EAAahB,SAAStrB,OAC5CssB,EAAe3B,IAAW0B,E,MAE1BxtB,KAAK+Z,MAAMtY,IAAIT,EAAGqsB,EAAcE,MAKpC,IAAIK,EAAqB,EACzB,IAAK,IAAI5sB,EAAIosB,EAAajsB,OAAS,EAAGH,GAAK,EAAGA,IAC5CosB,EAAapsB,GAAGQ,OAASosB,EACzB5tB,KAAK+Z,MAAM1Z,gBAAgBuB,KAAKwrB,EAAapsB,IAC7C4sB,GAAsBR,EAAapsB,GAAGqB,OAExC,MAAMuoB,EAAe3pB,KAAKsH,IAAI,EAAG+kB,EAAsBvB,EAAgB/rB,KAAK+Z,MAAMlZ,WAC9E+pB,EAAe,GACjB5qB,KAAK+Z,MAAMxZ,cAAcqB,KAAKgpB,E,CAGpC,CAYOiD,4BAA4BC,EAAmBC,EAAoBC,EAAmB,EAAGC,GAC9F,MAAM7kB,EAAOpJ,KAAK+Z,MAAMxY,IAAIusB,GAC5B,OAAK1kB,EAGEA,EAAK8kB,kBAAkBH,EAAWC,EAAUC,GAF1C,EAGX,CAEOE,uBAAuB9lB,GAC5B,IAAI+lB,EAAQ/lB,EACRgmB,EAAOhmB,EAEX,KAAO+lB,EAAQ,GAAKpuB,KAAK+Z,MAAMxY,IAAI6sB,GAAQxlB,WACzCwlB,IAGF,KAAOC,EAAO,EAAIruB,KAAK+Z,MAAM5Y,QAAUnB,KAAK+Z,MAAMxY,IAAI8sB,EAAO,GAAIzlB,WAC/DylB,IAEF,MAAO,CAAED,QAAOC,OAClB,CAMOxE,cAAc7oB,GAUnB,IATIA,QACGhB,KAAKqc,KAAKrb,KACbA,EAAIhB,KAAKsc,SAAStb,KAGpBhB,KAAKqc,KAAO,CAAC,EACbrb,EAAI,GAGCA,EAAIhB,KAAK0pB,MAAO1oB,GAAKhB,KAAK8M,gBAAgBlD,WAAW0kB,aAC1DtuB,KAAKqc,KAAKrb,IAAK,CAEnB,CAMOsb,SAASlU,GAId,IAHIA,UACFA,EAAIpI,KAAKoI,IAEHpI,KAAKqc,OAAOjU,IAAMA,EAAI,IAC9B,OAAOA,GAAKpI,KAAK0pB,MAAQ1pB,KAAK0pB,MAAQ,EAAIthB,EAAI,EAAI,EAAIA,CACxD,CAMOyT,SAASzT,GAId,IAHIA,UACFA,EAAIpI,KAAKoI,IAEHpI,KAAKqc,OAAOjU,IAAMA,EAAIpI,KAAK0pB,QACnC,OAAOthB,GAAKpI,KAAK0pB,MAAQ1pB,KAAK0pB,MAAQ,EAAIthB,EAAI,EAAI,EAAIA,CACxD,CAMOyU,aAAaxU,GAClBrI,KAAKupB,aAAc,EACnB,IAAK,IAAIvoB,EAAI,EAAGA,EAAIhB,KAAKgpB,QAAQ7nB,OAAQH,IACnChB,KAAKgpB,QAAQhoB,GAAGoI,OAASf,IAC3BrI,KAAKgpB,QAAQhoB,GAAGqG,UAChBrH,KAAKgpB,QAAQ/mB,OAAOjB,IAAK,IAG7BhB,KAAKupB,aAAc,CACrB,CAKOgF,kBACLvuB,KAAKupB,aAAc,EACnB,IAAK,IAAIvoB,EAAI,EAAGA,EAAIhB,KAAKgpB,QAAQ7nB,OAAQH,IACvChB,KAAKgpB,QAAQhoB,GAAGqG,UAChBrH,KAAKgpB,QAAQ/mB,OAAOjB,IAAK,GAE3BhB,KAAKupB,aAAc,CACrB,CAEOiF,UAAUnmB,GACf,MAAMomB,EAAS,IAAI,EAAAC,OAAOrmB,GA0B1B,OAzBArI,KAAKgpB,QAAQrnB,KAAK8sB,GAClBA,EAAOxuB,SAASD,KAAK+Z,MAAMvZ,QAAO6B,IAChCosB,EAAOrlB,MAAQ/G,EAEXosB,EAAOrlB,KAAO,GAChBqlB,EAAOpnB,S,KAGXonB,EAAOxuB,SAASD,KAAK+Z,MAAMzZ,UAASF,IAC9BquB,EAAOrlB,MAAQhJ,EAAMoB,QACvBitB,EAAOrlB,MAAQhJ,EAAMiC,O,KAGzBosB,EAAOxuB,SAASD,KAAK+Z,MAAM5Z,UAASC,IAE9BquB,EAAOrlB,MAAQhJ,EAAMoB,OAASitB,EAAOrlB,KAAOhJ,EAAMoB,MAAQpB,EAAMiC,QAClEosB,EAAOpnB,UAILonB,EAAOrlB,KAAOhJ,EAAMoB,QACtBitB,EAAOrlB,MAAQhJ,EAAMiC,O,KAGzBosB,EAAOxuB,SAASwuB,EAAOE,WAAU,IAAM3uB,KAAK4uB,cAAcH,MACnDA,CACT,CAEQG,cAAcH,GACfzuB,KAAKupB,aACRvpB,KAAKgpB,QAAQ/mB,OAAOjC,KAAKgpB,QAAQtL,QAAQ+Q,GAAS,EAEtD,E,yGCloBF,eACA,SACA,SACA,SA4Ba,EAAAzgB,kBAAoB6gB,OAAOC,OAAO,IAAI,EAAAtP,eAGnD,IAAIuP,EAAc,EAoBlB,MAAahF,EAMXnqB,YAAY4H,EAAcwnB,EAAiCpmB,GAAqB,GAArB,KAAAA,UAAAA,EAJjD,KAAAqmB,UAAuC,CAAC,EACxC,KAAAC,eAAgE,CAAC,EAIzElvB,KAAKmvB,MAAQ,IAAI/hB,YA9CH,EA8Ce5F,GAC7B,MAAMmb,EAAOqM,GAAgB,EAAAthB,SAASwb,aAAa,CAAC,EAAG,EAAAC,eAAgB,EAAApO,gBAAiB,EAAAD,iBACxF,IAAK,IAAI9Z,EAAI,EAAGA,EAAIwG,IAAQxG,EAC1BhB,KAAKmtB,QAAQnsB,EAAG2hB,GAElB3iB,KAAKmB,OAASqG,CAChB,CAMOjG,IAAIC,GACT,MAAM8Z,EAAUtb,KAAKmvB,MA3DP,EA2Da3tB,EAAoB,GACzC4tB,EAAe,QAAV9T,EACX,MAAO,CACLtb,KAAKmvB,MA9DO,EA8DD3tB,EAAoB,GACpB,QAAV8Z,EACGtb,KAAKivB,UAAUztB,GACf,GAAO,IAAAiZ,qBAAoB2U,GAAM,GACrC9T,GAAW,GACA,QAAVA,EACGtb,KAAKivB,UAAUztB,GAAOuX,WAAW/Y,KAAKivB,UAAUztB,GAAOL,OAAS,GAChEiuB,EAER,CAMO3tB,IAAID,EAAeE,GACxB1B,KAAKmvB,MA9ES,EA8EH3tB,EAAoB,GAAWE,EAAM,EAAA2tB,sBAC5C3tB,EAAM,EAAA4tB,sBAAsBnuB,OAAS,GACvCnB,KAAKivB,UAAUztB,GAASE,EAAM,GAC9B1B,KAAKmvB,MAjFO,EAiFD3tB,EAAoB,GAAwB,QAARA,EAAoCE,EAAM,EAAA6tB,wBAA0B,IAEnHvvB,KAAKmvB,MAnFO,EAmFD3tB,EAAoB,GAAgBE,EAAM,EAAA4tB,sBAAsBvW,WAAW,GAAMrX,EAAM,EAAA6tB,wBAA0B,EAEhI,CAMOrV,SAAS1Y,GACd,OAAOxB,KAAKmvB,MA5FE,EA4FI3tB,EAAoB,IAAiB,EACzD,CAGOma,SAASna,GACd,OAAsD,SAA/CxB,KAAKmvB,MAjGE,EAiGI3tB,EAAoB,EACxC,CAGOguB,MAAMhuB,GACX,OAAOxB,KAAKmvB,MAtGE,EAsGI3tB,EAAoB,EACxC,CAGOiuB,MAAMjuB,GACX,OAAOxB,KAAKmvB,MA3GE,EA2GI3tB,EAAoB,EACxC,CAOO+Z,WAAW/Z,GAChB,OAAsD,QAA/CxB,KAAKmvB,MApHE,EAoHI3tB,EAAoB,EACxC,CAOOkuB,aAAaluB,GAClB,MAAM8Z,EAAUtb,KAAKmvB,MA7HP,EA6Ha3tB,EAAoB,GAC/C,OAAc,QAAV8Z,EACKtb,KAAKivB,UAAUztB,GAAOuX,WAAW/Y,KAAKivB,UAAUztB,GAAOL,OAAS,GAExD,QAAVma,CACT,CAGOF,WAAW5Z,GAChB,OAAsD,QAA/CxB,KAAKmvB,MAtIE,EAsII3tB,EAAoB,EACxC,CAGOmuB,UAAUnuB,GACf,MAAM8Z,EAAUtb,KAAKmvB,MA3IP,EA2Ia3tB,EAAoB,GAC/C,OAAc,QAAV8Z,EACKtb,KAAKivB,UAAUztB,GAEV,QAAV8Z,GACK,IAAAb,qBAA8B,QAAVa,GAGtB,EACT,CAGO2H,YAAYzhB,GACjB,OAAiD,UAA1CxB,KAAKmvB,MAxJE,EAwJI3tB,EAAoB,EACxC,CAMOyZ,SAASzZ,EAAemhB,GAW7B,OAVAoM,EAhKc,EAgKAvtB,EACdmhB,EAAKrH,QAAUtb,KAAKmvB,MAAMJ,EAAc,GACxCpM,EAAKvI,GAAKpa,KAAKmvB,MAAMJ,EAAc,GACnCpM,EAAKtI,GAAKra,KAAKmvB,MAAMJ,EAAc,GAChB,QAAfpM,EAAKrH,UACPqH,EAAKiN,aAAe5vB,KAAKivB,UAAUztB,IAEvB,UAAVmhB,EAAKtI,KACPsI,EAAKvK,SAAWpY,KAAKkvB,eAAe1tB,IAE/BmhB,CACT,CAKOwK,QAAQ3rB,EAAemhB,GACT,QAAfA,EAAKrH,UACPtb,KAAKivB,UAAUztB,GAASmhB,EAAKiN,cAEjB,UAAVjN,EAAKtI,KACPra,KAAKkvB,eAAe1tB,GAASmhB,EAAKvK,UAEpCpY,KAAKmvB,MAvLS,EAuLH3tB,EAAoB,GAAgBmhB,EAAKrH,QACpDtb,KAAKmvB,MAxLS,EAwLH3tB,EAAoB,GAAWmhB,EAAKvI,GAC/Cpa,KAAKmvB,MAzLS,EAyLH3tB,EAAoB,GAAWmhB,EAAKtI,EACjD,CAOOF,qBAAqB3Y,EAAequB,EAAmBC,EAAe1V,EAAYC,EAAY0V,GAC1F,UAAL1V,IACFra,KAAKkvB,eAAe1tB,GAASuuB,GAE/B/vB,KAAKmvB,MArMS,EAqMH3tB,EAAoB,GAAgBquB,EAAaC,GAAS,GACrE9vB,KAAKmvB,MAtMS,EAsMH3tB,EAAoB,GAAW4Y,EAC1Cpa,KAAKmvB,MAvMS,EAuMH3tB,EAAoB,GAAW6Y,CAC5C,CAQOW,mBAAmBxZ,EAAequB,GACvC,IAAIvU,EAAUtb,KAAKmvB,MAjNL,EAiNW3tB,EAAoB,GAC/B,QAAV8Z,EAEFtb,KAAKivB,UAAUztB,KAAU,IAAAiZ,qBAAoBoV,IAE/B,QAAVvU,GAIFtb,KAAKivB,UAAUztB,IAAS,IAAAiZ,qBAA8B,QAAVa,IAAoC,IAAAb,qBAAoBoV,GACpGvU,IAAW,QACXA,GAAW,SAIXA,EAAUuU,EAAa,GAAK,GAE9B7vB,KAAKmvB,MAlOO,EAkOD3tB,EAAoB,GAAgB8Z,EAEnD,CAEOV,YAAYN,EAAanP,EAAW6jB,EAAyBrmB,GAQlE,IAPA2R,GAAOta,KAAKmB,SAG0B,IAA3BnB,KAAKka,SAASI,EAAM,IAC7Bta,KAAKma,qBAAqBG,EAAM,EAAG,EAAG,GAAG3R,aAAS,EAATA,EAAWyR,KAAM,GAAGzR,aAAS,EAATA,EAAW0R,KAAM,GAAG1R,aAAS,EAATA,EAAWyP,WAAY,IAAI,EAAAyO,eAG1G1b,EAAInL,KAAKmB,OAASmZ,EAAK,CACzB,MAAMqI,EAAO,IAAI,EAAAjV,SACjB,IAAK,IAAI1M,EAAIhB,KAAKmB,OAASmZ,EAAMnP,EAAI,EAAGnK,GAAK,IAAKA,EAChDhB,KAAKmtB,QAAQ7S,EAAMnP,EAAInK,EAAGhB,KAAKib,SAASX,EAAMtZ,EAAG2hB,IAEnD,IAAK,IAAI3hB,EAAI,EAAGA,EAAImK,IAAKnK,EACvBhB,KAAKmtB,QAAQ7S,EAAMtZ,EAAGguB,E,MAGxB,IAAK,IAAIhuB,EAAIsZ,EAAKtZ,EAAIhB,KAAKmB,SAAUH,EACnChB,KAAKmtB,QAAQnsB,EAAGguB,GAKmB,IAAnChvB,KAAKka,SAASla,KAAKmB,OAAS,IAC9BnB,KAAKma,qBAAqBna,KAAKmB,OAAS,EAAG,EAAG,GAAGwH,aAAS,EAATA,EAAWyR,KAAM,GAAGzR,aAAS,EAATA,EAAW0R,KAAM,GAAG1R,aAAS,EAATA,EAAWyP,WAAY,IAAI,EAAAyO,cAExH,CAEOzJ,YAAY9C,EAAanP,EAAW6jB,EAAyBrmB,GAElE,GADA2R,GAAOta,KAAKmB,OACRgK,EAAInL,KAAKmB,OAASmZ,EAAK,CACzB,MAAMqI,EAAO,IAAI,EAAAjV,SACjB,IAAK,IAAI1M,EAAI,EAAGA,EAAIhB,KAAKmB,OAASmZ,EAAMnP,IAAKnK,EAC3ChB,KAAKmtB,QAAQ7S,EAAMtZ,EAAGhB,KAAKib,SAASX,EAAMnP,EAAInK,EAAG2hB,IAEnD,IAAK,IAAI3hB,EAAIhB,KAAKmB,OAASgK,EAAGnK,EAAIhB,KAAKmB,SAAUH,EAC/ChB,KAAKmtB,QAAQnsB,EAAGguB,E,MAGlB,IAAK,IAAIhuB,EAAIsZ,EAAKtZ,EAAIhB,KAAKmB,SAAUH,EACnChB,KAAKmtB,QAAQnsB,EAAGguB,GAOhB1U,GAAkC,IAA3Bta,KAAKka,SAASI,EAAM,IAC7Bta,KAAKma,qBAAqBG,EAAM,EAAG,EAAG,GAAG3R,aAAS,EAATA,EAAWyR,KAAM,GAAGzR,aAAS,EAATA,EAAW0R,KAAM,GAAG1R,aAAS,EAATA,EAAWyP,WAAY,IAAI,EAAAyO,eAEnF,IAAvB7mB,KAAKka,SAASI,IAAeta,KAAKub,WAAWjB,IAC/Cta,KAAKma,qBAAqBG,EAAK,EAAG,GAAG3R,aAAS,EAATA,EAAWyR,KAAM,GAAGzR,aAAS,EAATA,EAAW0R,KAAM,GAAG1R,aAAS,EAATA,EAAWyP,WAAY,IAAI,EAAAyO,cAE5G,CAEOnK,aAAaxa,EAAe+O,EAAa+d,EAAyBrmB,EAA4B8T,GAA0B,GAE7H,GAAIA,EAOF,IANIva,GAAsC,IAA7BlC,KAAKka,SAAShY,EAAQ,KAAalC,KAAKijB,YAAY/gB,EAAQ,IACvElC,KAAKma,qBAAqBjY,EAAQ,EAAG,EAAG,GAAGyG,aAAS,EAATA,EAAWyR,KAAM,GAAGzR,aAAS,EAATA,EAAW0R,KAAM,GAAG1R,aAAS,EAATA,EAAWyP,WAAY,IAAI,EAAAyO,eAE5G5V,EAAMjR,KAAKmB,QAAqC,IAA3BnB,KAAKka,SAASjJ,EAAM,KAAajR,KAAKijB,YAAYhS,IACzEjR,KAAKma,qBAAqBlJ,EAAK,EAAG,GAAGtI,aAAS,EAATA,EAAWyR,KAAM,GAAGzR,aAAS,EAATA,EAAW0R,KAAM,GAAG1R,aAAS,EAATA,EAAWyP,WAAY,IAAI,EAAAyO,eAEnG3kB,EAAQ+O,GAAQ/O,EAAQlC,KAAKmB,QAC7BnB,KAAKijB,YAAY/gB,IACpBlC,KAAKmtB,QAAQjrB,EAAO8sB,GAEtB9sB,SAcJ,IARIA,GAAsC,IAA7BlC,KAAKka,SAAShY,EAAQ,IACjClC,KAAKma,qBAAqBjY,EAAQ,EAAG,EAAG,GAAGyG,aAAS,EAATA,EAAWyR,KAAM,GAAGzR,aAAS,EAATA,EAAW0R,KAAM,GAAG1R,aAAS,EAATA,EAAWyP,WAAY,IAAI,EAAAyO,eAG5G5V,EAAMjR,KAAKmB,QAAqC,IAA3BnB,KAAKka,SAASjJ,EAAM,IAC3CjR,KAAKma,qBAAqBlJ,EAAK,EAAG,GAAGtI,aAAS,EAATA,EAAWyR,KAAM,GAAGzR,aAAS,EAATA,EAAW0R,KAAM,GAAG1R,aAAS,EAATA,EAAWyP,WAAY,IAAI,EAAAyO,eAGnG3kB,EAAQ+O,GAAQ/O,EAAQlC,KAAKmB,QAClCnB,KAAKmtB,QAAQjrB,IAAS8sB,EAE1B,CASO7mB,OAAOX,EAAcwnB,GAC1B,GAAIxnB,IAASxH,KAAKmB,OAChB,OAA2B,EAApBnB,KAAKmvB,MAAMhuB,OAhTE,EAgT+BnB,KAAKmvB,MAAM1oB,OAAOupB,WAEvE,MAAMC,EAxUQ,EAwUMzoB,EACpB,GAAIA,EAAOxH,KAAKmB,OAAQ,CACtB,GAAInB,KAAKmvB,MAAM1oB,OAAOupB,YAA4B,EAAdC,EAElCjwB,KAAKmvB,MAAQ,IAAI/hB,YAAYpN,KAAKmvB,MAAM1oB,OAAQ,EAAGwpB,OAC9C,CAEL,MAAMjpB,EAAO,IAAIoG,YAAY6iB,GAC7BjpB,EAAKvF,IAAIzB,KAAKmvB,OACdnvB,KAAKmvB,MAAQnoB,C,CAEf,IAAK,IAAIhG,EAAIhB,KAAKmB,OAAQH,EAAIwG,IAAQxG,EACpChB,KAAKmtB,QAAQnsB,EAAGguB,E,KAEb,CAELhvB,KAAKmvB,MAAQnvB,KAAKmvB,MAAM/V,SAAS,EAAG6W,GAEpC,MAAMC,EAAOrB,OAAOqB,KAAKlwB,KAAKivB,WAC9B,IAAK,IAAIjuB,EAAI,EAAGA,EAAIkvB,EAAK/uB,OAAQH,IAAK,CACpC,MAAMiC,EAAMye,SAASwO,EAAKlvB,GAAI,IAC1BiC,GAAOuE,UACFxH,KAAKivB,UAAUhsB,E,CAI1B,MAAMktB,EAAUtB,OAAOqB,KAAKlwB,KAAKkvB,gBACjC,IAAK,IAAIluB,EAAI,EAAGA,EAAImvB,EAAQhvB,OAAQH,IAAK,CACvC,MAAMiC,EAAMye,SAASyO,EAAQnvB,GAAI,IAC7BiC,GAAOuE,UACFxH,KAAKkvB,eAAejsB,E,EAKjC,OADAjD,KAAKmB,OAASqG,EACO,EAAdyoB,EArVe,EAqVuBjwB,KAAKmvB,MAAM1oB,OAAOupB,UACjE,CAQO9E,gBACL,GAAwB,EAApBlrB,KAAKmvB,MAAMhuB,OA/VO,EA+V0BnB,KAAKmvB,MAAM1oB,OAAOupB,WAAY,CAC5E,MAAMhpB,EAAO,IAAIoG,YAAYpN,KAAKmvB,MAAMhuB,QAGxC,OAFA6F,EAAKvF,IAAIzB,KAAKmvB,OACdnvB,KAAKmvB,MAAQnoB,EACN,C,CAET,OAAO,CACT,CAGO4V,KAAKoS,EAAyBvS,GAA0B,GAE7D,GAAIA,EACF,IAAK,IAAIzb,EAAI,EAAGA,EAAIhB,KAAKmB,SAAUH,EAC5BhB,KAAKijB,YAAYjiB,IACpBhB,KAAKmtB,QAAQnsB,EAAGguB,OAHtB,CAQAhvB,KAAKivB,UAAY,CAAC,EAClBjvB,KAAKkvB,eAAiB,CAAC,EACvB,IAAK,IAAIluB,EAAI,EAAGA,EAAIhB,KAAKmB,SAAUH,EACjChB,KAAKmtB,QAAQnsB,EAAGguB,E,CAEpB,CAGOoB,SAAShnB,GACVpJ,KAAKmB,SAAWiI,EAAKjI,OACvBnB,KAAKmvB,MAAQ,IAAI/hB,YAAYhE,EAAK+lB,OAGlCnvB,KAAKmvB,MAAM1tB,IAAI2H,EAAK+lB,OAEtBnvB,KAAKmB,OAASiI,EAAKjI,OACnBnB,KAAKivB,UAAY,CAAC,EAClB,IAAK,MAAMoB,KAAMjnB,EAAK6lB,UACpBjvB,KAAKivB,UAAUoB,GAAMjnB,EAAK6lB,UAAUoB,GAEtCrwB,KAAKkvB,eAAiB,CAAC,EACvB,IAAK,MAAMmB,KAAMjnB,EAAK8lB,eACpBlvB,KAAKkvB,eAAemB,GAAMjnB,EAAK8lB,eAAemB,GAEhDrwB,KAAK4I,UAAYQ,EAAKR,SACxB,CAGOhG,QACL,MAAM8pB,EAAU,IAAI3C,EAAW,GAC/B2C,EAAQyC,MAAQ,IAAI/hB,YAAYpN,KAAKmvB,OACrCzC,EAAQvrB,OAASnB,KAAKmB,OACtB,IAAK,MAAMkvB,KAAMrwB,KAAKivB,UACpBvC,EAAQuC,UAAUoB,GAAMrwB,KAAKivB,UAAUoB,GAEzC,IAAK,MAAMA,KAAMrwB,KAAKkvB,eACpBxC,EAAQwC,eAAemB,GAAMrwB,KAAKkvB,eAAemB,GAGnD,OADA3D,EAAQ9jB,UAAY5I,KAAK4I,UAClB8jB,CACT,CAEOV,mBACL,IAAK,IAAIhrB,EAAIhB,KAAKmB,OAAS,EAAGH,GAAK,IAAKA,EACtC,GAAgD,QAA3ChB,KAAKmvB,MArbE,EAqbInuB,EAAgB,GAC9B,OAAOA,GAAKhB,KAAKmvB,MAtbP,EAsbanuB,EAAgB,IAAiB,IAG5D,OAAO,CACT,CAEOgsB,cAAcsD,EAAiBxD,EAAgBF,EAAiBzrB,EAAgBovB,GACrF,MAAMC,EAAUF,EAAInB,MACpB,GAAIoB,EACF,IAAK,IAAI5N,EAAOxhB,EAAS,EAAGwhB,GAAQ,EAAGA,IAAQ,CAC7C,IAAK,IAAI3hB,EAAI,EAAGA,EAhcN,EAgcqBA,IAC7BhB,KAAKmvB,MAjcG,GAicIvC,EAAUjK,GAAoB3hB,GAAKwvB,EAjcvC,GAicgD1D,EAASnK,GAAoB3hB,GAElC,UAAjDwvB,EAncM,GAmcG1D,EAASnK,GAAoB,KACxC3iB,KAAKkvB,eAAetC,EAAUjK,GAAQ2N,EAAIpB,eAAepC,EAASnK,G,MAItE,IAAK,IAAIA,EAAO,EAAGA,EAAOxhB,EAAQwhB,IAAQ,CACxC,IAAK,IAAI3hB,EAAI,EAAGA,EAzcN,EAycqBA,IAC7BhB,KAAKmvB,MA1cG,GA0cIvC,EAAUjK,GAAoB3hB,GAAKwvB,EA1cvC,GA0cgD1D,EAASnK,GAAoB3hB,GAElC,UAAjDwvB,EA5cM,GA4cG1D,EAASnK,GAAoB,KACxC3iB,KAAKkvB,eAAetC,EAAUjK,GAAQ2N,EAAIpB,eAAepC,EAASnK,G,CAMxE,MAAM8N,EAAkB5B,OAAOqB,KAAKI,EAAIrB,WACxC,IAAK,IAAIjuB,EAAI,EAAGA,EAAIyvB,EAAgBtvB,OAAQH,IAAK,CAC/C,MAAMiC,EAAMye,SAAS+O,EAAgBzvB,GAAI,IACrCiC,GAAO6pB,IACT9sB,KAAKivB,UAAUhsB,EAAM6pB,EAASF,GAAW0D,EAAIrB,UAAUhsB,G,CAG7D,CAEOirB,kBAAkBH,GAAqB,EAAOC,EAAmB,EAAGC,EAAiBjuB,KAAKmB,QAC3F4sB,IACFE,EAAShtB,KAAKC,IAAI+sB,EAAQjuB,KAAKgsB,qBAEjC,IAAI1T,EAAS,GACb,KAAO0V,EAAWC,GAAQ,CACxB,MAAM3S,EAAUtb,KAAKmvB,MAleT,EAkeenB,EAAuB,GAC5CoB,EAAe,QAAV9T,EACXhD,GAAqB,QAAVgD,EAAsCtb,KAAKivB,UAAUjB,GAAY,GAAO,IAAAvT,qBAAoB2U,GAAM,EAAA/F,qBAC7G2E,GAAa1S,GAAW,IAAwB,C,CAElD,OAAOhD,CACT,EAjcF,c,cCoJA,SAAgB4U,EAA4BnT,EAAqB/Y,EAAWwG,GAE1E,GAAIxG,IAAM+Y,EAAM5Y,OAAS,EACvB,OAAO4Y,EAAM/Y,GAAGgrB,mBAKlB,MAAM0E,GAAe3W,EAAM/Y,GAAGua,WAAW/T,EAAO,IAAuC,IAAhCuS,EAAM/Y,GAAGkZ,SAAS1S,EAAO,GAC1EmpB,EAA2D,IAA7B5W,EAAM/Y,EAAI,GAAGkZ,SAAS,GAC1D,OAAIwW,GAAcC,EACTnpB,EAAO,EAETA,CACT,C,iNAvMA,wCAA6CuS,EAAkC6W,EAAiBrG,EAAiBsG,EAAyBpG,GAGxI,MAAMY,EAAqB,GAE3B,IAAK,IAAIhjB,EAAI,EAAGA,EAAI0R,EAAM5Y,OAAS,EAAGkH,IAAK,CAEzC,IAAIrH,EAAIqH,EACJoN,EAAWsE,EAAMxY,MAAMP,GAC3B,IAAKyU,EAAS7M,UACZ,SAIF,MAAMqjB,EAA6B,CAAClS,EAAMxY,IAAI8G,IAC9C,KAAOrH,EAAI+Y,EAAM5Y,QAAUsU,EAAS7M,WAClCqjB,EAAatqB,KAAK8T,GAClBA,EAAWsE,EAAMxY,MAAMP,GAKzB,GAAI6vB,GAAmBxoB,GAAKwoB,EAAkB7vB,EAAG,CAC/CqH,GAAK4jB,EAAa9qB,OAAS,EAC3B,Q,CAIF,IAAIwrB,EAAgB,EAChBC,EAAUM,EAA4BjB,EAAcU,EAAeiE,GACnE/D,EAAe,EACfC,EAAS,EACb,KAAOD,EAAeZ,EAAa9qB,QAAQ,CACzC,MAAM2vB,EAAuB5D,EAA4BjB,EAAcY,EAAc+D,GAC/EG,EAAoBD,EAAuBhE,EAC3CkE,EAAqBzG,EAAUqC,EAC/BG,EAAc9rB,KAAKC,IAAI6vB,EAAmBC,GAEhD/E,EAAaU,GAAeK,cAAcf,EAAaY,GAAeC,EAAQF,EAASG,GAAa,GAEpGH,GAAWG,EACPH,IAAYrC,IACdoC,IACAC,EAAU,GAEZE,GAAUC,EACND,IAAWgE,IACbjE,IACAC,EAAS,GAIK,IAAZF,GAAmC,IAAlBD,GAC2C,IAA1DV,EAAaU,EAAgB,GAAGzS,SAASqQ,EAAU,KACrD0B,EAAaU,GAAeK,cAAcf,EAAaU,EAAgB,GAAIpC,EAAU,EAAGqC,IAAW,GAAG,GAEtGX,EAAaU,EAAgB,GAAGQ,QAAQ5C,EAAU,EAAGE,G,CAM3DwB,EAAaU,GAAejQ,aAAakQ,EAASrC,EAASE,GAG3D,IAAIwG,EAAgB,EACpB,IAAK,IAAIjwB,EAAIirB,EAAa9qB,OAAS,EAAGH,EAAI,IACpCA,EAAI2rB,GAAwD,IAAvCV,EAAajrB,GAAGgrB,oBADEhrB,IAEzCiwB,IAMAA,EAAgB,IAClB5F,EAAS1pB,KAAK0G,EAAI4jB,EAAa9qB,OAAS8vB,GACxC5F,EAAS1pB,KAAKsvB,IAGhB5oB,GAAK4jB,EAAa9qB,OAAS,C,CAE7B,OAAOkqB,CACT,EAOA,uCAA4CtR,EAAkCsR,GAC5E,MAAMK,EAAmB,GAEzB,IAAIwF,EAAoB,EACpBC,EAAoB9F,EAAS6F,GAC7BE,EAAoB,EACxB,IAAK,IAAIpwB,EAAI,EAAGA,EAAI+Y,EAAM5Y,OAAQH,IAChC,GAAImwB,IAAsBnwB,EAAG,CAC3B,MAAMiwB,EAAgB5F,IAAW6F,GAGjCnX,EAAMha,gBAAgB6B,KAAK,CACzBJ,MAAOR,EAAIowB,EACX/uB,OAAQ4uB,IAGVjwB,GAAKiwB,EAAgB,EACrBG,GAAqBH,EACrBE,EAAoB9F,IAAW6F,E,MAE/BxF,EAAO/pB,KAAKX,GAGhB,MAAO,CACL0qB,SACAE,aAAcwF,EAElB,EAQA,sCAA2CrX,EAAkCsX,GAE3E,MAAMC,EAA+B,GACrC,IAAK,IAAItwB,EAAI,EAAGA,EAAIqwB,EAAUlwB,OAAQH,IACpCswB,EAAe3vB,KAAKoY,EAAMxY,IAAI8vB,EAAUrwB,KAI1C,IAAK,IAAIA,EAAI,EAAGA,EAAIswB,EAAenwB,OAAQH,IACzC+Y,EAAMtY,IAAIT,EAAGswB,EAAetwB,IAE9B+Y,EAAM5Y,OAASkwB,EAAUlwB,MAC3B,EAgBA,0CAA+C8qB,EAA4B2E,EAAiBrG,GAC1F,MAAMgH,EAA2B,GAC3BC,EAAcvF,EAAavT,KAAI,CAAC8H,EAAGxf,IAAMksB,EAA4BjB,EAAcjrB,EAAG4vB,KAAUa,QAAO,CAAC/Z,EAAGga,IAAMha,EAAIga,IAI3H,IAAI5E,EAAS,EACT6E,EAAU,EACVC,EAAiB,EACrB,KAAOA,EAAiBJ,GAAa,CACnC,GAAIA,EAAcI,EAAiBrH,EAAS,CAE1CgH,EAAe5vB,KAAK6vB,EAAcI,GAClC,K,CAEF9E,GAAUvC,EACV,MAAMsH,EAAmB3E,EAA4BjB,EAAc0F,EAASf,GACxE9D,EAAS+E,IACX/E,GAAU+E,EACVF,KAEF,MAAMG,EAA8D,IAA/C7F,EAAa0F,GAASzX,SAAS4S,EAAS,GACzDgF,GACFhF,IAEF,MAAMiF,EAAaD,EAAevH,EAAU,EAAIA,EAChDgH,EAAe5vB,KAAKowB,GACpBH,GAAkBG,C,CAGpB,OAAOR,CACT,EAEA,+B,oFCzMA,cACA,SAEA,SAMA,MAAaS,UAAkB,EAAAryB,WAW7BC,YACmBkN,EACAxI,GAEjBxE,QAHiB,KAAAgN,gBAAAA,EACA,KAAAxI,eAAAA,EARF,KAAA2tB,kBAAoBjyB,KAAKC,SAAS,IAAI,EAAAC,cACvC,KAAA+P,iBAAmBjQ,KAAKiyB,kBAAkB7xB,MAUxDJ,KAAK+J,QACL/J,KAAKC,SAASD,KAAK8M,gBAAgB1G,uBAAuB,cAAc,IAAMpG,KAAKmI,OAAOnI,KAAKsE,eAAekD,KAAMxH,KAAKsE,eAAemD,SACxIzH,KAAKC,SAASD,KAAK8M,gBAAgB1G,uBAAuB,gBAAgB,IAAMpG,KAAK6pB,kBACvF,CAEO9f,QACL/J,KAAKkyB,QAAU,IAAI,EAAAC,QAAO,EAAMnyB,KAAK8M,gBAAiB9M,KAAKsE,gBAC3DtE,KAAKkyB,QAAQ7H,mBAIbrqB,KAAKoyB,KAAO,IAAI,EAAAD,QAAO,EAAOnyB,KAAK8M,gBAAiB9M,KAAKsE,gBACzDtE,KAAKgQ,cAAgBhQ,KAAKkyB,QAC1BlyB,KAAKiyB,kBAAkBrwB,KAAK,CAC1BsO,aAAclQ,KAAKkyB,QACnBG,eAAgBryB,KAAKoyB,OAGvBpyB,KAAK6pB,eACP,CAKW/K,UACT,OAAO9e,KAAKoyB,IACd,CAKWvT,aACT,OAAO7e,KAAKgQ,aACd,CAKWsiB,aACT,OAAOtyB,KAAKkyB,OACd,CAKO3T,uBACDve,KAAKgQ,gBAAkBhQ,KAAKkyB,UAGhClyB,KAAKkyB,QAAQ9pB,EAAIpI,KAAKoyB,KAAKhqB,EAC3BpI,KAAKkyB,QAAQ7pB,EAAIrI,KAAKoyB,KAAK/pB,EAI3BrI,KAAKoyB,KAAK7D,kBACVvuB,KAAKoyB,KAAKnN,QACVjlB,KAAKgQ,cAAgBhQ,KAAKkyB,QAC1BlyB,KAAKiyB,kBAAkBrwB,KAAK,CAC1BsO,aAAclQ,KAAKkyB,QACnBG,eAAgBryB,KAAKoyB,OAEzB,CAKOhU,kBAAkBkM,GACnBtqB,KAAKgQ,gBAAkBhQ,KAAKoyB,OAKhCpyB,KAAKoyB,KAAK/H,iBAAiBC,GAC3BtqB,KAAKoyB,KAAKhqB,EAAIpI,KAAKkyB,QAAQ9pB,EAC3BpI,KAAKoyB,KAAK/pB,EAAIrI,KAAKkyB,QAAQ7pB,EAC3BrI,KAAKgQ,cAAgBhQ,KAAKoyB,KAC1BpyB,KAAKiyB,kBAAkBrwB,KAAK,CAC1BsO,aAAclQ,KAAKoyB,KACnBC,eAAgBryB,KAAKkyB,UAEzB,CAOO/pB,OAAOoiB,EAAiBC,GAC7BxqB,KAAKkyB,QAAQ/pB,OAAOoiB,EAASC,GAC7BxqB,KAAKoyB,KAAKjqB,OAAOoiB,EAASC,GAC1BxqB,KAAK6pB,cAAcU,EACrB,CAMOV,cAAc7oB,GACnBhB,KAAKkyB,QAAQrI,cAAc7oB,GAC3BhB,KAAKoyB,KAAKvI,cAAc7oB,EAC1B,EApHF,a,mFCVA,eACA,SACA,SAKA,MAAa0M,UAAiB,EAAA8R,cAA9B,c,oBAQS,KAAAlE,QAAU,EACV,KAAAlB,GAAK,EACL,KAAAC,GAAK,EACL,KAAAjC,SAA2B,IAAI,EAAAyO,cAC/B,KAAA+I,aAAe,EAoExB,CA9ES9I,oBAAoBplB,GACzB,MAAM6wB,EAAM,IAAI7kB,EAEhB,OADA6kB,EAAIC,gBAAgB9wB,GACb6wB,CACT,CAQOnX,aACL,OAAsB,QAAfpb,KAAKsb,OACd,CAEOpB,WACL,OAAOla,KAAKsb,SAAW,EACzB,CAEOD,WACL,OAAmB,QAAfrb,KAAKsb,QACAtb,KAAK4vB,aAEK,QAAf5vB,KAAKsb,SACA,IAAAb,qBAAmC,QAAfza,KAAKsb,SAE3B,EACT,CAOOJ,UACL,OAAQlb,KAAKob,aACTpb,KAAK4vB,aAAa7W,WAAW/Y,KAAK4vB,aAAazuB,OAAS,GACzC,QAAfnB,KAAKsb,OACX,CAEOkX,gBAAgB9wB,GACrB1B,KAAKoa,GAAK1Y,EAAM,EAAA2tB,sBAChBrvB,KAAKqa,GAAK,EACV,IAAIoY,GAAW,EAEf,GAAI/wB,EAAM,EAAA4tB,sBAAsBnuB,OAAS,EACvCsxB,GAAW,OAER,GAA2C,IAAvC/wB,EAAM,EAAA4tB,sBAAsBnuB,OAAc,CACjD,MAAMwP,EAAOjP,EAAM,EAAA4tB,sBAAsBvW,WAAW,GAGpD,GAAI,OAAUpI,GAAQA,GAAQ,MAAQ,CACpC,MAAMsQ,EAASvf,EAAM,EAAA4tB,sBAAsBvW,WAAW,GAClD,OAAUkI,GAAUA,GAAU,MAChCjhB,KAAKsb,QAA6B,MAAjB3K,EAAO,OAAkBsQ,EAAS,MAAS,MAAYvf,EAAM,EAAA6tB,wBAA0B,GAGxGkD,GAAW,C,MAIbA,GAAW,C,MAIbzyB,KAAKsb,QAAU5Z,EAAM,EAAA4tB,sBAAsBvW,WAAW,GAAMrX,EAAM,EAAA6tB,wBAA0B,GAE1FkD,IACFzyB,KAAK4vB,aAAeluB,EAAM,EAAA4tB,sBAC1BtvB,KAAKsb,QAAU,QAA4B5Z,EAAM,EAAA6tB,wBAA0B,GAE/E,CAEOmD,gBACL,MAAO,CAAC1yB,KAAKoa,GAAIpa,KAAKqb,WAAYrb,KAAKka,WAAYla,KAAKkb,UAC1D,EA/EF,Y,0UCRa,EAAAyX,cAAgB,EAChB,EAAAC,aAAe,IAAa,EAAAD,eAAiB,EAC7C,EAAAE,YAAc,EAEd,EAAAxD,qBAAuB,EACvB,EAAAC,qBAAuB,EACvB,EAAAC,sBAAwB,EACxB,EAAA5I,qBAAuB,EAOvB,EAAAwC,eAAiB,GACjB,EAAApO,gBAAkB,EAClB,EAAAD,eAAiB,EAOjB,EAAAuO,qBAAuB,IACvB,EAAAC,sBAAwB,EACxB,EAAA1C,qBAAuB,E,iFCzBpC,eACA,SAGA,MAAa8H,EAYX9uB,YACSwJ,GAAA,KAAAA,KAAAA,EAVF,KAAA0pB,YAAsB,EACrB,KAAAzP,aAA8B,GAE9B,KAAA0P,IAAcrE,EAAOsE,UAGZ,KAAAC,WAAajzB,KAAKC,SAAS,IAAI,EAAAC,cAChC,KAAAyuB,UAAY3uB,KAAKizB,WAAW7yB,KAK5C,CARWkJ,SAAe,OAAOtJ,KAAK+yB,GAAK,CAUpC1rB,UACDrH,KAAK8yB,aAGT9yB,KAAK8yB,YAAa,EAClB9yB,KAAKoJ,MAAQ,EAEbpJ,KAAKizB,WAAWrxB,QAChB,IAAAwhB,cAAapjB,KAAKqjB,cAClBrjB,KAAKqjB,aAAaliB,OAAS,EAC7B,CAEOlB,SAAgCwK,GAErC,OADAzK,KAAKqjB,aAAa1hB,KAAK8I,GAChBA,CACT,EAhCF,WACiB,EAAAuoB,QAAU,C,mGCEd,EAAAjc,SAAoD,CAAC,EAKrD,EAAA8G,gBAAwC,EAAA9G,SAAY,EAYjE,EAAAA,SAAA,GAAgB,CACd,IAAK,IACL,EAAK,IACL,EAAK,IACL,EAAK,IACL,EAAK,IACL,EAAK,IACL,EAAK,IACL,EAAK,IACL,EAAK,IACL,EAAK,IACL,EAAK,IACL,EAAK,IACL,EAAK,IACL,EAAK,IACL,EAAK,IACL,EAAK,IACL,EAAK,IACL,EAAK,IACL,EAAK,IACL,EAAK,IACL,EAAK,IACL,EAAK,IACL,EAAK,IACL,EAAK,IACL,EAAK,IACL,EAAK,IACL,EAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,KAQP,EAAAA,SAAA,EAAgB,CACd,IAAK,KAOP,EAAAA,SAAA,OAAgBzV,EAOhB,EAAAyV,SAAA,GAAgB,CACd,IAAK,IACL,IAAK,IACL,IAAK,KACL,KAAM,IACN,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,KAQP,EAAAA,SAAAmc,EACA,EAAAnc,SAAA,GAAgB,CACd,IAAK,IACL,KAAM,IACN,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,KAQP,EAAAA,SAAA,EAAgB,CACd,IAAK,IACL,IAAK,IACL,IAAK,IACL,KAAM,IACN,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,KAQP,EAAAA,SAAA,EAAgB,CACd,IAAK,IACL,IAAK,IACL,KAAM,IACN,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,KAQP,EAAAA,SAAA,EAAgB,CACd,IAAK,IACL,IAAK,IACL,KAAM,IACN,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,KAQP,EAAAA,SAAA,EAAgB,CACd,IAAK,IACL,IAAK,IACL,IAAK,IACL,KAAM,IACN,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,KAQP,EAAAA,SAAA,EACA,EAAAA,SAAA,GAAgB,CACd,IAAK,IACL,IAAK,IACL,KAAM,IACN,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,KAQP,EAAAA,SAAA,EAAgB,CACd,IAAK,IACL,IAAK,IACL,IAAK,IACL,KAAM,IACN,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,KAQP,EAAAA,SAAA,EACA,EAAAA,SAAA,GAAgB,CACd,IAAK,IACL,IAAK,IACL,KAAM,IACN,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,KAQP,EAAAA,SAAA,KAAgB,CACd,IAAK,IACL,IAAK,IACL,IAAK,IACL,KAAM,IACN,IAAK,IACL,IAAK,IAEL,EAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,I,cCrPP,IAAiB1C,EA2EAiB,E,+EA3EjB,SAAiBjB,GAEF,EAAA8e,IAAM,KAEN,EAAAC,IAAM,IAEN,EAAAC,IAAM,IAEN,EAAAC,IAAM,IAEN,EAAAC,IAAM,IAEN,EAAAC,IAAM,IAEN,EAAAC,IAAM,IAEN,EAAAnf,IAAM,IAEN,EAAAQ,GAAM,KAEN,EAAAE,GAAM,KAEN,EAAAR,GAAM,KAEN,EAAAE,GAAM,KAEN,EAAAC,GAAM,KAEN,EAAAC,GAAM,KAEN,EAAAM,GAAM,IAEN,EAAAE,GAAM,IAEN,EAAAse,IAAM,IAEN,EAAAC,IAAM,IAEN,EAAAC,IAAM,IAEN,EAAAC,IAAM,IAEN,EAAAC,IAAM,IAEN,EAAAC,IAAM,IAEN,EAAAC,IAAM,IAEN,EAAAC,IAAM,IAEN,EAAAC,IAAM,IAEN,EAAAC,GAAM,IAEN,EAAAC,IAAM,IAEN,EAAA7W,IAAM,IAEN,EAAA8W,GAAM,IAEN,EAAAC,GAAM,IAEN,EAAAC,GAAM,IAEN,EAAAC,GAAM,IAEN,EAAAC,GAAM,IAEN,EAAAC,IAAM,GACpB,CArED,CAAiBrgB,EAAA,EAAAA,KAAA,EAAAA,GAAE,MA2EFiB,EAAA,EAAAA,KAAA,EAAAA,GAAE,KAEJqf,IAAM,IAEN,EAAAC,IAAM,IAEN,EAAAC,IAAM,IAEN,EAAAC,IAAM,IAEN,EAAAvf,IAAM,IAEN,EAAAC,IAAM,IAEN,EAAAuf,IAAM,IAEN,EAAAC,IAAM,IAEN,EAAAtf,IAAM,IAEN,EAAAuf,IAAM,IAEN,EAAAC,IAAM,IAEN,EAAAC,IAAM,IAEN,EAAAC,IAAM,IAEN,EAAAC,GAAK,IAEL,EAAAC,IAAM,IAEN,EAAAC,IAAM,IAEN,EAAAC,IAAM,IAEN,EAAAC,IAAM,IAEN,EAAAC,IAAM,IAEN,EAAAC,IAAM,IAEN,EAAAC,IAAM,IAEN,EAAAC,GAAK,IAEL,EAAAC,IAAM,IAEN,EAAAC,IAAM,IAEN,EAAAC,IAAM,IAEN,EAAAC,KAAO,IAEP,EAAAC,IAAM,IAEN,EAAAC,IAAM,IAEN,EAAAC,GAAK,IAEL,EAAAC,IAAM,IAEN,EAAAC,GAAK,IAEL,EAAAC,IAAM,KAEJ,EAAAC,aAAA,EAAAA,WAAU,KACZJ,GAAK,GAAG/hB,EAAGkJ,O,0IC3I1B,+BAAoCsS,GAClC,OAAIA,EAAY,OACdA,GAAa,MACNlX,OAAOC,aAAiC,OAAnBiX,GAAa,KAAgBlX,OAAOC,aAAciX,EAAY,KAAS,QAE9FlX,OAAOC,aAAaiX,EAC7B,EAOA,yBAA8B7oB,EAAmB9E,EAAgB,EAAG+O,EAAcjK,EAAK7F,QACrF,IAAImX,EAAS,GACb,IAAK,IAAItX,EAAIkB,EAAOlB,EAAIiQ,IAAOjQ,EAAG,CAChC,IAAIy1B,EAAYzvB,EAAKhG,GACjBy1B,EAAY,OAMdA,GAAa,MACbne,GAAUK,OAAOC,aAAiC,OAAnB6d,GAAa,KAAgB9d,OAAOC,aAAc6d,EAAY,KAAS,QAEtGne,GAAUK,OAAOC,aAAa6d,E,CAGlC,OAAOne,CACT,EAMA,oCACU,KAAAoe,SAAmB,CAkE7B,CA7DSzR,QACLjlB,KAAK02B,SAAW,CAClB,CAUOxd,OAAOyd,EAAeC,GAC3B,MAAMz1B,EAASw1B,EAAMx1B,OAErB,IAAKA,EACH,OAAO,EAGT,IAAI01B,EAAO,EACPC,EAAW,EAGf,GAAI92B,KAAK02B,SAAU,CACjB,MAAMzV,EAAS0V,EAAM5d,WAAW+d,KAC5B,OAAU7V,GAAUA,GAAU,MAChC2V,EAAOC,KAAqC,MAA1B72B,KAAK02B,SAAW,OAAkBzV,EAAS,MAAS,OAGtE2V,EAAOC,KAAU72B,KAAK02B,SACtBE,EAAOC,KAAU5V,GAEnBjhB,KAAK02B,SAAW,C,CAGlB,IAAK,IAAI11B,EAAI81B,EAAU91B,EAAIG,IAAUH,EAAG,CACtC,MAAM2P,EAAOgmB,EAAM5d,WAAW/X,GAE9B,GAAI,OAAU2P,GAAQA,GAAQ,MAA9B,CACE,KAAM3P,GAAKG,EAET,OADAnB,KAAK02B,SAAW/lB,EACTkmB,EAET,MAAM5V,EAAS0V,EAAM5d,WAAW/X,GAC5B,OAAUigB,GAAUA,GAAU,MAChC2V,EAAOC,KAA4B,MAAjBlmB,EAAO,OAAkBsQ,EAAS,MAAS,OAG7D2V,EAAOC,KAAUlmB,EACjBimB,EAAOC,KAAU5V,E,MAIR,QAATtQ,IAIJimB,EAAOC,KAAUlmB,E,CAEnB,OAAOkmB,CACT,GAMF,kCACS,KAAAE,QAAsB,IAAIC,WAAW,EAgO9C,CA3NS/R,QACLjlB,KAAK+2B,QAAQna,KAAK,EACpB,CAUO1D,OAAOyd,EAAmBC,GAC/B,MAAMz1B,EAASw1B,EAAMx1B,OAErB,IAAKA,EACH,OAAO,EAGT,IACI81B,EACAC,EACAC,EACAC,EAJAP,EAAO,EAKPJ,EAAY,EACZK,EAAW,EAGf,GAAI92B,KAAK+2B,QAAQ,GAAI,CACnB,IAAIM,GAAiB,EACjBjI,EAAKpvB,KAAK+2B,QAAQ,GACtB3H,GAAyB,MAAV,IAALA,GAAwB,GAAyB,MAAV,IAALA,GAAwB,GAAO,EAC3E,IACIkI,EADAhd,EAAM,EAEV,MAAQgd,EAA4B,GAAtBt3B,KAAK+2B,UAAUzc,KAAgBA,EAAM,GACjD8U,IAAO,EACPA,GAAMkI,EAGR,MAAM3V,EAAsC,MAAV,IAAlB3hB,KAAK+2B,QAAQ,IAAwB,EAAmC,MAAV,IAAlB/2B,KAAK+2B,QAAQ,IAAwB,EAAI,EAC/FQ,EAAU5V,EAAOrH,EACvB,KAAOwc,EAAWS,GAAS,CACzB,GAAIT,GAAY31B,EACd,OAAO,EAGT,GADAm2B,EAAMX,EAAMG,KACS,MAAV,IAANQ,GAAsB,CAEzBR,IACAO,GAAiB,EACjB,K,CAGAr3B,KAAK+2B,QAAQzc,KAASgd,EACtBlI,IAAO,EACPA,GAAY,GAANkI,C,CAGLD,IAEU,IAAT1V,EACEyN,EAAK,IAEP0H,IAEAF,EAAOC,KAAUzH,EAED,IAATzN,EACLyN,EAAK,MAAWA,GAAM,OAAUA,GAAM,OAAkB,QAAPA,IAGnDwH,EAAOC,KAAUzH,GAGfA,EAAK,OAAYA,EAAK,UAGxBwH,EAAOC,KAAUzH,IAIvBpvB,KAAK+2B,QAAQna,KAAK,E,CAIpB,MAAM4a,EAAWr2B,EAAS,EAC1B,IAAIH,EAAI81B,EACR,KAAO91B,EAAIG,GAAQ,CAejB,SAAOH,EAAIw2B,IACiB,KAApBP,EAAQN,EAAM31B,KACU,KAAxBk2B,EAAQP,EAAM31B,EAAI,KACM,KAAxBm2B,EAAQR,EAAM31B,EAAI,KACM,KAAxBo2B,EAAQT,EAAM31B,EAAI,MAExB41B,EAAOC,KAAUI,EACjBL,EAAOC,KAAUK,EACjBN,EAAOC,KAAUM,EACjBP,EAAOC,KAAUO,EACjBp2B,GAAK,EAOP,GAHAi2B,EAAQN,EAAM31B,KAGVi2B,EAAQ,IACVL,EAAOC,KAAUI,OAGZ,GAAuB,MAAV,IAARA,GAAwB,CAClC,GAAIj2B,GAAKG,EAEP,OADAnB,KAAK+2B,QAAQ,GAAKE,EACXJ,EAGT,GADAK,EAAQP,EAAM31B,KACS,MAAV,IAARk2B,GAAwB,CAE3Bl2B,IACA,Q,CAGF,GADAy1B,GAAqB,GAARQ,IAAiB,EAAa,GAARC,EAC/BT,EAAY,IAAM,CAEpBz1B,IACA,Q,CAEF41B,EAAOC,KAAUJ,C,MAGZ,GAAuB,MAAV,IAARQ,GAAwB,CAClC,GAAIj2B,GAAKG,EAEP,OADAnB,KAAK+2B,QAAQ,GAAKE,EACXJ,EAGT,GADAK,EAAQP,EAAM31B,KACS,MAAV,IAARk2B,GAAwB,CAE3Bl2B,IACA,Q,CAEF,GAAIA,GAAKG,EAGP,OAFAnB,KAAK+2B,QAAQ,GAAKE,EAClBj3B,KAAK+2B,QAAQ,GAAKG,EACXL,EAGT,GADAM,EAAQR,EAAM31B,KACS,MAAV,IAARm2B,GAAwB,CAE3Bn2B,IACA,Q,CAGF,GADAy1B,GAAqB,GAARQ,IAAiB,IAAc,GAARC,IAAiB,EAAa,GAARC,EACtDV,EAAY,MAAWA,GAAa,OAAUA,GAAa,OAAyB,QAAdA,EAExE,SAEFG,EAAOC,KAAUJ,C,MAGZ,GAAuB,MAAV,IAARQ,GAAwB,CAClC,GAAIj2B,GAAKG,EAEP,OADAnB,KAAK+2B,QAAQ,GAAKE,EACXJ,EAGT,GADAK,EAAQP,EAAM31B,KACS,MAAV,IAARk2B,GAAwB,CAE3Bl2B,IACA,Q,CAEF,GAAIA,GAAKG,EAGP,OAFAnB,KAAK+2B,QAAQ,GAAKE,EAClBj3B,KAAK+2B,QAAQ,GAAKG,EACXL,EAGT,GADAM,EAAQR,EAAM31B,KACS,MAAV,IAARm2B,GAAwB,CAE3Bn2B,IACA,Q,CAEF,GAAIA,GAAKG,EAIP,OAHAnB,KAAK+2B,QAAQ,GAAKE,EAClBj3B,KAAK+2B,QAAQ,GAAKG,EAClBl3B,KAAK+2B,QAAQ,GAAKI,EACXN,EAGT,GADAO,EAAQT,EAAM31B,KACS,MAAV,IAARo2B,GAAwB,CAE3Bp2B,IACA,Q,CAGF,GADAy1B,GAAqB,EAARQ,IAAiB,IAAc,GAARC,IAAiB,IAAc,GAARC,IAAiB,EAAa,GAARC,EAC7EX,EAAY,OAAYA,EAAY,QAEtC,SAEFG,EAAOC,KAAUJ,C,EAKrB,OAAOI,CACT,E,kFChVF,MAAMY,EAAgB,CACpB,CAAC,IAAQ,KAAS,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAC7C,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAC7C,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAC7C,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAC7C,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAC7C,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAC7C,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAC7C,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAC7C,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAC7C,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAC7C,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAC7C,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAC7C,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAC7C,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAC7C,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAC7C,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAC7C,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAC7C,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAC7C,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAC7C,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAC7C,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAC7C,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAC7C,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAC7C,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAC7C,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAC7C,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAC7C,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAC7C,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAC7C,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAC7C,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAC7C,CAAC,KAAQ,MAAS,CAAC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","sources":["webpack://xterm/./src/common/CircularList.ts","webpack://xterm/./src/common/Clone.ts","webpack://xterm/./src/common/CoreTerminal.ts","webpack://xterm/./src/common/EventEmitter.ts","webpack://xterm/./src/common/InputHandler.ts","webpack://xterm/./src/common/Lifecycle.ts","webpack://xterm/./src/common/Platform.ts","webpack://xterm/./src/common/TaskQueue.ts","webpack://xterm/./src/common/WindowsMode.ts","webpack://xterm/./src/common/buffer/AttributeData.ts","webpack://xterm/./src/common/buffer/Buffer.ts","webpack://xterm/./src/common/buffer/BufferLine.ts","webpack://xterm/./src/common/buffer/BufferReflow.ts","webpack://xterm/./src/common/buffer/BufferSet.ts","webpack://xterm/./src/common/buffer/CellData.ts","webpack://xterm/./src/common/buffer/Constants.ts","webpack://xterm/./src/common/buffer/Marker.ts","webpack://xterm/./src/common/data/Charsets.ts","webpack://xterm/./src/common/data/EscapeSequences.ts","webpack://xterm/./src/common/input/TextDecoder.ts","webpack://xterm/./src/common/input/UnicodeV6.ts","webpack://xterm/./src/common/input/WriteBuffer.ts","webpack://xterm/./src/common/input/XParseColor.ts","webpack://xterm/./src/common/parser/Constants.ts","webpack://xterm/./src/common/parser/DcsParser.ts","webpack://xterm/./src/common/parser/EscapeSequenceParser.ts","webpack://xterm/./src/common/parser/OscParser.ts","webpack://xterm/./src/common/parser/Params.ts","webpack://xterm/./src/common/public/AddonManager.ts","webpack://xterm/./src/common/public/BufferApiView.ts","webpack://xterm/./src/common/public/BufferLineApiView.ts","webpack://xterm/./src/common/public/BufferNamespaceApi.ts","webpack://xterm/./src/common/public/ParserApi.ts","webpack://xterm/./src/common/public/UnicodeApi.ts","webpack://xterm/./src/common/services/BufferService.ts","webpack://xterm/./src/common/services/CharsetService.ts","webpack://xterm/./src/common/services/CoreMouseService.ts","webpack://xterm/./src/common/services/CoreService.ts","webpack://xterm/./src/common/services/InstantiationService.ts","webpack://xterm/./src/common/services/LogService.ts","webpack://xterm/./src/common/services/OptionsService.ts","webpack://xterm/./src/common/services/OscLinkService.ts","webpack://xterm/./src/common/services/ServiceRegistry.ts","webpack://xterm/./src/common/services/Services.ts","webpack://xterm/./src/common/services/UnicodeService.ts","webpack://xterm/./src/headless/Terminal.ts","webpack://xterm/webpack/bootstrap","webpack://xterm/./src/headless/public/Terminal.ts"],"sourcesContent":["/**\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICircularList } from 'common/Types';\nimport { EventEmitter } from 'common/EventEmitter';\nimport { Disposable } from 'common/Lifecycle';\n\nexport interface IInsertEvent {\n  index: number;\n  amount: number;\n}\n\nexport interface IDeleteEvent {\n  index: number;\n  amount: number;\n}\n\n/**\n * Represents a circular list; a list with a maximum size that wraps around when push is called,\n * overriding values at the start of the list.\n */\nexport class CircularList<T> extends Disposable implements ICircularList<T> {\n  protected _array: (T | undefined)[];\n  private _startIndex: number;\n  private _length: number;\n\n  public readonly onDeleteEmitter = this.register(new EventEmitter<IDeleteEvent>());\n  public readonly onDelete = this.onDeleteEmitter.event;\n  public readonly onInsertEmitter = this.register(new EventEmitter<IInsertEvent>());\n  public readonly onInsert = this.onInsertEmitter.event;\n  public readonly onTrimEmitter = this.register(new EventEmitter<number>());\n  public readonly onTrim = this.onTrimEmitter.event;\n\n  constructor(\n    private _maxLength: number\n  ) {\n    super();\n    this._array = new Array<T>(this._maxLength);\n    this._startIndex = 0;\n    this._length = 0;\n  }\n\n  public get maxLength(): number {\n    return this._maxLength;\n  }\n\n  public set maxLength(newMaxLength: number) {\n    // There was no change in maxLength, return early.\n    if (this._maxLength === newMaxLength) {\n      return;\n    }\n\n    // Reconstruct array, starting at index 0. Only transfer values from the\n    // indexes 0 to length.\n    const newArray = new Array<T | undefined>(newMaxLength);\n    for (let i = 0; i < Math.min(newMaxLength, this.length); i++) {\n      newArray[i] = this._array[this._getCyclicIndex(i)];\n    }\n    this._array = newArray;\n    this._maxLength = newMaxLength;\n    this._startIndex = 0;\n  }\n\n  public get length(): number {\n    return this._length;\n  }\n\n  public set length(newLength: number) {\n    if (newLength > this._length) {\n      for (let i = this._length; i < newLength; i++) {\n        this._array[i] = undefined;\n      }\n    }\n    this._length = newLength;\n  }\n\n  /**\n   * Gets the value at an index.\n   *\n   * Note that for performance reasons there is no bounds checking here, the index reference is\n   * circular so this should always return a value and never throw.\n   * @param index The index of the value to get.\n   * @returns The value corresponding to the index.\n   */\n  public get(index: number): T | undefined {\n    return this._array[this._getCyclicIndex(index)];\n  }\n\n  /**\n   * Sets the value at an index.\n   *\n   * Note that for performance reasons there is no bounds checking here, the index reference is\n   * circular so this should always return a value and never throw.\n   * @param index The index to set.\n   * @param value The value to set.\n   */\n  public set(index: number, value: T | undefined): void {\n    this._array[this._getCyclicIndex(index)] = value;\n  }\n\n  /**\n   * Pushes a new value onto the list, wrapping around to the start of the array, overriding index 0\n   * if the maximum length is reached.\n   * @param value The value to push onto the list.\n   */\n  public push(value: T): void {\n    this._array[this._getCyclicIndex(this._length)] = value;\n    if (this._length === this._maxLength) {\n      this._startIndex = ++this._startIndex % this._maxLength;\n      this.onTrimEmitter.fire(1);\n    } else {\n      this._length++;\n    }\n  }\n\n  /**\n   * Advance ringbuffer index and return current element for recycling.\n   * Note: The buffer must be full for this method to work.\n   * @throws When the buffer is not full.\n   */\n  public recycle(): T {\n    if (this._length !== this._maxLength) {\n      throw new Error('Can only recycle when the buffer is full');\n    }\n    this._startIndex = ++this._startIndex % this._maxLength;\n    this.onTrimEmitter.fire(1);\n    return this._array[this._getCyclicIndex(this._length - 1)]!;\n  }\n\n  /**\n   * Ringbuffer is at max length.\n   */\n  public get isFull(): boolean {\n    return this._length === this._maxLength;\n  }\n\n  /**\n   * Removes and returns the last value on the list.\n   * @returns The popped value.\n   */\n  public pop(): T | undefined {\n    return this._array[this._getCyclicIndex(this._length-- - 1)];\n  }\n\n  /**\n   * Deletes and/or inserts items at a particular index (in that order). Unlike\n   * Array.prototype.splice, this operation does not return the deleted items as a new array in\n   * order to save creating a new array. Note that this operation may shift all values in the list\n   * in the worst case.\n   * @param start The index to delete and/or insert.\n   * @param deleteCount The number of elements to delete.\n   * @param items The items to insert.\n   */\n  public splice(start: number, deleteCount: number, ...items: T[]): void {\n    // Delete items\n    if (deleteCount) {\n      for (let i = start; i < this._length - deleteCount; i++) {\n        this._array[this._getCyclicIndex(i)] = this._array[this._getCyclicIndex(i + deleteCount)];\n      }\n      this._length -= deleteCount;\n      this.onDeleteEmitter.fire({ index: start, amount: deleteCount });\n    }\n\n    // Add items\n    for (let i = this._length - 1; i >= start; i--) {\n      this._array[this._getCyclicIndex(i + items.length)] = this._array[this._getCyclicIndex(i)];\n    }\n    for (let i = 0; i < items.length; i++) {\n      this._array[this._getCyclicIndex(start + i)] = items[i];\n    }\n    if (items.length) {\n      this.onInsertEmitter.fire({ index: start, amount: items.length });\n    }\n\n    // Adjust length as needed\n    if (this._length + items.length > this._maxLength) {\n      const countToTrim = (this._length + items.length) - this._maxLength;\n      this._startIndex += countToTrim;\n      this._length = this._maxLength;\n      this.onTrimEmitter.fire(countToTrim);\n    } else {\n      this._length += items.length;\n    }\n  }\n\n  /**\n   * Trims a number of items from the start of the list.\n   * @param count The number of items to remove.\n   */\n  public trimStart(count: number): void {\n    if (count > this._length) {\n      count = this._length;\n    }\n    this._startIndex += count;\n    this._length -= count;\n    this.onTrimEmitter.fire(count);\n  }\n\n  public shiftElements(start: number, count: number, offset: number): void {\n    if (count <= 0) {\n      return;\n    }\n    if (start < 0 || start >= this._length) {\n      throw new Error('start argument out of range');\n    }\n    if (start + offset < 0) {\n      throw new Error('Cannot shift elements in list beyond index 0');\n    }\n\n    if (offset > 0) {\n      for (let i = count - 1; i >= 0; i--) {\n        this.set(start + i + offset, this.get(start + i));\n      }\n      const expandListBy = (start + count + offset) - this._length;\n      if (expandListBy > 0) {\n        this._length += expandListBy;\n        while (this._length > this._maxLength) {\n          this._length--;\n          this._startIndex++;\n          this.onTrimEmitter.fire(1);\n        }\n      }\n    } else {\n      for (let i = 0; i < count; i++) {\n        this.set(start + i + offset, this.get(start + i));\n      }\n    }\n  }\n\n  /**\n   * Gets the cyclic index for the specified regular index. The cyclic index can then be used on the\n   * backing array to get the element associated with the regular index.\n   * @param index The regular index.\n   * @returns The cyclic index.\n   */\n  private _getCyclicIndex(index: number): number {\n    return (this._startIndex + index) % this._maxLength;\n  }\n}\n","/**\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\n/*\n * A simple utility for cloning values\n */\nexport function clone<T>(val: T, depth: number = 5): T {\n  if (typeof val !== 'object') {\n    return val;\n  }\n\n  // If we're cloning an array, use an array as the base, otherwise use an object\n  const clonedObject: any = Array.isArray(val) ? [] : {};\n\n  for (const key in val) {\n    // Recursively clone eack item unless we're at the maximum depth\n    clonedObject[key] = depth <= 1 ? val[key] : (val[key] && clone(val[key], depth - 1));\n  }\n\n  return clonedObject as T;\n}\n","/**\n * Copyright (c) 2014-2020 The xterm.js authors. All rights reserved.\n * Copyright (c) 2012-2013, Christopher Jeffrey (MIT License)\n * @license MIT\n *\n * Originally forked from (with the author's permission):\n *   Fabrice Bellard's javascript vt100 for jslinux:\n *   http://bellard.org/jslinux/\n *   Copyright (c) 2011 Fabrice Bellard\n *   The original design remains. The terminal itself\n *   has been extended to include xterm CSI codes, among\n *   other features.\n *\n * Terminal Emulation References:\n *   http://vt100.net/\n *   http://invisible-island.net/xterm/ctlseqs/ctlseqs.txt\n *   http://invisible-island.net/xterm/ctlseqs/ctlseqs.html\n *   http://invisible-island.net/vttest/\n *   http://www.inwap.com/pdp10/ansicode.txt\n *   http://linux.die.net/man/4/console_codes\n *   http://linux.die.net/man/7/urxvt\n */\n\nimport { Disposable, toDisposable } from 'common/Lifecycle';\nimport { IInstantiationService, IOptionsService, IBufferService, ILogService, ICharsetService, ICoreService, ICoreMouseService, IUnicodeService, LogLevelEnum, ITerminalOptions, IOscLinkService } from 'common/services/Services';\nimport { InstantiationService } from 'common/services/InstantiationService';\nimport { LogService } from 'common/services/LogService';\nimport { BufferService, MINIMUM_COLS, MINIMUM_ROWS } from 'common/services/BufferService';\nimport { OptionsService } from 'common/services/OptionsService';\nimport { IDisposable, IAttributeData, ICoreTerminal, IScrollEvent, ScrollSource } from 'common/Types';\nimport { CoreService } from 'common/services/CoreService';\nimport { EventEmitter, IEvent, forwardEvent } from 'common/EventEmitter';\nimport { CoreMouseService } from 'common/services/CoreMouseService';\nimport { UnicodeService } from 'common/services/UnicodeService';\nimport { CharsetService } from 'common/services/CharsetService';\nimport { updateWindowsModeWrappedState } from 'common/WindowsMode';\nimport { IFunctionIdentifier, IParams } from 'common/parser/Types';\nimport { IBufferSet } from 'common/buffer/Types';\nimport { InputHandler } from 'common/InputHandler';\nimport { WriteBuffer } from 'common/input/WriteBuffer';\nimport { OscLinkService } from 'common/services/OscLinkService';\n\n// Only trigger this warning a single time per session\nlet hasWriteSyncWarnHappened = false;\n\nexport abstract class CoreTerminal extends Disposable implements ICoreTerminal {\n  protected readonly _instantiationService: IInstantiationService;\n  protected readonly _bufferService: IBufferService;\n  protected readonly _logService: ILogService;\n  protected readonly _charsetService: ICharsetService;\n  protected readonly _oscLinkService: IOscLinkService;\n\n  public readonly coreMouseService: ICoreMouseService;\n  public readonly coreService: ICoreService;\n  public readonly unicodeService: IUnicodeService;\n  public readonly optionsService: IOptionsService;\n\n  protected _inputHandler: InputHandler;\n  private _writeBuffer: WriteBuffer;\n  private _windowsMode: IDisposable | undefined;\n\n  private readonly _onBinary = this.register(new EventEmitter<string>());\n  public readonly onBinary = this._onBinary.event;\n  private readonly _onData = this.register(new EventEmitter<string>());\n  public readonly onData = this._onData.event;\n  protected _onLineFeed = this.register(new EventEmitter<void>());\n  public readonly onLineFeed = this._onLineFeed.event;\n  private readonly _onResize = this.register(new EventEmitter<{ cols: number, rows: number }>());\n  public readonly onResize = this._onResize.event;\n  protected readonly _onWriteParsed = this.register(new EventEmitter<void>());\n  public readonly onWriteParsed = this._onWriteParsed.event;\n\n  /**\n   * Internally we track the source of the scroll but this is meaningless outside the library so\n   * it's filtered out.\n   */\n  protected _onScrollApi?: EventEmitter<number, void>;\n  protected _onScroll = this.register(new EventEmitter<IScrollEvent, void>());\n  public get onScroll(): IEvent<number, void> {\n    if (!this._onScrollApi) {\n      this._onScrollApi = this.register(new EventEmitter<number, void>());\n      this._onScroll.event(ev => {\n        this._onScrollApi?.fire(ev.position);\n      });\n    }\n    return this._onScrollApi.event;\n  }\n\n  public get cols(): number { return this._bufferService.cols; }\n  public get rows(): number { return this._bufferService.rows; }\n  public get buffers(): IBufferSet { return this._bufferService.buffers; }\n  public get options(): Required<ITerminalOptions> { return this.optionsService.options; }\n  public set options(options: ITerminalOptions) {\n    for (const key in options) {\n      this.optionsService.options[key] = options[key];\n    }\n  }\n\n  constructor(\n    options: Partial<ITerminalOptions>\n  ) {\n    super();\n\n    // Setup and initialize services\n    this._instantiationService = new InstantiationService();\n    this.optionsService = this.register(new OptionsService(options));\n    this._instantiationService.setService(IOptionsService, this.optionsService);\n    this._bufferService = this.register(this._instantiationService.createInstance(BufferService));\n    this._instantiationService.setService(IBufferService, this._bufferService);\n    this._logService = this.register(this._instantiationService.createInstance(LogService));\n    this._instantiationService.setService(ILogService, this._logService);\n    this.coreService = this.register(this._instantiationService.createInstance(CoreService));\n    this._instantiationService.setService(ICoreService, this.coreService);\n    this.coreMouseService = this.register(this._instantiationService.createInstance(CoreMouseService));\n    this._instantiationService.setService(ICoreMouseService, this.coreMouseService);\n    this.unicodeService = this.register(this._instantiationService.createInstance(UnicodeService));\n    this._instantiationService.setService(IUnicodeService, this.unicodeService);\n    this._charsetService = this._instantiationService.createInstance(CharsetService);\n    this._instantiationService.setService(ICharsetService, this._charsetService);\n    this._oscLinkService = this._instantiationService.createInstance(OscLinkService);\n    this._instantiationService.setService(IOscLinkService, this._oscLinkService);\n\n    // Register input handler and handle/forward events\n    this._inputHandler = this.register(new InputHandler(this._bufferService, this._charsetService, this.coreService, this._logService, this.optionsService, this._oscLinkService, this.coreMouseService, this.unicodeService));\n    this.register(forwardEvent(this._inputHandler.onLineFeed, this._onLineFeed));\n    this.register(this._inputHandler);\n\n    // Setup listeners\n    this.register(forwardEvent(this._bufferService.onResize, this._onResize));\n    this.register(forwardEvent(this.coreService.onData, this._onData));\n    this.register(forwardEvent(this.coreService.onBinary, this._onBinary));\n    this.register(this.coreService.onRequestScrollToBottom(() => this.scrollToBottom()));\n    this.register(this.coreService.onUserInput(() =>  this._writeBuffer.handleUserInput()));\n    this.register(this.optionsService.onSpecificOptionChange('windowsMode', e => this._handleWindowsModeOptionChange(e)));\n    this.register(this._bufferService.onScroll(event => {\n      this._onScroll.fire({ position: this._bufferService.buffer.ydisp, source: ScrollSource.TERMINAL });\n      this._inputHandler.markRangeDirty(this._bufferService.buffer.scrollTop, this._bufferService.buffer.scrollBottom);\n    }));\n    this.register(this._inputHandler.onScroll(event => {\n      this._onScroll.fire({ position: this._bufferService.buffer.ydisp, source: ScrollSource.TERMINAL });\n      this._inputHandler.markRangeDirty(this._bufferService.buffer.scrollTop, this._bufferService.buffer.scrollBottom);\n    }));\n\n    // Setup WriteBuffer\n    this._writeBuffer = this.register(new WriteBuffer((data, promiseResult) => this._inputHandler.parse(data, promiseResult)));\n    this.register(forwardEvent(this._writeBuffer.onWriteParsed, this._onWriteParsed));\n\n    this.register(toDisposable(() => {\n      this._windowsMode?.dispose();\n      this._windowsMode = undefined;\n    }));\n  }\n\n  public write(data: string | Uint8Array, callback?: () => void): void {\n    this._writeBuffer.write(data, callback);\n  }\n\n  /**\n   * Write data to terminal synchonously.\n   *\n   * This method is unreliable with async parser handlers, thus should not\n   * be used anymore. If you need blocking semantics on data input consider\n   * `write` with a callback instead.\n   *\n   * @deprecated Unreliable, will be removed soon.\n   */\n  public writeSync(data: string | Uint8Array, maxSubsequentCalls?: number): void {\n    if (this._logService.logLevel <= LogLevelEnum.WARN && !hasWriteSyncWarnHappened) {\n      this._logService.warn('writeSync is unreliable and will be removed soon.');\n      hasWriteSyncWarnHappened = true;\n    }\n    this._writeBuffer.writeSync(data, maxSubsequentCalls);\n  }\n\n  public resize(x: number, y: number): void {\n    if (isNaN(x) || isNaN(y)) {\n      return;\n    }\n\n    x = Math.max(x, MINIMUM_COLS);\n    y = Math.max(y, MINIMUM_ROWS);\n\n    this._bufferService.resize(x, y);\n  }\n\n  /**\n   * Scroll the terminal down 1 row, creating a blank line.\n   * @param eraseAttr The attribute data to use the for blank line.\n   * @param isWrapped Whether the new line is wrapped from the previous line.\n   */\n  public scroll(eraseAttr: IAttributeData, isWrapped: boolean = false): void {\n    this._bufferService.scroll(eraseAttr, isWrapped);\n  }\n\n  /**\n   * Scroll the display of the terminal\n   * @param disp The number of lines to scroll down (negative scroll up).\n   * @param suppressScrollEvent Don't emit the scroll event as scrollLines. This is used\n   * to avoid unwanted events being handled by the viewport when the event was triggered from the\n   * viewport originally.\n   */\n  public scrollLines(disp: number, suppressScrollEvent?: boolean, source?: ScrollSource): void {\n    this._bufferService.scrollLines(disp, suppressScrollEvent, source);\n  }\n\n  /**\n   * Scroll the display of the terminal by a number of pages.\n   * @param pageCount The number of pages to scroll (negative scrolls up).\n   */\n  public scrollPages(pageCount: number): void {\n    this._bufferService.scrollPages(pageCount);\n  }\n\n  /**\n   * Scrolls the display of the terminal to the top.\n   */\n  public scrollToTop(): void {\n    this._bufferService.scrollToTop();\n  }\n\n  /**\n   * Scrolls the display of the terminal to the bottom.\n   */\n  public scrollToBottom(): void {\n    this._bufferService.scrollToBottom();\n  }\n\n  public scrollToLine(line: number): void {\n    this._bufferService.scrollToLine(line);\n  }\n\n  /** Add handler for ESC escape sequence. See xterm.d.ts for details. */\n  public registerEscHandler(id: IFunctionIdentifier, callback: () => boolean | Promise<boolean>): IDisposable {\n    return this._inputHandler.registerEscHandler(id, callback);\n  }\n\n  /** Add handler for DCS escape sequence. See xterm.d.ts for details. */\n  public registerDcsHandler(id: IFunctionIdentifier, callback: (data: string, param: IParams) => boolean | Promise<boolean>): IDisposable {\n    return this._inputHandler.registerDcsHandler(id, callback);\n  }\n\n  /** Add handler for CSI escape sequence. See xterm.d.ts for details. */\n  public registerCsiHandler(id: IFunctionIdentifier, callback: (params: IParams) => boolean | Promise<boolean>): IDisposable {\n    return this._inputHandler.registerCsiHandler(id, callback);\n  }\n\n  /** Add handler for OSC escape sequence. See xterm.d.ts for details. */\n  public registerOscHandler(ident: number, callback: (data: string) => boolean | Promise<boolean>): IDisposable {\n    return this._inputHandler.registerOscHandler(ident, callback);\n  }\n\n  protected _setup(): void {\n    if (this.optionsService.rawOptions.windowsMode) {\n      this._enableWindowsMode();\n    }\n  }\n\n  public reset(): void {\n    this._inputHandler.reset();\n    this._bufferService.reset();\n    this._charsetService.reset();\n    this.coreService.reset();\n    this.coreMouseService.reset();\n  }\n\n  private _handleWindowsModeOptionChange(value: boolean): void {\n    if (value) {\n      this._enableWindowsMode();\n    } else {\n      this._windowsMode?.dispose();\n      this._windowsMode = undefined;\n    }\n  }\n\n  protected _enableWindowsMode(): void {\n    if (!this._windowsMode) {\n      const disposables: IDisposable[] = [];\n      disposables.push(this.onLineFeed(updateWindowsModeWrappedState.bind(null, this._bufferService)));\n      disposables.push(this.registerCsiHandler({ final: 'H' }, () => {\n        updateWindowsModeWrappedState(this._bufferService);\n        return false;\n      }));\n      this._windowsMode = {\n        dispose: () => {\n          for (const d of disposables) {\n            d.dispose();\n          }\n        }\n      };\n    }\n  }\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IDisposable } from 'common/Types';\n\ninterface IListener<T, U = void> {\n  (arg1: T, arg2: U): void;\n}\n\nexport interface IEvent<T, U = void> {\n  (listener: (arg1: T, arg2: U) => any): IDisposable;\n}\n\nexport interface IEventEmitter<T, U = void> {\n  event: IEvent<T, U>;\n  fire(arg1: T, arg2: U): void;\n  dispose(): void;\n}\n\nexport class EventEmitter<T, U = void> implements IEventEmitter<T, U> {\n  private _listeners: IListener<T, U>[] = [];\n  private _event?: IEvent<T, U>;\n  private _disposed: boolean = false;\n\n  public get event(): IEvent<T, U> {\n    if (!this._event) {\n      this._event = (listener: (arg1: T, arg2: U) => any) => {\n        this._listeners.push(listener);\n        const disposable = {\n          dispose: () => {\n            if (!this._disposed) {\n              for (let i = 0; i < this._listeners.length; i++) {\n                if (this._listeners[i] === listener) {\n                  this._listeners.splice(i, 1);\n                  return;\n                }\n              }\n            }\n          }\n        };\n        return disposable;\n      };\n    }\n    return this._event;\n  }\n\n  public fire(arg1: T, arg2: U): void {\n    const queue: IListener<T, U>[] = [];\n    for (let i = 0; i < this._listeners.length; i++) {\n      queue.push(this._listeners[i]);\n    }\n    for (let i = 0; i < queue.length; i++) {\n      queue[i].call(undefined, arg1, arg2);\n    }\n  }\n\n  public dispose(): void {\n    if (this._listeners) {\n      this._listeners.length = 0;\n    }\n    this._disposed = true;\n  }\n}\n\nexport function forwardEvent<T>(from: IEvent<T>, to: IEventEmitter<T>): IDisposable {\n  return from(e => to.fire(e));\n}\n","/**\n * Copyright (c) 2014 The xterm.js authors. All rights reserved.\n * Copyright (c) 2012-2013, Christopher Jeffrey (MIT License)\n * @license MIT\n */\n\nimport { IInputHandler, IAttributeData, IDisposable, IWindowOptions, IColorEvent, IParseStack, ColorIndex, ColorRequestType } from 'common/Types';\nimport { C0, C1 } from 'common/data/EscapeSequences';\nimport { CHARSETS, DEFAULT_CHARSET } from 'common/data/Charsets';\nimport { EscapeSequenceParser } from 'common/parser/EscapeSequenceParser';\nimport { Disposable } from 'common/Lifecycle';\nimport { StringToUtf32, stringFromCodePoint, Utf8ToUtf32 } from 'common/input/TextDecoder';\nimport { DEFAULT_ATTR_DATA } from 'common/buffer/BufferLine';\nimport { EventEmitter } from 'common/EventEmitter';\nimport { IParsingState, IEscapeSequenceParser, IParams, IFunctionIdentifier } from 'common/parser/Types';\nimport { NULL_CELL_CODE, NULL_CELL_WIDTH, Attributes, FgFlags, BgFlags, Content, UnderlineStyle } from 'common/buffer/Constants';\nimport { CellData } from 'common/buffer/CellData';\nimport { AttributeData } from 'common/buffer/AttributeData';\nimport { ICoreService, IBufferService, IOptionsService, ILogService, ICoreMouseService, ICharsetService, IUnicodeService, LogLevelEnum, IOscLinkService } from 'common/services/Services';\nimport { OscHandler } from 'common/parser/OscParser';\nimport { DcsHandler } from 'common/parser/DcsParser';\nimport { IBuffer } from 'common/buffer/Types';\nimport { parseColor } from 'common/input/XParseColor';\n\n/**\n * Map collect to glevel. Used in `selectCharset`.\n */\nconst GLEVEL: { [key: string]: number } = { '(': 0, ')': 1, '*': 2, '+': 3, '-': 1, '.': 2 };\n\n/**\n * VT commands done by the parser - FIXME: move this to the parser?\n */\n// @vt: #Y   ESC   CSI   \"Control Sequence Introducer\"   \"ESC [\"   \"Start of a CSI sequence.\"\n// @vt: #Y   ESC   OSC   \"Operating System Command\"      \"ESC ]\"   \"Start of an OSC sequence.\"\n// @vt: #Y   ESC   DCS   \"Device Control String\"         \"ESC P\"   \"Start of a DCS sequence.\"\n// @vt: #Y   ESC   ST    \"String Terminator\"             \"ESC \\\"   \"Terminator used for string type sequences.\"\n// @vt: #Y   ESC   PM    \"Privacy Message\"               \"ESC ^\"   \"Start of a privacy message.\"\n// @vt: #Y   ESC   APC   \"Application Program Command\"   \"ESC _\"   \"Start of an APC sequence.\"\n// @vt: #Y   C1    CSI   \"Control Sequence Introducer\"   \"\\x9B\"    \"Start of a CSI sequence.\"\n// @vt: #Y   C1    OSC   \"Operating System Command\"      \"\\x9D\"    \"Start of an OSC sequence.\"\n// @vt: #Y   C1    DCS   \"Device Control String\"         \"\\x90\"    \"Start of a DCS sequence.\"\n// @vt: #Y   C1    ST    \"String Terminator\"             \"\\x9C\"    \"Terminator used for string type sequences.\"\n// @vt: #Y   C1    PM    \"Privacy Message\"               \"\\x9E\"    \"Start of a privacy message.\"\n// @vt: #Y   C1    APC   \"Application Program Command\"   \"\\x9F\"    \"Start of an APC sequence.\"\n// @vt: #Y   C0    NUL   \"Null\"                          \"\\0, \\x00\"  \"NUL is ignored.\"\n// @vt: #Y   C0    ESC   \"Escape\"                        \"\\e, \\x1B\"  \"Start of a sequence. Cancels any other sequence.\"\n\n/**\n * Document xterm VT features here that are currently unsupported\n */\n// @vt: #E[Supported via xterm-addon-image.]  DCS   SIXEL       \"SIXEL Graphics\"          \"DCS Ps ; Ps ; Ps ; q \tPt ST\"  \"Draw SIXEL image.\"\n// @vt: #N  DCS   DECUDK      \"User Defined Keys\"       \"DCS Ps ; Ps \\| Pt ST\"           \"Definitions for user-defined keys.\"\n// @vt: #N  DCS   XTGETTCAP   \"Request Terminfo String\" \"DCS + q Pt ST\"                 \"Request Terminfo String.\"\n// @vt: #N  DCS   XTSETTCAP   \"Set Terminfo Data\"       \"DCS + p Pt ST\"                 \"Set Terminfo Data.\"\n// @vt: #N  OSC   1           \"Set Icon Name\"           \"OSC 1 ; Pt BEL\"                \"Set icon name.\"\n\n/**\n * Max length of the UTF32 input buffer. Real memory consumption is 4 times higher.\n */\nconst MAX_PARSEBUFFER_LENGTH = 131072;\n\n/**\n * Limit length of title and icon name stacks.\n */\nconst STACK_LIMIT = 10;\n\n// map params to window option\nfunction paramToWindowOption(n: number, opts: IWindowOptions): boolean {\n  if (n > 24) {\n    return opts.setWinLines || false;\n  }\n  switch (n) {\n    case 1: return !!opts.restoreWin;\n    case 2: return !!opts.minimizeWin;\n    case 3: return !!opts.setWinPosition;\n    case 4: return !!opts.setWinSizePixels;\n    case 5: return !!opts.raiseWin;\n    case 6: return !!opts.lowerWin;\n    case 7: return !!opts.refreshWin;\n    case 8: return !!opts.setWinSizeChars;\n    case 9: return !!opts.maximizeWin;\n    case 10: return !!opts.fullscreenWin;\n    case 11: return !!opts.getWinState;\n    case 13: return !!opts.getWinPosition;\n    case 14: return !!opts.getWinSizePixels;\n    case 15: return !!opts.getScreenSizePixels;\n    case 16: return !!opts.getCellSizePixels;\n    case 18: return !!opts.getWinSizeChars;\n    case 19: return !!opts.getScreenSizeChars;\n    case 20: return !!opts.getIconTitle;\n    case 21: return !!opts.getWinTitle;\n    case 22: return !!opts.pushTitle;\n    case 23: return !!opts.popTitle;\n    case 24: return !!opts.setWinLines;\n  }\n  return false;\n}\n\nexport enum WindowsOptionsReportType {\n  GET_WIN_SIZE_PIXELS = 0,\n  GET_CELL_SIZE_PIXELS = 1\n}\n\n// create a warning log if an async handler takes longer than the limit (in ms)\nconst SLOW_ASYNC_LIMIT = 5000;\n\n// Work variables to avoid garbage collection\nlet $temp = 0;\n\n/**\n * The terminal's standard implementation of IInputHandler, this handles all\n * input from the Parser.\n *\n * Refer to http://invisible-island.net/xterm/ctlseqs/ctlseqs.html to understand\n * each function's header comment.\n */\nexport class InputHandler extends Disposable implements IInputHandler {\n  private _parseBuffer: Uint32Array = new Uint32Array(4096);\n  private _stringDecoder: StringToUtf32 = new StringToUtf32();\n  private _utf8Decoder: Utf8ToUtf32 = new Utf8ToUtf32();\n  private _workCell: CellData = new CellData();\n  private _windowTitle = '';\n  private _iconName = '';\n  private _dirtyRowTracker: IDirtyRowTracker;\n  protected _windowTitleStack: string[] = [];\n  protected _iconNameStack: string[] = [];\n\n  private _curAttrData: IAttributeData = DEFAULT_ATTR_DATA.clone();\n  public getAttrData(): IAttributeData { return this._curAttrData; }\n  private _eraseAttrDataInternal: IAttributeData = DEFAULT_ATTR_DATA.clone();\n\n  private _activeBuffer: IBuffer;\n\n  private readonly _onRequestBell = this.register(new EventEmitter<void>());\n  public readonly onRequestBell = this._onRequestBell.event;\n  private readonly _onRequestRefreshRows = this.register(new EventEmitter<number, number>());\n  public readonly onRequestRefreshRows = this._onRequestRefreshRows.event;\n  private readonly _onRequestReset = this.register(new EventEmitter<void>());\n  public readonly onRequestReset = this._onRequestReset.event;\n  private readonly _onRequestSendFocus = this.register(new EventEmitter<void>());\n  public readonly onRequestSendFocus = this._onRequestSendFocus.event;\n  private readonly _onRequestSyncScrollBar = this.register(new EventEmitter<void>());\n  public readonly onRequestSyncScrollBar = this._onRequestSyncScrollBar.event;\n  private readonly _onRequestWindowsOptionsReport = this.register(new EventEmitter<WindowsOptionsReportType>());\n  public readonly onRequestWindowsOptionsReport = this._onRequestWindowsOptionsReport.event;\n\n  private readonly _onA11yChar = this.register(new EventEmitter<string>());\n  public readonly onA11yChar = this._onA11yChar.event;\n  private readonly _onA11yTab = this.register(new EventEmitter<number>());\n  public readonly onA11yTab = this._onA11yTab.event;\n  private readonly _onCursorMove = this.register(new EventEmitter<void>());\n  public readonly onCursorMove = this._onCursorMove.event;\n  private readonly _onLineFeed = this.register(new EventEmitter<void>());\n  public readonly onLineFeed = this._onLineFeed.event;\n  private readonly _onScroll = this.register(new EventEmitter<number>());\n  public readonly onScroll = this._onScroll.event;\n  private readonly _onTitleChange = this.register(new EventEmitter<string>());\n  public readonly onTitleChange = this._onTitleChange.event;\n  private readonly _onColor = this.register(new EventEmitter<IColorEvent>());\n  public readonly onColor = this._onColor.event;\n\n  private _parseStack: IParseStack = {\n    paused: false,\n    cursorStartX: 0,\n    cursorStartY: 0,\n    decodedLength: 0,\n    position: 0\n  };\n\n  constructor(\n    private readonly _bufferService: IBufferService,\n    private readonly _charsetService: ICharsetService,\n    private readonly _coreService: ICoreService,\n    private readonly _logService: ILogService,\n    private readonly _optionsService: IOptionsService,\n    private readonly _oscLinkService: IOscLinkService,\n    private readonly _coreMouseService: ICoreMouseService,\n    private readonly _unicodeService: IUnicodeService,\n    private readonly _parser: IEscapeSequenceParser = new EscapeSequenceParser()\n  ) {\n    super();\n    this.register(this._parser);\n    this._dirtyRowTracker = new DirtyRowTracker(this._bufferService);\n\n    // Track properties used in performance critical code manually to avoid using slow getters\n    this._activeBuffer = this._bufferService.buffer;\n    this.register(this._bufferService.buffers.onBufferActivate(e => this._activeBuffer = e.activeBuffer));\n\n    /**\n     * custom fallback handlers\n     */\n    this._parser.setCsiHandlerFallback((ident, params) => {\n      this._logService.debug('Unknown CSI code: ', { identifier: this._parser.identToString(ident), params: params.toArray() });\n    });\n    this._parser.setEscHandlerFallback(ident => {\n      this._logService.debug('Unknown ESC code: ', { identifier: this._parser.identToString(ident) });\n    });\n    this._parser.setExecuteHandlerFallback(code => {\n      this._logService.debug('Unknown EXECUTE code: ', { code });\n    });\n    this._parser.setOscHandlerFallback((identifier, action, data) => {\n      this._logService.debug('Unknown OSC code: ', { identifier, action, data });\n    });\n    this._parser.setDcsHandlerFallback((ident, action, payload) => {\n      if (action === 'HOOK') {\n        payload = payload.toArray();\n      }\n      this._logService.debug('Unknown DCS code: ', { identifier: this._parser.identToString(ident), action, payload });\n    });\n\n    /**\n     * print handler\n     */\n    this._parser.setPrintHandler((data, start, end) => this.print(data, start, end));\n\n    /**\n     * CSI handler\n     */\n    this._parser.registerCsiHandler({ final: '@' }, params => this.insertChars(params));\n    this._parser.registerCsiHandler({ intermediates: ' ', final: '@' }, params => this.scrollLeft(params));\n    this._parser.registerCsiHandler({ final: 'A' }, params => this.cursorUp(params));\n    this._parser.registerCsiHandler({ intermediates: ' ', final: 'A' }, params => this.scrollRight(params));\n    this._parser.registerCsiHandler({ final: 'B' }, params => this.cursorDown(params));\n    this._parser.registerCsiHandler({ final: 'C' }, params => this.cursorForward(params));\n    this._parser.registerCsiHandler({ final: 'D' }, params => this.cursorBackward(params));\n    this._parser.registerCsiHandler({ final: 'E' }, params => this.cursorNextLine(params));\n    this._parser.registerCsiHandler({ final: 'F' }, params => this.cursorPrecedingLine(params));\n    this._parser.registerCsiHandler({ final: 'G' }, params => this.cursorCharAbsolute(params));\n    this._parser.registerCsiHandler({ final: 'H' }, params => this.cursorPosition(params));\n    this._parser.registerCsiHandler({ final: 'I' }, params => this.cursorForwardTab(params));\n    this._parser.registerCsiHandler({ final: 'J' }, params => this.eraseInDisplay(params, false));\n    this._parser.registerCsiHandler({ prefix: '?', final: 'J' }, params => this.eraseInDisplay(params, true));\n    this._parser.registerCsiHandler({ final: 'K' }, params => this.eraseInLine(params, false));\n    this._parser.registerCsiHandler({ prefix: '?', final: 'K' }, params => this.eraseInLine(params, true));\n    this._parser.registerCsiHandler({ final: 'L' }, params => this.insertLines(params));\n    this._parser.registerCsiHandler({ final: 'M' }, params => this.deleteLines(params));\n    this._parser.registerCsiHandler({ final: 'P' }, params => this.deleteChars(params));\n    this._parser.registerCsiHandler({ final: 'S' }, params => this.scrollUp(params));\n    this._parser.registerCsiHandler({ final: 'T' }, params => this.scrollDown(params));\n    this._parser.registerCsiHandler({ final: 'X' }, params => this.eraseChars(params));\n    this._parser.registerCsiHandler({ final: 'Z' }, params => this.cursorBackwardTab(params));\n    this._parser.registerCsiHandler({ final: '`' }, params => this.charPosAbsolute(params));\n    this._parser.registerCsiHandler({ final: 'a' }, params => this.hPositionRelative(params));\n    this._parser.registerCsiHandler({ final: 'b' }, params => this.repeatPrecedingCharacter(params));\n    this._parser.registerCsiHandler({ final: 'c' }, params => this.sendDeviceAttributesPrimary(params));\n    this._parser.registerCsiHandler({ prefix: '>', final: 'c' }, params => this.sendDeviceAttributesSecondary(params));\n    this._parser.registerCsiHandler({ final: 'd' }, params => this.linePosAbsolute(params));\n    this._parser.registerCsiHandler({ final: 'e' }, params => this.vPositionRelative(params));\n    this._parser.registerCsiHandler({ final: 'f' }, params => this.hVPosition(params));\n    this._parser.registerCsiHandler({ final: 'g' }, params => this.tabClear(params));\n    this._parser.registerCsiHandler({ final: 'h' }, params => this.setMode(params));\n    this._parser.registerCsiHandler({ prefix: '?', final: 'h' }, params => this.setModePrivate(params));\n    this._parser.registerCsiHandler({ final: 'l' }, params => this.resetMode(params));\n    this._parser.registerCsiHandler({ prefix: '?', final: 'l' }, params => this.resetModePrivate(params));\n    this._parser.registerCsiHandler({ final: 'm' }, params => this.charAttributes(params));\n    this._parser.registerCsiHandler({ final: 'n' }, params => this.deviceStatus(params));\n    this._parser.registerCsiHandler({ prefix: '?', final: 'n' }, params => this.deviceStatusPrivate(params));\n    this._parser.registerCsiHandler({ intermediates: '!', final: 'p' }, params => this.softReset(params));\n    this._parser.registerCsiHandler({ intermediates: ' ', final: 'q' }, params => this.setCursorStyle(params));\n    this._parser.registerCsiHandler({ final: 'r' }, params => this.setScrollRegion(params));\n    this._parser.registerCsiHandler({ final: 's' }, params => this.saveCursor(params));\n    this._parser.registerCsiHandler({ final: 't' }, params => this.windowOptions(params));\n    this._parser.registerCsiHandler({ final: 'u' }, params => this.restoreCursor(params));\n    this._parser.registerCsiHandler({ intermediates: '\\'', final: '}' }, params => this.insertColumns(params));\n    this._parser.registerCsiHandler({ intermediates: '\\'', final: '~' }, params => this.deleteColumns(params));\n    this._parser.registerCsiHandler({ intermediates: '\"', final: 'q' }, params => this.selectProtected(params));\n    this._parser.registerCsiHandler({ intermediates: '$', final: 'p' }, params => this.requestMode(params, true));\n    this._parser.registerCsiHandler({ prefix: '?', intermediates: '$', final: 'p' }, params => this.requestMode(params, false));\n\n    /**\n     * execute handler\n     */\n    this._parser.setExecuteHandler(C0.BEL, () => this.bell());\n    this._parser.setExecuteHandler(C0.LF, () => this.lineFeed());\n    this._parser.setExecuteHandler(C0.VT, () => this.lineFeed());\n    this._parser.setExecuteHandler(C0.FF, () => this.lineFeed());\n    this._parser.setExecuteHandler(C0.CR, () => this.carriageReturn());\n    this._parser.setExecuteHandler(C0.BS, () => this.backspace());\n    this._parser.setExecuteHandler(C0.HT, () => this.tab());\n    this._parser.setExecuteHandler(C0.SO, () => this.shiftOut());\n    this._parser.setExecuteHandler(C0.SI, () => this.shiftIn());\n    // FIXME:   What do to with missing? Old code just added those to print.\n\n    this._parser.setExecuteHandler(C1.IND, () => this.index());\n    this._parser.setExecuteHandler(C1.NEL, () => this.nextLine());\n    this._parser.setExecuteHandler(C1.HTS, () => this.tabSet());\n\n    /**\n     * OSC handler\n     */\n    //   0 - icon name + title\n    this._parser.registerOscHandler(0, new OscHandler(data => { this.setTitle(data); this.setIconName(data); return true; }));\n    //   1 - icon name\n    this._parser.registerOscHandler(1, new OscHandler(data => this.setIconName(data)));\n    //   2 - title\n    this._parser.registerOscHandler(2, new OscHandler(data => this.setTitle(data)));\n    //   3 - set property X in the form \"prop=value\"\n    //   4 - Change Color Number\n    this._parser.registerOscHandler(4, new OscHandler(data => this.setOrReportIndexedColor(data)));\n    //   5 - Change Special Color Number\n    //   6 - Enable/disable Special Color Number c\n    //   7 - current directory? (not in xterm spec, see https://gitlab.com/gnachman/iterm2/issues/3939)\n    //   8 - create hyperlink (not in xterm spec, see https://gist.github.com/egmontkob/eb114294efbcd5adb1944c9f3cb5feda)\n    this._parser.registerOscHandler(8, new OscHandler(data => this.setHyperlink(data)));\n    //  10 - Change VT100 text foreground color to Pt.\n    this._parser.registerOscHandler(10, new OscHandler(data => this.setOrReportFgColor(data)));\n    //  11 - Change VT100 text background color to Pt.\n    this._parser.registerOscHandler(11, new OscHandler(data => this.setOrReportBgColor(data)));\n    //  12 - Change text cursor color to Pt.\n    this._parser.registerOscHandler(12, new OscHandler(data => this.setOrReportCursorColor(data)));\n    //  13 - Change mouse foreground color to Pt.\n    //  14 - Change mouse background color to Pt.\n    //  15 - Change Tektronix foreground color to Pt.\n    //  16 - Change Tektronix background color to Pt.\n    //  17 - Change highlight background color to Pt.\n    //  18 - Change Tektronix cursor color to Pt.\n    //  19 - Change highlight foreground color to Pt.\n    //  46 - Change Log File to Pt.\n    //  50 - Set Font to Pt.\n    //  51 - reserved for Emacs shell.\n    //  52 - Manipulate Selection Data.\n    // 104 ; c - Reset Color Number c.\n    this._parser.registerOscHandler(104, new OscHandler(data => this.restoreIndexedColor(data)));\n    // 105 ; c - Reset Special Color Number c.\n    // 106 ; c; f - Enable/disable Special Color Number c.\n    // 110 - Reset VT100 text foreground color.\n    this._parser.registerOscHandler(110, new OscHandler(data => this.restoreFgColor(data)));\n    // 111 - Reset VT100 text background color.\n    this._parser.registerOscHandler(111, new OscHandler(data => this.restoreBgColor(data)));\n    // 112 - Reset text cursor color.\n    this._parser.registerOscHandler(112, new OscHandler(data => this.restoreCursorColor(data)));\n    // 113 - Reset mouse foreground color.\n    // 114 - Reset mouse background color.\n    // 115 - Reset Tektronix foreground color.\n    // 116 - Reset Tektronix background color.\n    // 117 - Reset highlight color.\n    // 118 - Reset Tektronix cursor color.\n    // 119 - Reset highlight foreground color.\n\n    /**\n     * ESC handlers\n     */\n    this._parser.registerEscHandler({ final: '7' }, () => this.saveCursor());\n    this._parser.registerEscHandler({ final: '8' }, () => this.restoreCursor());\n    this._parser.registerEscHandler({ final: 'D' }, () => this.index());\n    this._parser.registerEscHandler({ final: 'E' }, () => this.nextLine());\n    this._parser.registerEscHandler({ final: 'H' }, () => this.tabSet());\n    this._parser.registerEscHandler({ final: 'M' }, () => this.reverseIndex());\n    this._parser.registerEscHandler({ final: '=' }, () => this.keypadApplicationMode());\n    this._parser.registerEscHandler({ final: '>' }, () => this.keypadNumericMode());\n    this._parser.registerEscHandler({ final: 'c' }, () => this.fullReset());\n    this._parser.registerEscHandler({ final: 'n' }, () => this.setgLevel(2));\n    this._parser.registerEscHandler({ final: 'o' }, () => this.setgLevel(3));\n    this._parser.registerEscHandler({ final: '|' }, () => this.setgLevel(3));\n    this._parser.registerEscHandler({ final: '}' }, () => this.setgLevel(2));\n    this._parser.registerEscHandler({ final: '~' }, () => this.setgLevel(1));\n    this._parser.registerEscHandler({ intermediates: '%', final: '@' }, () => this.selectDefaultCharset());\n    this._parser.registerEscHandler({ intermediates: '%', final: 'G' }, () => this.selectDefaultCharset());\n    for (const flag in CHARSETS) {\n      this._parser.registerEscHandler({ intermediates: '(', final: flag }, () => this.selectCharset('(' + flag));\n      this._parser.registerEscHandler({ intermediates: ')', final: flag }, () => this.selectCharset(')' + flag));\n      this._parser.registerEscHandler({ intermediates: '*', final: flag }, () => this.selectCharset('*' + flag));\n      this._parser.registerEscHandler({ intermediates: '+', final: flag }, () => this.selectCharset('+' + flag));\n      this._parser.registerEscHandler({ intermediates: '-', final: flag }, () => this.selectCharset('-' + flag));\n      this._parser.registerEscHandler({ intermediates: '.', final: flag }, () => this.selectCharset('.' + flag));\n      this._parser.registerEscHandler({ intermediates: '/', final: flag }, () => this.selectCharset('/' + flag)); // TODO: supported?\n    }\n    this._parser.registerEscHandler({ intermediates: '#', final: '8' }, () => this.screenAlignmentPattern());\n\n    /**\n     * error handler\n     */\n    this._parser.setErrorHandler((state: IParsingState) => {\n      this._logService.error('Parsing error: ', state);\n      return state;\n    });\n\n    /**\n     * DCS handler\n     */\n    this._parser.registerDcsHandler({ intermediates: '$', final: 'q' }, new DcsHandler((data, params) => this.requestStatusString(data, params)));\n  }\n\n  /**\n   * Async parse support.\n   */\n  private _preserveStack(cursorStartX: number, cursorStartY: number, decodedLength: number, position: number): void {\n    this._parseStack.paused = true;\n    this._parseStack.cursorStartX = cursorStartX;\n    this._parseStack.cursorStartY = cursorStartY;\n    this._parseStack.decodedLength = decodedLength;\n    this._parseStack.position = position;\n  }\n\n  private _logSlowResolvingAsync(p: Promise<boolean>): void {\n    // log a limited warning about an async handler taking too long\n    if (this._logService.logLevel <= LogLevelEnum.WARN) {\n      Promise.race([p, new Promise((res, rej) => setTimeout(() => rej('#SLOW_TIMEOUT'), SLOW_ASYNC_LIMIT))])\n        .catch(err => {\n          if (err !== '#SLOW_TIMEOUT') {\n            throw err;\n          }\n          console.warn(`async parser handler taking longer than ${SLOW_ASYNC_LIMIT} ms`);\n        });\n    }\n  }\n\n  private _getCurrentLinkId(): number {\n    return this._curAttrData.extended.urlId;\n  }\n\n  /**\n   * Parse call with async handler support.\n   *\n   * Whether the stack state got preserved for the next call, is indicated by the return value:\n   * - undefined (void):\n   *   all handlers were sync, no stack save, continue normally with next chunk\n   * - Promise\\<boolean\\>:\n   *   execution stopped at async handler, stack saved, continue with\n   *   same chunk and the promise resolve value as `promiseResult` until the method returns `undefined`\n   *\n   * Note: This method should only be called by `Terminal.write` to ensure correct execution order and\n   * proper continuation of async parser handlers.\n   */\n  public parse(data: string | Uint8Array, promiseResult?: boolean): void | Promise<boolean> {\n    let result: void | Promise<boolean>;\n    let cursorStartX = this._activeBuffer.x;\n    let cursorStartY = this._activeBuffer.y;\n    let start = 0;\n    const wasPaused = this._parseStack.paused;\n\n    if (wasPaused) {\n      // assumption: _parseBuffer never mutates between async calls\n      if (result = this._parser.parse(this._parseBuffer, this._parseStack.decodedLength, promiseResult)) {\n        this._logSlowResolvingAsync(result);\n        return result;\n      }\n      cursorStartX = this._parseStack.cursorStartX;\n      cursorStartY = this._parseStack.cursorStartY;\n      this._parseStack.paused = false;\n      if (data.length > MAX_PARSEBUFFER_LENGTH) {\n        start = this._parseStack.position + MAX_PARSEBUFFER_LENGTH;\n      }\n    }\n\n    // Log debug data, the log level gate is to prevent extra work in this hot path\n    if (this._logService.logLevel <= LogLevelEnum.DEBUG) {\n      this._logService.debug(`parsing data${typeof data === 'string' ? ` \"${data}\"` : ` \"${Array.prototype.map.call(data, e => String.fromCharCode(e)).join('')}\"`}`, typeof data === 'string'\n        ? data.split('').map(e => e.charCodeAt(0))\n        : data\n      );\n    }\n\n    // resize input buffer if needed\n    if (this._parseBuffer.length < data.length) {\n      if (this._parseBuffer.length < MAX_PARSEBUFFER_LENGTH) {\n        this._parseBuffer = new Uint32Array(Math.min(data.length, MAX_PARSEBUFFER_LENGTH));\n      }\n    }\n\n    // Clear the dirty row service so we know which lines changed as a result of parsing\n    // Important: do not clear between async calls, otherwise we lost pending update information.\n    if (!wasPaused) {\n      this._dirtyRowTracker.clearRange();\n    }\n\n    // process big data in smaller chunks\n    if (data.length > MAX_PARSEBUFFER_LENGTH) {\n      for (let i = start; i < data.length; i += MAX_PARSEBUFFER_LENGTH) {\n        const end = i + MAX_PARSEBUFFER_LENGTH < data.length ? i + MAX_PARSEBUFFER_LENGTH : data.length;\n        const len = (typeof data === 'string')\n          ? this._stringDecoder.decode(data.substring(i, end), this._parseBuffer)\n          : this._utf8Decoder.decode(data.subarray(i, end), this._parseBuffer);\n        if (result = this._parser.parse(this._parseBuffer, len)) {\n          this._preserveStack(cursorStartX, cursorStartY, len, i);\n          this._logSlowResolvingAsync(result);\n          return result;\n        }\n      }\n    } else {\n      if (!wasPaused) {\n        const len = (typeof data === 'string')\n          ? this._stringDecoder.decode(data, this._parseBuffer)\n          : this._utf8Decoder.decode(data, this._parseBuffer);\n        if (result = this._parser.parse(this._parseBuffer, len)) {\n          this._preserveStack(cursorStartX, cursorStartY, len, 0);\n          this._logSlowResolvingAsync(result);\n          return result;\n        }\n      }\n    }\n\n    if (this._activeBuffer.x !== cursorStartX || this._activeBuffer.y !== cursorStartY) {\n      this._onCursorMove.fire();\n    }\n\n    // Refresh any dirty rows accumulated as part of parsing\n    this._onRequestRefreshRows.fire(this._dirtyRowTracker.start, this._dirtyRowTracker.end);\n  }\n\n  public print(data: Uint32Array, start: number, end: number): void {\n    let code: number;\n    let chWidth: number;\n    const charset = this._charsetService.charset;\n    const screenReaderMode = this._optionsService.rawOptions.screenReaderMode;\n    const cols = this._bufferService.cols;\n    const wraparoundMode = this._coreService.decPrivateModes.wraparound;\n    const insertMode = this._coreService.modes.insertMode;\n    const curAttr = this._curAttrData;\n    let bufferRow = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y)!;\n\n    this._dirtyRowTracker.markDirty(this._activeBuffer.y);\n\n    // handle wide chars: reset start_cell-1 if we would overwrite the second cell of a wide char\n    if (this._activeBuffer.x && end - start > 0 && bufferRow.getWidth(this._activeBuffer.x - 1) === 2) {\n      bufferRow.setCellFromCodePoint(this._activeBuffer.x - 1, 0, 1, curAttr.fg, curAttr.bg, curAttr.extended);\n    }\n\n    for (let pos = start; pos < end; ++pos) {\n      code = data[pos];\n\n      // calculate print space\n      // expensive call, therefore we save width in line buffer\n      chWidth = this._unicodeService.wcwidth(code);\n\n      // get charset replacement character\n      // charset is only defined for ASCII, therefore we only\n      // search for an replacement char if code < 127\n      if (code < 127 && charset) {\n        const ch = charset[String.fromCharCode(code)];\n        if (ch) {\n          code = ch.charCodeAt(0);\n        }\n      }\n\n      if (screenReaderMode) {\n        this._onA11yChar.fire(stringFromCodePoint(code));\n      }\n      if (this._getCurrentLinkId()) {\n        this._oscLinkService.addLineToLink(this._getCurrentLinkId(), this._activeBuffer.ybase + this._activeBuffer.y);\n      }\n\n      // insert combining char at last cursor position\n      // this._activeBuffer.x should never be 0 for a combining char\n      // since they always follow a cell consuming char\n      // therefore we can test for this._activeBuffer.x to avoid overflow left\n      if (!chWidth && this._activeBuffer.x) {\n        if (!bufferRow.getWidth(this._activeBuffer.x - 1)) {\n          // found empty cell after fullwidth, need to go 2 cells back\n          // it is save to step 2 cells back here\n          // since an empty cell is only set by fullwidth chars\n          bufferRow.addCodepointToCell(this._activeBuffer.x - 2, code);\n        } else {\n          bufferRow.addCodepointToCell(this._activeBuffer.x - 1, code);\n        }\n        continue;\n      }\n\n      // goto next line if ch would overflow\n      // NOTE: To avoid costly width checks here,\n      // the terminal does not allow a cols < 2.\n      if (this._activeBuffer.x + chWidth - 1 >= cols) {\n        // autowrap - DECAWM\n        // automatically wraps to the beginning of the next line\n        if (wraparoundMode) {\n          // clear left over cells to the right\n          while (this._activeBuffer.x < cols) {\n            bufferRow.setCellFromCodePoint(this._activeBuffer.x++, 0, 1, curAttr.fg, curAttr.bg, curAttr.extended);\n          }\n          this._activeBuffer.x = 0;\n          this._activeBuffer.y++;\n          if (this._activeBuffer.y === this._activeBuffer.scrollBottom + 1) {\n            this._activeBuffer.y--;\n            this._bufferService.scroll(this._eraseAttrData(), true);\n          } else {\n            if (this._activeBuffer.y >= this._bufferService.rows) {\n              this._activeBuffer.y = this._bufferService.rows - 1;\n            }\n            // The line already exists (eg. the initial viewport), mark it as a\n            // wrapped line\n            this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y)!.isWrapped = true;\n          }\n          // row changed, get it again\n          bufferRow = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y)!;\n        } else {\n          this._activeBuffer.x = cols - 1;\n          if (chWidth === 2) {\n            // FIXME: check for xterm behavior\n            // What to do here? We got a wide char that does not fit into last cell\n            continue;\n          }\n        }\n      }\n\n      // insert mode: move characters to right\n      if (insertMode) {\n        // right shift cells according to the width\n        bufferRow.insertCells(this._activeBuffer.x, chWidth, this._activeBuffer.getNullCell(curAttr), curAttr);\n        // test last cell - since the last cell has only room for\n        // a halfwidth char any fullwidth shifted there is lost\n        // and will be set to empty cell\n        if (bufferRow.getWidth(cols - 1) === 2) {\n          bufferRow.setCellFromCodePoint(cols - 1, NULL_CELL_CODE, NULL_CELL_WIDTH, curAttr.fg, curAttr.bg, curAttr.extended);\n        }\n      }\n\n      // write current char to buffer and advance cursor\n      bufferRow.setCellFromCodePoint(this._activeBuffer.x++, code, chWidth, curAttr.fg, curAttr.bg, curAttr.extended);\n\n      // fullwidth char - also set next cell to placeholder stub and advance cursor\n      // for graphemes bigger than fullwidth we can simply loop to zero\n      // we already made sure above, that this._activeBuffer.x + chWidth will not overflow right\n      if (chWidth > 0) {\n        while (--chWidth) {\n          // other than a regular empty cell a cell following a wide char has no width\n          bufferRow.setCellFromCodePoint(this._activeBuffer.x++, 0, 0, curAttr.fg, curAttr.bg, curAttr.extended);\n        }\n      }\n    }\n    // store last char in Parser.precedingCodepoint for REP to work correctly\n    // This needs to check whether:\n    //  - fullwidth + surrogates: reset\n    //  - combining: only base char gets carried on (bug in xterm?)\n    if (end - start > 0) {\n      bufferRow.loadCell(this._activeBuffer.x - 1, this._workCell);\n      if (this._workCell.getWidth() === 2 || this._workCell.getCode() > 0xFFFF) {\n        this._parser.precedingCodepoint = 0;\n      } else if (this._workCell.isCombined()) {\n        this._parser.precedingCodepoint = this._workCell.getChars().charCodeAt(0);\n      } else {\n        this._parser.precedingCodepoint = this._workCell.content;\n      }\n    }\n\n    // handle wide chars: reset cell to the right if it is second cell of a wide char\n    if (this._activeBuffer.x < cols && end - start > 0 && bufferRow.getWidth(this._activeBuffer.x) === 0 && !bufferRow.hasContent(this._activeBuffer.x)) {\n      bufferRow.setCellFromCodePoint(this._activeBuffer.x, 0, 1, curAttr.fg, curAttr.bg, curAttr.extended);\n    }\n\n    this._dirtyRowTracker.markDirty(this._activeBuffer.y);\n  }\n\n  /**\n   * Forward registerCsiHandler from parser.\n   */\n  public registerCsiHandler(id: IFunctionIdentifier, callback: (params: IParams) => boolean | Promise<boolean>): IDisposable {\n    if (id.final === 't' && !id.prefix && !id.intermediates) {\n      // security: always check whether window option is allowed\n      return this._parser.registerCsiHandler(id, params => {\n        if (!paramToWindowOption(params.params[0], this._optionsService.rawOptions.windowOptions)) {\n          return true;\n        }\n        return callback(params);\n      });\n    }\n    return this._parser.registerCsiHandler(id, callback);\n  }\n\n  /**\n   * Forward registerDcsHandler from parser.\n   */\n  public registerDcsHandler(id: IFunctionIdentifier, callback: (data: string, param: IParams) => boolean | Promise<boolean>): IDisposable {\n    return this._parser.registerDcsHandler(id, new DcsHandler(callback));\n  }\n\n  /**\n   * Forward registerEscHandler from parser.\n   */\n  public registerEscHandler(id: IFunctionIdentifier, callback: () => boolean | Promise<boolean>): IDisposable {\n    return this._parser.registerEscHandler(id, callback);\n  }\n\n  /**\n   * Forward registerOscHandler from parser.\n   */\n  public registerOscHandler(ident: number, callback: (data: string) => boolean | Promise<boolean>): IDisposable {\n    return this._parser.registerOscHandler(ident, new OscHandler(callback));\n  }\n\n  /**\n   * BEL\n   * Bell (Ctrl-G).\n   *\n   * @vt: #Y   C0    BEL   \"Bell\"  \"\\a, \\x07\"  \"Ring the bell.\"\n   * The behavior of the bell is further customizable with `ITerminalOptions.bellStyle`\n   * and `ITerminalOptions.bellSound`.\n   */\n  public bell(): boolean {\n    this._onRequestBell.fire();\n    return true;\n  }\n\n  /**\n   * LF\n   * Line Feed or New Line (NL).  (LF  is Ctrl-J).\n   *\n   * @vt: #Y   C0    LF   \"Line Feed\"            \"\\n, \\x0A\"  \"Move the cursor one row down, scrolling if needed.\"\n   * Scrolling is restricted to scroll margins and will only happen on the bottom line.\n   *\n   * @vt: #Y   C0    VT   \"Vertical Tabulation\"  \"\\v, \\x0B\"  \"Treated as LF.\"\n   * @vt: #Y   C0    FF   \"Form Feed\"            \"\\f, \\x0C\"  \"Treated as LF.\"\n   */\n  public lineFeed(): boolean {\n    this._dirtyRowTracker.markDirty(this._activeBuffer.y);\n    if (this._optionsService.rawOptions.convertEol) {\n      this._activeBuffer.x = 0;\n    }\n    this._activeBuffer.y++;\n    if (this._activeBuffer.y === this._activeBuffer.scrollBottom + 1) {\n      this._activeBuffer.y--;\n      this._bufferService.scroll(this._eraseAttrData());\n    } else if (this._activeBuffer.y >= this._bufferService.rows) {\n      this._activeBuffer.y = this._bufferService.rows - 1;\n    }\n    // If the end of the line is hit, prevent this action from wrapping around to the next line.\n    if (this._activeBuffer.x >= this._bufferService.cols) {\n      this._activeBuffer.x--;\n    }\n    this._dirtyRowTracker.markDirty(this._activeBuffer.y);\n\n    this._onLineFeed.fire();\n    return true;\n  }\n\n  /**\n   * CR\n   * Carriage Return (Ctrl-M).\n   *\n   * @vt: #Y   C0    CR   \"Carriage Return\"  \"\\r, \\x0D\"  \"Move the cursor to the beginning of the row.\"\n   */\n  public carriageReturn(): boolean {\n    this._activeBuffer.x = 0;\n    return true;\n  }\n\n  /**\n   * BS\n   * Backspace (Ctrl-H).\n   *\n   * @vt: #Y   C0    BS   \"Backspace\"  \"\\b, \\x08\"  \"Move the cursor one position to the left.\"\n   * By default it is not possible to move the cursor past the leftmost position.\n   * If `reverse wrap-around` (`CSI ? 45 h`) is set, a previous soft line wrap (DECAWM)\n   * can be undone with BS within the scroll margins. In that case the cursor will wrap back\n   * to the end of the previous row. Note that it is not possible to peek back into the scrollbuffer\n   * with the cursor, thus at the home position (top-leftmost cell) this has no effect.\n   */\n  public backspace(): boolean {\n    // reverse wrap-around is disabled\n    if (!this._coreService.decPrivateModes.reverseWraparound) {\n      this._restrictCursor();\n      if (this._activeBuffer.x > 0) {\n        this._activeBuffer.x--;\n      }\n      return true;\n    }\n\n    // reverse wrap-around is enabled\n    // other than for normal operation mode, reverse wrap-around allows the cursor\n    // to be at x=cols to be able to address the last cell of a row by BS\n    this._restrictCursor(this._bufferService.cols);\n\n    if (this._activeBuffer.x > 0) {\n      this._activeBuffer.x--;\n    } else {\n      /**\n       * reverse wrap-around handling:\n       * Our implementation deviates from xterm on purpose. Details:\n       * - only previous soft NLs can be reversed (isWrapped=true)\n       * - only works within scrollborders (top/bottom, left/right not yet supported)\n       * - cannot peek into scrollbuffer\n       * - any cursor movement sequence keeps working as expected\n       */\n      if (this._activeBuffer.x === 0\n        && this._activeBuffer.y > this._activeBuffer.scrollTop\n        && this._activeBuffer.y <= this._activeBuffer.scrollBottom\n        && this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y)?.isWrapped) {\n        this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y)!.isWrapped = false;\n        this._activeBuffer.y--;\n        this._activeBuffer.x = this._bufferService.cols - 1;\n        // find last taken cell - last cell can have 3 different states:\n        // - hasContent(true) + hasWidth(1): narrow char - we are done\n        // - hasWidth(0): second part of wide char - we are done\n        // - hasContent(false) + hasWidth(1): empty cell due to early wrapping wide char, go one cell further back\n        const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y)!;\n        if (line.hasWidth(this._activeBuffer.x) && !line.hasContent(this._activeBuffer.x)) {\n          this._activeBuffer.x--;\n          // We do this only once, since width=1 + hasContent=false currently happens only once before\n          // early wrapping of a wide char.\n          // This needs to be fixed once we support graphemes taking more than 2 cells.\n        }\n      }\n    }\n    this._restrictCursor();\n    return true;\n  }\n\n  /**\n   * TAB\n   * Horizontal Tab (HT) (Ctrl-I).\n   *\n   * @vt: #Y   C0    HT   \"Horizontal Tabulation\"  \"\\t, \\x09\"  \"Move the cursor to the next character tab stop.\"\n   */\n  public tab(): boolean {\n    if (this._activeBuffer.x >= this._bufferService.cols) {\n      return true;\n    }\n    const originalX = this._activeBuffer.x;\n    this._activeBuffer.x = this._activeBuffer.nextStop();\n    if (this._optionsService.rawOptions.screenReaderMode) {\n      this._onA11yTab.fire(this._activeBuffer.x - originalX);\n    }\n    return true;\n  }\n\n  /**\n   * SO\n   * Shift Out (Ctrl-N) -> Switch to Alternate Character Set.  This invokes the\n   * G1 character set.\n   *\n   * @vt: #P[Only limited ISO-2022 charset support.]  C0    SO   \"Shift Out\"  \"\\x0E\"  \"Switch to an alternative character set.\"\n   */\n  public shiftOut(): boolean {\n    this._charsetService.setgLevel(1);\n    return true;\n  }\n\n  /**\n   * SI\n   * Shift In (Ctrl-O) -> Switch to Standard Character Set.  This invokes the G0\n   * character set (the default).\n   *\n   * @vt: #Y   C0    SI   \"Shift In\"   \"\\x0F\"  \"Return to regular character set after Shift Out.\"\n   */\n  public shiftIn(): boolean {\n    this._charsetService.setgLevel(0);\n    return true;\n  }\n\n  /**\n   * Restrict cursor to viewport size / scroll margin (origin mode).\n   */\n  private _restrictCursor(maxCol: number = this._bufferService.cols - 1): void {\n    this._activeBuffer.x = Math.min(maxCol, Math.max(0, this._activeBuffer.x));\n    this._activeBuffer.y = this._coreService.decPrivateModes.origin\n      ? Math.min(this._activeBuffer.scrollBottom, Math.max(this._activeBuffer.scrollTop, this._activeBuffer.y))\n      : Math.min(this._bufferService.rows - 1, Math.max(0, this._activeBuffer.y));\n    this._dirtyRowTracker.markDirty(this._activeBuffer.y);\n  }\n\n  /**\n   * Set absolute cursor position.\n   */\n  private _setCursor(x: number, y: number): void {\n    this._dirtyRowTracker.markDirty(this._activeBuffer.y);\n    if (this._coreService.decPrivateModes.origin) {\n      this._activeBuffer.x = x;\n      this._activeBuffer.y = this._activeBuffer.scrollTop + y;\n    } else {\n      this._activeBuffer.x = x;\n      this._activeBuffer.y = y;\n    }\n    this._restrictCursor();\n    this._dirtyRowTracker.markDirty(this._activeBuffer.y);\n  }\n\n  /**\n   * Set relative cursor position.\n   */\n  private _moveCursor(x: number, y: number): void {\n    // for relative changes we have to make sure we are within 0 .. cols/rows - 1\n    // before calculating the new position\n    this._restrictCursor();\n    this._setCursor(this._activeBuffer.x + x, this._activeBuffer.y + y);\n  }\n\n  /**\n   * CSI Ps A\n   * Cursor Up Ps Times (default = 1) (CUU).\n   *\n   * @vt: #Y CSI CUU   \"Cursor Up\"   \"CSI Ps A\"  \"Move cursor `Ps` times up (default=1).\"\n   * If the cursor would pass the top scroll margin, it will stop there.\n   */\n  public cursorUp(params: IParams): boolean {\n    // stop at scrollTop\n    const diffToTop = this._activeBuffer.y - this._activeBuffer.scrollTop;\n    if (diffToTop >= 0) {\n      this._moveCursor(0, -Math.min(diffToTop, params.params[0] || 1));\n    } else {\n      this._moveCursor(0, -(params.params[0] || 1));\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps B\n   * Cursor Down Ps Times (default = 1) (CUD).\n   *\n   * @vt: #Y CSI CUD   \"Cursor Down\"   \"CSI Ps B\"  \"Move cursor `Ps` times down (default=1).\"\n   * If the cursor would pass the bottom scroll margin, it will stop there.\n   */\n  public cursorDown(params: IParams): boolean {\n    // stop at scrollBottom\n    const diffToBottom = this._activeBuffer.scrollBottom - this._activeBuffer.y;\n    if (diffToBottom >= 0) {\n      this._moveCursor(0, Math.min(diffToBottom, params.params[0] || 1));\n    } else {\n      this._moveCursor(0, params.params[0] || 1);\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps C\n   * Cursor Forward Ps Times (default = 1) (CUF).\n   *\n   * @vt: #Y CSI CUF   \"Cursor Forward\"    \"CSI Ps C\"  \"Move cursor `Ps` times forward (default=1).\"\n   */\n  public cursorForward(params: IParams): boolean {\n    this._moveCursor(params.params[0] || 1, 0);\n    return true;\n  }\n\n  /**\n   * CSI Ps D\n   * Cursor Backward Ps Times (default = 1) (CUB).\n   *\n   * @vt: #Y CSI CUB   \"Cursor Backward\"   \"CSI Ps D\"  \"Move cursor `Ps` times backward (default=1).\"\n   */\n  public cursorBackward(params: IParams): boolean {\n    this._moveCursor(-(params.params[0] || 1), 0);\n    return true;\n  }\n\n  /**\n   * CSI Ps E\n   * Cursor Next Line Ps Times (default = 1) (CNL).\n   * Other than cursorDown (CUD) also set the cursor to first column.\n   *\n   * @vt: #Y CSI CNL   \"Cursor Next Line\"  \"CSI Ps E\"  \"Move cursor `Ps` times down (default=1) and to the first column.\"\n   * Same as CUD, additionally places the cursor at the first column.\n   */\n  public cursorNextLine(params: IParams): boolean {\n    this.cursorDown(params);\n    this._activeBuffer.x = 0;\n    return true;\n  }\n\n  /**\n   * CSI Ps F\n   * Cursor Previous Line Ps Times (default = 1) (CPL).\n   * Other than cursorUp (CUU) also set the cursor to first column.\n   *\n   * @vt: #Y CSI CPL   \"Cursor Backward\"   \"CSI Ps F\"  \"Move cursor `Ps` times up (default=1) and to the first column.\"\n   * Same as CUU, additionally places the cursor at the first column.\n   */\n  public cursorPrecedingLine(params: IParams): boolean {\n    this.cursorUp(params);\n    this._activeBuffer.x = 0;\n    return true;\n  }\n\n  /**\n   * CSI Ps G\n   * Cursor Character Absolute  [column] (default = [row,1]) (CHA).\n   *\n   * @vt: #Y CSI CHA   \"Cursor Horizontal Absolute\" \"CSI Ps G\" \"Move cursor to `Ps`-th column of the active row (default=1).\"\n   */\n  public cursorCharAbsolute(params: IParams): boolean {\n    this._setCursor((params.params[0] || 1) - 1, this._activeBuffer.y);\n    return true;\n  }\n\n  /**\n   * CSI Ps ; Ps H\n   * Cursor Position [row;column] (default = [1,1]) (CUP).\n   *\n   * @vt: #Y CSI CUP   \"Cursor Position\"   \"CSI Ps ; Ps H\"  \"Set cursor to position [`Ps`, `Ps`] (default = [1, 1]).\"\n   * If ORIGIN mode is set, places the cursor to the absolute position within the scroll margins.\n   * If ORIGIN mode is not set, places the cursor to the absolute position within the viewport.\n   * Note that the coordinates are 1-based, thus the top left position starts at `1 ; 1`.\n   */\n  public cursorPosition(params: IParams): boolean {\n    this._setCursor(\n      // col\n      (params.length >= 2) ? (params.params[1] || 1) - 1 : 0,\n      // row\n      (params.params[0] || 1) - 1\n    );\n    return true;\n  }\n\n  /**\n   * CSI Pm `  Character Position Absolute\n   *   [column] (default = [row,1]) (HPA).\n   * Currently same functionality as CHA.\n   *\n   * @vt: #Y CSI HPA   \"Horizontal Position Absolute\"  \"CSI Ps ` \" \"Same as CHA.\"\n   */\n  public charPosAbsolute(params: IParams): boolean {\n    this._setCursor((params.params[0] || 1) - 1, this._activeBuffer.y);\n    return true;\n  }\n\n  /**\n   * CSI Pm a  Character Position Relative\n   *   [columns] (default = [row,col+1]) (HPR)\n   *\n   * @vt: #Y CSI HPR   \"Horizontal Position Relative\"  \"CSI Ps a\"  \"Same as CUF.\"\n   */\n  public hPositionRelative(params: IParams): boolean {\n    this._moveCursor(params.params[0] || 1, 0);\n    return true;\n  }\n\n  /**\n   * CSI Pm d  Vertical Position Absolute (VPA)\n   *   [row] (default = [1,column])\n   *\n   * @vt: #Y CSI VPA   \"Vertical Position Absolute\"    \"CSI Ps d\"  \"Move cursor to `Ps`-th row (default=1).\"\n   */\n  public linePosAbsolute(params: IParams): boolean {\n    this._setCursor(this._activeBuffer.x, (params.params[0] || 1) - 1);\n    return true;\n  }\n\n  /**\n   * CSI Pm e  Vertical Position Relative (VPR)\n   *   [rows] (default = [row+1,column])\n   * reuse CSI Ps B ?\n   *\n   * @vt: #Y CSI VPR   \"Vertical Position Relative\"    \"CSI Ps e\"  \"Move cursor `Ps` times down (default=1).\"\n   */\n  public vPositionRelative(params: IParams): boolean {\n    this._moveCursor(0, params.params[0] || 1);\n    return true;\n  }\n\n  /**\n   * CSI Ps ; Ps f\n   *   Horizontal and Vertical Position [row;column] (default =\n   *   [1,1]) (HVP).\n   *   Same as CUP.\n   *\n   * @vt: #Y CSI HVP   \"Horizontal and Vertical Position\" \"CSI Ps ; Ps f\"  \"Same as CUP.\"\n   */\n  public hVPosition(params: IParams): boolean {\n    this.cursorPosition(params);\n    return true;\n  }\n\n  /**\n   * CSI Ps g  Tab Clear (TBC).\n   *     Ps = 0  -> Clear Current Column (default).\n   *     Ps = 3  -> Clear All.\n   * Potentially:\n   *   Ps = 2  -> Clear Stops on Line.\n   *   http://vt100.net/annarbor/aaa-ug/section6.html\n   *\n   * @vt: #Y CSI TBC   \"Tab Clear\" \"CSI Ps g\"  \"Clear tab stops at current position (0) or all (3) (default=0).\"\n   * Clearing tabstops off the active row (Ps = 2, VT100) is currently not supported.\n   */\n  public tabClear(params: IParams): boolean {\n    const param = params.params[0];\n    if (param === 0) {\n      delete this._activeBuffer.tabs[this._activeBuffer.x];\n    } else if (param === 3) {\n      this._activeBuffer.tabs = {};\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps I\n   *   Cursor Forward Tabulation Ps tab stops (default = 1) (CHT).\n   *\n   * @vt: #Y CSI CHT   \"Cursor Horizontal Tabulation\" \"CSI Ps I\" \"Move cursor `Ps` times tabs forward (default=1).\"\n   */\n  public cursorForwardTab(params: IParams): boolean {\n    if (this._activeBuffer.x >= this._bufferService.cols) {\n      return true;\n    }\n    let param = params.params[0] || 1;\n    while (param--) {\n      this._activeBuffer.x = this._activeBuffer.nextStop();\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps Z  Cursor Backward Tabulation Ps tab stops (default = 1) (CBT).\n   *\n   * @vt: #Y CSI CBT   \"Cursor Backward Tabulation\"  \"CSI Ps Z\"  \"Move cursor `Ps` tabs backward (default=1).\"\n   */\n  public cursorBackwardTab(params: IParams): boolean {\n    if (this._activeBuffer.x >= this._bufferService.cols) {\n      return true;\n    }\n    let param = params.params[0] || 1;\n\n    while (param--) {\n      this._activeBuffer.x = this._activeBuffer.prevStop();\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps \" q  Select Character Protection Attribute (DECSCA).\n   *\n   * @vt: #Y CSI DECSCA   \"Select Character Protection Attribute\"  \"CSI Ps \" q\"  \"Whether DECSED and DECSEL can erase (0=default, 2) or not (1).\"\n   */\n  public selectProtected(params: IParams): boolean {\n    const p = params.params[0];\n    if (p === 1) this._curAttrData.bg |= BgFlags.PROTECTED;\n    if (p === 2 || p === 0) this._curAttrData.bg &= ~BgFlags.PROTECTED;\n    return true;\n  }\n\n\n  /**\n   * Helper method to erase cells in a terminal row.\n   * The cell gets replaced with the eraseChar of the terminal.\n   * @param y The row index relative to the viewport.\n   * @param start The start x index of the range to be erased.\n   * @param end The end x index of the range to be erased (exclusive).\n   * @param clearWrap clear the isWrapped flag\n   * @param respectProtect Whether to respect the protection attribute (DECSCA).\n   */\n  private _eraseInBufferLine(y: number, start: number, end: number, clearWrap: boolean = false, respectProtect: boolean = false): void {\n    const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + y)!;\n    line.replaceCells(\n      start,\n      end,\n      this._activeBuffer.getNullCell(this._eraseAttrData()),\n      this._eraseAttrData(),\n      respectProtect\n    );\n    if (clearWrap) {\n      line.isWrapped = false;\n    }\n  }\n\n  /**\n   * Helper method to reset cells in a terminal row.\n   * The cell gets replaced with the eraseChar of the terminal and the isWrapped property is set to false.\n   * @param y row index\n   */\n  private _resetBufferLine(y: number, respectProtect: boolean = false): void {\n    const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + y)!;\n    line.fill(this._activeBuffer.getNullCell(this._eraseAttrData()), respectProtect);\n    this._bufferService.buffer.clearMarkers(this._activeBuffer.ybase + y);\n    line.isWrapped = false;\n  }\n\n  /**\n   * CSI Ps J  Erase in Display (ED).\n   *     Ps = 0  -> Erase Below (default).\n   *     Ps = 1  -> Erase Above.\n   *     Ps = 2  -> Erase All.\n   *     Ps = 3  -> Erase Saved Lines (xterm).\n   * CSI ? Ps J\n   *   Erase in Display (DECSED).\n   *     Ps = 0  -> Selective Erase Below (default).\n   *     Ps = 1  -> Selective Erase Above.\n   *     Ps = 2  -> Selective Erase All.\n   *\n   * @vt: #Y CSI ED  \"Erase In Display\"  \"CSI Ps J\"  \"Erase various parts of the viewport.\"\n   * Supported param values:\n   *\n   * | Ps | Effect                                                       |\n   * | -- | ------------------------------------------------------------ |\n   * | 0  | Erase from the cursor through the end of the viewport.       |\n   * | 1  | Erase from the beginning of the viewport through the cursor. |\n   * | 2  | Erase complete viewport.                                     |\n   * | 3  | Erase scrollback.                                            |\n   *\n   * @vt: #Y CSI DECSED   \"Selective Erase In Display\"  \"CSI ? Ps J\"  \"Same as ED with respecting protection flag.\"\n   */\n  public eraseInDisplay(params: IParams, respectProtect: boolean = false): boolean {\n    this._restrictCursor(this._bufferService.cols);\n    let j;\n    switch (params.params[0]) {\n      case 0:\n        j = this._activeBuffer.y;\n        this._dirtyRowTracker.markDirty(j);\n        this._eraseInBufferLine(j++, this._activeBuffer.x, this._bufferService.cols, this._activeBuffer.x === 0, respectProtect);\n        for (; j < this._bufferService.rows; j++) {\n          this._resetBufferLine(j, respectProtect);\n        }\n        this._dirtyRowTracker.markDirty(j);\n        break;\n      case 1:\n        j = this._activeBuffer.y;\n        this._dirtyRowTracker.markDirty(j);\n        // Deleted front part of line and everything before. This line will no longer be wrapped.\n        this._eraseInBufferLine(j, 0, this._activeBuffer.x + 1, true, respectProtect);\n        if (this._activeBuffer.x + 1 >= this._bufferService.cols) {\n          // Deleted entire previous line. This next line can no longer be wrapped.\n          this._activeBuffer.lines.get(j + 1)!.isWrapped = false;\n        }\n        while (j--) {\n          this._resetBufferLine(j, respectProtect);\n        }\n        this._dirtyRowTracker.markDirty(0);\n        break;\n      case 2:\n        j = this._bufferService.rows;\n        this._dirtyRowTracker.markDirty(j - 1);\n        while (j--) {\n          this._resetBufferLine(j, respectProtect);\n        }\n        this._dirtyRowTracker.markDirty(0);\n        break;\n      case 3:\n        // Clear scrollback (everything not in viewport)\n        const scrollBackSize = this._activeBuffer.lines.length - this._bufferService.rows;\n        if (scrollBackSize > 0) {\n          this._activeBuffer.lines.trimStart(scrollBackSize);\n          this._activeBuffer.ybase = Math.max(this._activeBuffer.ybase - scrollBackSize, 0);\n          this._activeBuffer.ydisp = Math.max(this._activeBuffer.ydisp - scrollBackSize, 0);\n          // Force a scroll event to refresh viewport\n          this._onScroll.fire(0);\n        }\n        break;\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps K  Erase in Line (EL).\n   *     Ps = 0  -> Erase to Right (default).\n   *     Ps = 1  -> Erase to Left.\n   *     Ps = 2  -> Erase All.\n   * CSI ? Ps K\n   *   Erase in Line (DECSEL).\n   *     Ps = 0  -> Selective Erase to Right (default).\n   *     Ps = 1  -> Selective Erase to Left.\n   *     Ps = 2  -> Selective Erase All.\n   *\n   * @vt: #Y CSI EL    \"Erase In Line\"  \"CSI Ps K\"  \"Erase various parts of the active row.\"\n   * Supported param values:\n   *\n   * | Ps | Effect                                                   |\n   * | -- | -------------------------------------------------------- |\n   * | 0  | Erase from the cursor through the end of the row.        |\n   * | 1  | Erase from the beginning of the line through the cursor. |\n   * | 2  | Erase complete line.                                     |\n   *\n   * @vt: #Y CSI DECSEL   \"Selective Erase In Line\"  \"CSI ? Ps K\"  \"Same as EL with respecting protecting flag.\"\n   */\n  public eraseInLine(params: IParams, respectProtect: boolean = false): boolean {\n    this._restrictCursor(this._bufferService.cols);\n    switch (params.params[0]) {\n      case 0:\n        this._eraseInBufferLine(this._activeBuffer.y, this._activeBuffer.x, this._bufferService.cols, this._activeBuffer.x === 0, respectProtect);\n        break;\n      case 1:\n        this._eraseInBufferLine(this._activeBuffer.y, 0, this._activeBuffer.x + 1, false, respectProtect);\n        break;\n      case 2:\n        this._eraseInBufferLine(this._activeBuffer.y, 0, this._bufferService.cols, true, respectProtect);\n        break;\n    }\n    this._dirtyRowTracker.markDirty(this._activeBuffer.y);\n    return true;\n  }\n\n  /**\n   * CSI Ps L\n   * Insert Ps Line(s) (default = 1) (IL).\n   *\n   * @vt: #Y CSI IL  \"Insert Line\"   \"CSI Ps L\"  \"Insert `Ps` blank lines at active row (default=1).\"\n   * For every inserted line at the scroll top one line at the scroll bottom gets removed.\n   * The cursor is set to the first column.\n   * IL has no effect if the cursor is outside the scroll margins.\n   */\n  public insertLines(params: IParams): boolean {\n    this._restrictCursor();\n    let param = params.params[0] || 1;\n\n    if (this._activeBuffer.y > this._activeBuffer.scrollBottom || this._activeBuffer.y < this._activeBuffer.scrollTop) {\n      return true;\n    }\n\n    const row: number = this._activeBuffer.ybase + this._activeBuffer.y;\n\n    const scrollBottomRowsOffset = this._bufferService.rows - 1 - this._activeBuffer.scrollBottom;\n    const scrollBottomAbsolute = this._bufferService.rows - 1 + this._activeBuffer.ybase - scrollBottomRowsOffset + 1;\n    while (param--) {\n      // test: echo -e '\\e[44m\\e[1L\\e[0m'\n      // blankLine(true) - xterm/linux behavior\n      this._activeBuffer.lines.splice(scrollBottomAbsolute - 1, 1);\n      this._activeBuffer.lines.splice(row, 0, this._activeBuffer.getBlankLine(this._eraseAttrData()));\n    }\n\n    this._dirtyRowTracker.markRangeDirty(this._activeBuffer.y, this._activeBuffer.scrollBottom);\n    this._activeBuffer.x = 0; // see https://vt100.net/docs/vt220-rm/chapter4.html - vt220 only?\n    return true;\n  }\n\n  /**\n   * CSI Ps M\n   * Delete Ps Line(s) (default = 1) (DL).\n   *\n   * @vt: #Y CSI DL  \"Delete Line\"   \"CSI Ps M\"  \"Delete `Ps` lines at active row (default=1).\"\n   * For every deleted line at the scroll top one blank line at the scroll bottom gets appended.\n   * The cursor is set to the first column.\n   * DL has no effect if the cursor is outside the scroll margins.\n   */\n  public deleteLines(params: IParams): boolean {\n    this._restrictCursor();\n    let param = params.params[0] || 1;\n\n    if (this._activeBuffer.y > this._activeBuffer.scrollBottom || this._activeBuffer.y < this._activeBuffer.scrollTop) {\n      return true;\n    }\n\n    const row: number = this._activeBuffer.ybase + this._activeBuffer.y;\n\n    let j: number;\n    j = this._bufferService.rows - 1 - this._activeBuffer.scrollBottom;\n    j = this._bufferService.rows - 1 + this._activeBuffer.ybase - j;\n    while (param--) {\n      // test: echo -e '\\e[44m\\e[1M\\e[0m'\n      // blankLine(true) - xterm/linux behavior\n      this._activeBuffer.lines.splice(row, 1);\n      this._activeBuffer.lines.splice(j, 0, this._activeBuffer.getBlankLine(this._eraseAttrData()));\n    }\n\n    this._dirtyRowTracker.markRangeDirty(this._activeBuffer.y, this._activeBuffer.scrollBottom);\n    this._activeBuffer.x = 0; // see https://vt100.net/docs/vt220-rm/chapter4.html - vt220 only?\n    return true;\n  }\n\n  /**\n   * CSI Ps @\n   * Insert Ps (Blank) Character(s) (default = 1) (ICH).\n   *\n   * @vt: #Y CSI ICH  \"Insert Characters\"   \"CSI Ps @\"  \"Insert `Ps` (blank) characters (default = 1).\"\n   * The ICH sequence inserts `Ps` blank characters. The cursor remains at the beginning of the blank characters.\n   * Text between the cursor and right margin moves to the right. Characters moved past the right margin are lost.\n   *\n   *\n   * FIXME: check against xterm - should not work outside of scroll margins (see VT520 manual)\n   */\n  public insertChars(params: IParams): boolean {\n    this._restrictCursor();\n    const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y);\n    if (line) {\n      line.insertCells(\n        this._activeBuffer.x,\n        params.params[0] || 1,\n        this._activeBuffer.getNullCell(this._eraseAttrData()),\n        this._eraseAttrData()\n      );\n      this._dirtyRowTracker.markDirty(this._activeBuffer.y);\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps P\n   * Delete Ps Character(s) (default = 1) (DCH).\n   *\n   * @vt: #Y CSI DCH   \"Delete Character\"  \"CSI Ps P\"  \"Delete `Ps` characters (default=1).\"\n   * As characters are deleted, the remaining characters between the cursor and right margin move to the left.\n   * Character attributes move with the characters. The terminal adds blank characters at the right margin.\n   *\n   *\n   * FIXME: check against xterm - should not work outside of scroll margins (see VT520 manual)\n   */\n  public deleteChars(params: IParams): boolean {\n    this._restrictCursor();\n    const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y);\n    if (line) {\n      line.deleteCells(\n        this._activeBuffer.x,\n        params.params[0] || 1,\n        this._activeBuffer.getNullCell(this._eraseAttrData()),\n        this._eraseAttrData()\n      );\n      this._dirtyRowTracker.markDirty(this._activeBuffer.y);\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps S  Scroll up Ps lines (default = 1) (SU).\n   *\n   * @vt: #Y CSI SU  \"Scroll Up\"   \"CSI Ps S\"  \"Scroll `Ps` lines up (default=1).\"\n   *\n   *\n   * FIXME: scrolled out lines at top = 1 should add to scrollback (xterm)\n   */\n  public scrollUp(params: IParams): boolean {\n    let param = params.params[0] || 1;\n\n    while (param--) {\n      this._activeBuffer.lines.splice(this._activeBuffer.ybase + this._activeBuffer.scrollTop, 1);\n      this._activeBuffer.lines.splice(this._activeBuffer.ybase + this._activeBuffer.scrollBottom, 0, this._activeBuffer.getBlankLine(this._eraseAttrData()));\n    }\n    this._dirtyRowTracker.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom);\n    return true;\n  }\n\n  /**\n   * CSI Ps T  Scroll down Ps lines (default = 1) (SD).\n   *\n   * @vt: #Y CSI SD  \"Scroll Down\"   \"CSI Ps T\"  \"Scroll `Ps` lines down (default=1).\"\n   */\n  public scrollDown(params: IParams): boolean {\n    let param = params.params[0] || 1;\n\n    while (param--) {\n      this._activeBuffer.lines.splice(this._activeBuffer.ybase + this._activeBuffer.scrollBottom, 1);\n      this._activeBuffer.lines.splice(this._activeBuffer.ybase + this._activeBuffer.scrollTop, 0, this._activeBuffer.getBlankLine(DEFAULT_ATTR_DATA));\n    }\n    this._dirtyRowTracker.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom);\n    return true;\n  }\n\n  /**\n   * CSI Ps SP @  Scroll left Ps columns (default = 1) (SL) ECMA-48\n   *\n   * Notation: (Pn)\n   * Representation: CSI Pn 02/00 04/00\n   * Parameter default value: Pn = 1\n   * SL causes the data in the presentation component to be moved by n character positions\n   * if the line orientation is horizontal, or by n line positions if the line orientation\n   * is vertical, such that the data appear to move to the left; where n equals the value of Pn.\n   * The active presentation position is not affected by this control function.\n   *\n   * Supported:\n   *   - always left shift (no line orientation setting respected)\n   *\n   * @vt: #Y CSI SL  \"Scroll Left\" \"CSI Ps SP @\" \"Scroll viewport `Ps` times to the left.\"\n   * SL moves the content of all lines within the scroll margins `Ps` times to the left.\n   * SL has no effect outside of the scroll margins.\n   */\n  public scrollLeft(params: IParams): boolean {\n    if (this._activeBuffer.y > this._activeBuffer.scrollBottom || this._activeBuffer.y < this._activeBuffer.scrollTop) {\n      return true;\n    }\n    const param = params.params[0] || 1;\n    for (let y = this._activeBuffer.scrollTop; y <= this._activeBuffer.scrollBottom; ++y) {\n      const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + y)!;\n      line.deleteCells(0, param, this._activeBuffer.getNullCell(this._eraseAttrData()), this._eraseAttrData());\n      line.isWrapped = false;\n    }\n    this._dirtyRowTracker.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom);\n    return true;\n  }\n\n  /**\n   * CSI Ps SP A  Scroll right Ps columns (default = 1) (SR) ECMA-48\n   *\n   * Notation: (Pn)\n   * Representation: CSI Pn 02/00 04/01\n   * Parameter default value: Pn = 1\n   * SR causes the data in the presentation component to be moved by n character positions\n   * if the line orientation is horizontal, or by n line positions if the line orientation\n   * is vertical, such that the data appear to move to the right; where n equals the value of Pn.\n   * The active presentation position is not affected by this control function.\n   *\n   * Supported:\n   *   - always right shift (no line orientation setting respected)\n   *\n   * @vt: #Y CSI SR  \"Scroll Right\"  \"CSI Ps SP A\"   \"Scroll viewport `Ps` times to the right.\"\n   * SL moves the content of all lines within the scroll margins `Ps` times to the right.\n   * Content at the right margin is lost.\n   * SL has no effect outside of the scroll margins.\n   */\n  public scrollRight(params: IParams): boolean {\n    if (this._activeBuffer.y > this._activeBuffer.scrollBottom || this._activeBuffer.y < this._activeBuffer.scrollTop) {\n      return true;\n    }\n    const param = params.params[0] || 1;\n    for (let y = this._activeBuffer.scrollTop; y <= this._activeBuffer.scrollBottom; ++y) {\n      const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + y)!;\n      line.insertCells(0, param, this._activeBuffer.getNullCell(this._eraseAttrData()), this._eraseAttrData());\n      line.isWrapped = false;\n    }\n    this._dirtyRowTracker.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom);\n    return true;\n  }\n\n  /**\n   * CSI Pm ' }\n   * Insert Ps Column(s) (default = 1) (DECIC), VT420 and up.\n   *\n   * @vt: #Y CSI DECIC \"Insert Columns\"  \"CSI Ps ' }\"  \"Insert `Ps` columns at cursor position.\"\n   * DECIC inserts `Ps` times blank columns at the cursor position for all lines with the scroll margins,\n   * moving content to the right. Content at the right margin is lost.\n   * DECIC has no effect outside the scrolling margins.\n   */\n  public insertColumns(params: IParams): boolean {\n    if (this._activeBuffer.y > this._activeBuffer.scrollBottom || this._activeBuffer.y < this._activeBuffer.scrollTop) {\n      return true;\n    }\n    const param = params.params[0] || 1;\n    for (let y = this._activeBuffer.scrollTop; y <= this._activeBuffer.scrollBottom; ++y) {\n      const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + y)!;\n      line.insertCells(this._activeBuffer.x, param, this._activeBuffer.getNullCell(this._eraseAttrData()), this._eraseAttrData());\n      line.isWrapped = false;\n    }\n    this._dirtyRowTracker.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom);\n    return true;\n  }\n\n  /**\n   * CSI Pm ' ~\n   * Delete Ps Column(s) (default = 1) (DECDC), VT420 and up.\n   *\n   * @vt: #Y CSI DECDC \"Delete Columns\"  \"CSI Ps ' ~\"  \"Delete `Ps` columns at cursor position.\"\n   * DECDC deletes `Ps` times columns at the cursor position for all lines with the scroll margins,\n   * moving content to the left. Blank columns are added at the right margin.\n   * DECDC has no effect outside the scrolling margins.\n   */\n  public deleteColumns(params: IParams): boolean {\n    if (this._activeBuffer.y > this._activeBuffer.scrollBottom || this._activeBuffer.y < this._activeBuffer.scrollTop) {\n      return true;\n    }\n    const param = params.params[0] || 1;\n    for (let y = this._activeBuffer.scrollTop; y <= this._activeBuffer.scrollBottom; ++y) {\n      const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + y)!;\n      line.deleteCells(this._activeBuffer.x, param, this._activeBuffer.getNullCell(this._eraseAttrData()), this._eraseAttrData());\n      line.isWrapped = false;\n    }\n    this._dirtyRowTracker.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom);\n    return true;\n  }\n\n  /**\n   * CSI Ps X\n   * Erase Ps Character(s) (default = 1) (ECH).\n   *\n   * @vt: #Y CSI ECH   \"Erase Character\"   \"CSI Ps X\"  \"Erase `Ps` characters from current cursor position to the right (default=1).\"\n   * ED erases `Ps` characters from current cursor position to the right.\n   * ED works inside or outside the scrolling margins.\n   */\n  public eraseChars(params: IParams): boolean {\n    this._restrictCursor();\n    const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y);\n    if (line) {\n      line.replaceCells(\n        this._activeBuffer.x,\n        this._activeBuffer.x + (params.params[0] || 1),\n        this._activeBuffer.getNullCell(this._eraseAttrData()),\n        this._eraseAttrData()\n      );\n      this._dirtyRowTracker.markDirty(this._activeBuffer.y);\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps b  Repeat the preceding graphic character Ps times (REP).\n   * From ECMA 48 (@see http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-048.pdf)\n   *    Notation: (Pn)\n   *    Representation: CSI Pn 06/02\n   *    Parameter default value: Pn = 1\n   *    REP is used to indicate that the preceding character in the data stream,\n   *    if it is a graphic character (represented by one or more bit combinations) including SPACE,\n   *    is to be repeated n times, where n equals the value of Pn.\n   *    If the character preceding REP is a control function or part of a control function,\n   *    the effect of REP is not defined by this Standard.\n   *\n   * Since we propagate the terminal as xterm-256color we have to follow xterm's behavior:\n   *    - fullwidth + surrogate chars are ignored\n   *    - for combining chars only the base char gets repeated\n   *    - text attrs are applied normally\n   *    - wrap around is respected\n   *    - any valid sequence resets the carried forward char\n   *\n   * Note: To get reset on a valid sequence working correctly without much runtime penalty,\n   * the preceding codepoint is stored on the parser in `this.print` and reset during `parser.parse`.\n   *\n   * @vt: #Y CSI REP   \"Repeat Preceding Character\"    \"CSI Ps b\"  \"Repeat preceding character `Ps` times (default=1).\"\n   * REP repeats the previous character `Ps` times advancing the cursor, also wrapping if DECAWM is set.\n   * REP has no effect if the sequence does not follow a printable ASCII character\n   * (NOOP for any other sequence in between or NON ASCII characters).\n   */\n  public repeatPrecedingCharacter(params: IParams): boolean {\n    if (!this._parser.precedingCodepoint) {\n      return true;\n    }\n    // call print to insert the chars and handle correct wrapping\n    const length = params.params[0] || 1;\n    const data = new Uint32Array(length);\n    for (let i = 0; i < length; ++i) {\n      data[i] = this._parser.precedingCodepoint;\n    }\n    this.print(data, 0, data.length);\n    return true;\n  }\n\n  /**\n   * CSI Ps c  Send Device Attributes (Primary DA).\n   *     Ps = 0  or omitted -> request attributes from terminal.  The\n   *     response depends on the decTerminalID resource setting.\n   *     -> CSI ? 1 ; 2 c  (``VT100 with Advanced Video Option'')\n   *     -> CSI ? 1 ; 0 c  (``VT101 with No Options'')\n   *     -> CSI ? 6 c  (``VT102'')\n   *     -> CSI ? 6 0 ; 1 ; 2 ; 6 ; 8 ; 9 ; 1 5 ; c  (``VT220'')\n   *   The VT100-style response parameters do not mean anything by\n   *   themselves.  VT220 parameters do, telling the host what fea-\n   *   tures the terminal supports:\n   *     Ps = 1  -> 132-columns.\n   *     Ps = 2  -> Printer.\n   *     Ps = 6  -> Selective erase.\n   *     Ps = 8  -> User-defined keys.\n   *     Ps = 9  -> National replacement character sets.\n   *     Ps = 1 5  -> Technical characters.\n   *     Ps = 2 2  -> ANSI color, e.g., VT525.\n   *     Ps = 2 9  -> ANSI text locator (i.e., DEC Locator mode).\n   *\n   * @vt: #Y CSI DA1   \"Primary Device Attributes\"     \"CSI c\"  \"Send primary device attributes.\"\n   *\n   *\n   * TODO: fix and cleanup response\n   */\n  public sendDeviceAttributesPrimary(params: IParams): boolean {\n    if (params.params[0] > 0) {\n      return true;\n    }\n    if (this._is('xterm') || this._is('rxvt-unicode') || this._is('screen')) {\n      this._coreService.triggerDataEvent(C0.ESC + '[?1;2c');\n    } else if (this._is('linux')) {\n      this._coreService.triggerDataEvent(C0.ESC + '[?6c');\n    }\n    return true;\n  }\n\n  /**\n   * CSI > Ps c\n   *   Send Device Attributes (Secondary DA).\n   *     Ps = 0  or omitted -> request the terminal's identification\n   *     code.  The response depends on the decTerminalID resource set-\n   *     ting.  It should apply only to VT220 and up, but xterm extends\n   *     this to VT100.\n   *     -> CSI  > Pp ; Pv ; Pc c\n   *   where Pp denotes the terminal type\n   *     Pp = 0  -> ``VT100''.\n   *     Pp = 1  -> ``VT220''.\n   *   and Pv is the firmware version (for xterm, this was originally\n   *   the XFree86 patch number, starting with 95).  In a DEC termi-\n   *   nal, Pc indicates the ROM cartridge registration number and is\n   *   always zero.\n   * More information:\n   *   xterm/charproc.c - line 2012, for more information.\n   *   vim responds with ^[[?0c or ^[[?1c after the terminal's response (?)\n   *\n   * @vt: #Y CSI DA2   \"Secondary Device Attributes\"   \"CSI > c\" \"Send primary device attributes.\"\n   *\n   *\n   * TODO: fix and cleanup response\n   */\n  public sendDeviceAttributesSecondary(params: IParams): boolean {\n    if (params.params[0] > 0) {\n      return true;\n    }\n    // xterm and urxvt\n    // seem to spit this\n    // out around ~370 times (?).\n    if (this._is('xterm')) {\n      this._coreService.triggerDataEvent(C0.ESC + '[>0;276;0c');\n    } else if (this._is('rxvt-unicode')) {\n      this._coreService.triggerDataEvent(C0.ESC + '[>85;95;0c');\n    } else if (this._is('linux')) {\n      // not supported by linux console.\n      // linux console echoes parameters.\n      this._coreService.triggerDataEvent(params.params[0] + 'c');\n    } else if (this._is('screen')) {\n      this._coreService.triggerDataEvent(C0.ESC + '[>83;40003;0c');\n    }\n    return true;\n  }\n\n  /**\n   * Evaluate if the current terminal is the given argument.\n   * @param term The terminal name to evaluate\n   */\n  private _is(term: string): boolean {\n    return (this._optionsService.rawOptions.termName + '').indexOf(term) === 0;\n  }\n\n  /**\n   * CSI Pm h  Set Mode (SM).\n   *     Ps = 2  -> Keyboard Action Mode (AM).\n   *     Ps = 4  -> Insert Mode (IRM).\n   *     Ps = 1 2  -> Send/receive (SRM).\n   *     Ps = 2 0  -> Automatic Newline (LNM).\n   *\n   * @vt: #P[Only IRM is supported.]    CSI SM    \"Set Mode\"  \"CSI Pm h\"  \"Set various terminal modes.\"\n   * Supported param values by SM:\n   *\n   * | Param | Action                                 | Support |\n   * | ----- | -------------------------------------- | ------- |\n   * | 2     | Keyboard Action Mode (KAM). Always on. | #N      |\n   * | 4     | Insert Mode (IRM).                     | #Y      |\n   * | 12    | Send/receive (SRM). Always off.        | #N      |\n   * | 20    | Automatic Newline (LNM).               | #Y      |\n   */\n  public setMode(params: IParams): boolean {\n    for (let i = 0; i < params.length; i++) {\n      switch (params.params[i]) {\n        case 4:\n          this._coreService.modes.insertMode = true;\n          break;\n        case 20:\n          this._optionsService.options.convertEol = true;\n          break;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * CSI ? Pm h\n   *   DEC Private Mode Set (DECSET).\n   *     Ps = 1  -> Application Cursor Keys (DECCKM).\n   *     Ps = 2  -> Designate USASCII for character sets G0-G3\n   *     (DECANM), and set VT100 mode.\n   *     Ps = 3  -> 132 Column Mode (DECCOLM).\n   *     Ps = 4  -> Smooth (Slow) Scroll (DECSCLM).\n   *     Ps = 5  -> Reverse Video (DECSCNM).\n   *     Ps = 6  -> Origin Mode (DECOM).\n   *     Ps = 7  -> Wraparound Mode (DECAWM).\n   *     Ps = 8  -> Auto-repeat Keys (DECARM).\n   *     Ps = 9  -> Send Mouse X & Y on button press.  See the sec-\n   *     tion Mouse Tracking.\n   *     Ps = 1 0  -> Show toolbar (rxvt).\n   *     Ps = 1 2  -> Start Blinking Cursor (att610).\n   *     Ps = 1 8  -> Print form feed (DECPFF).\n   *     Ps = 1 9  -> Set print extent to full screen (DECPEX).\n   *     Ps = 2 5  -> Show Cursor (DECTCEM).\n   *     Ps = 3 0  -> Show scrollbar (rxvt).\n   *     Ps = 3 5  -> Enable font-shifting functions (rxvt).\n   *     Ps = 3 8  -> Enter Tektronix Mode (DECTEK).\n   *     Ps = 4 0  -> Allow 80 -> 132 Mode.\n   *     Ps = 4 1  -> more(1) fix (see curses resource).\n   *     Ps = 4 2  -> Enable Nation Replacement Character sets (DECN-\n   *     RCM).\n   *     Ps = 4 4  -> Turn On Margin Bell.\n   *     Ps = 4 5  -> Reverse-wraparound Mode.\n   *     Ps = 4 6  -> Start Logging.  This is normally disabled by a\n   *     compile-time option.\n   *     Ps = 4 7  -> Use Alternate Screen Buffer.  (This may be dis-\n   *     abled by the titeInhibit resource).\n   *     Ps = 6 6  -> Application keypad (DECNKM).\n   *     Ps = 6 7  -> Backarrow key sends backspace (DECBKM).\n   *     Ps = 1 0 0 0  -> Send Mouse X & Y on button press and\n   *     release.  See the section Mouse Tracking.\n   *     Ps = 1 0 0 1  -> Use Hilite Mouse Tracking.\n   *     Ps = 1 0 0 2  -> Use Cell Motion Mouse Tracking.\n   *     Ps = 1 0 0 3  -> Use All Motion Mouse Tracking.\n   *     Ps = 1 0 0 4  -> Send FocusIn/FocusOut events.\n   *     Ps = 1 0 0 5  -> Enable Extended Mouse Mode.\n   *     Ps = 1 0 1 0  -> Scroll to bottom on tty output (rxvt).\n   *     Ps = 1 0 1 1  -> Scroll to bottom on key press (rxvt).\n   *     Ps = 1 0 3 4  -> Interpret \"meta\" key, sets eighth bit.\n   *     (enables the eightBitInput resource).\n   *     Ps = 1 0 3 5  -> Enable special modifiers for Alt and Num-\n   *     Lock keys.  (This enables the numLock resource).\n   *     Ps = 1 0 3 6  -> Send ESC   when Meta modifies a key.  (This\n   *     enables the metaSendsEscape resource).\n   *     Ps = 1 0 3 7  -> Send DEL from the editing-keypad Delete\n   *     key.\n   *     Ps = 1 0 3 9  -> Send ESC  when Alt modifies a key.  (This\n   *     enables the altSendsEscape resource).\n   *     Ps = 1 0 4 0  -> Keep selection even if not highlighted.\n   *     (This enables the keepSelection resource).\n   *     Ps = 1 0 4 1  -> Use the CLIPBOARD selection.  (This enables\n   *     the selectToClipboard resource).\n   *     Ps = 1 0 4 2  -> Enable Urgency window manager hint when\n   *     Control-G is received.  (This enables the bellIsUrgent\n   *     resource).\n   *     Ps = 1 0 4 3  -> Enable raising of the window when Control-G\n   *     is received.  (enables the popOnBell resource).\n   *     Ps = 1 0 4 7  -> Use Alternate Screen Buffer.  (This may be\n   *     disabled by the titeInhibit resource).\n   *     Ps = 1 0 4 8  -> Save cursor as in DECSC.  (This may be dis-\n   *     abled by the titeInhibit resource).\n   *     Ps = 1 0 4 9  -> Save cursor as in DECSC and use Alternate\n   *     Screen Buffer, clearing it first.  (This may be disabled by\n   *     the titeInhibit resource).  This combines the effects of the 1\n   *     0 4 7  and 1 0 4 8  modes.  Use this with terminfo-based\n   *     applications rather than the 4 7  mode.\n   *     Ps = 1 0 5 0  -> Set terminfo/termcap function-key mode.\n   *     Ps = 1 0 5 1  -> Set Sun function-key mode.\n   *     Ps = 1 0 5 2  -> Set HP function-key mode.\n   *     Ps = 1 0 5 3  -> Set SCO function-key mode.\n   *     Ps = 1 0 6 0  -> Set legacy keyboard emulation (X11R6).\n   *     Ps = 1 0 6 1  -> Set VT220 keyboard emulation.\n   *     Ps = 2 0 0 4  -> Set bracketed paste mode.\n   * Modes:\n   *   http: *vt100.net/docs/vt220-rm/chapter4.html\n   *\n   * @vt: #P[See below for supported modes.]    CSI DECSET  \"DEC Private Set Mode\" \"CSI ? Pm h\"  \"Set various terminal attributes.\"\n   * Supported param values by DECSET:\n   *\n   * | param | Action                                                  | Support |\n   * | ----- | ------------------------------------------------------- | --------|\n   * | 1     | Application Cursor Keys (DECCKM).                       | #Y      |\n   * | 2     | Designate US-ASCII for character sets G0-G3 (DECANM).   | #Y      |\n   * | 3     | 132 Column Mode (DECCOLM).                              | #Y      |\n   * | 6     | Origin Mode (DECOM).                                    | #Y      |\n   * | 7     | Auto-wrap Mode (DECAWM).                                | #Y      |\n   * | 8     | Auto-repeat Keys (DECARM). Always on.                   | #N      |\n   * | 9     | X10 xterm mouse protocol.                               | #Y      |\n   * | 12    | Start Blinking Cursor.                                  | #Y      |\n   * | 25    | Show Cursor (DECTCEM).                                  | #Y      |\n   * | 45    | Reverse wrap-around.                                    | #Y      |\n   * | 47    | Use Alternate Screen Buffer.                            | #Y      |\n   * | 66    | Application keypad (DECNKM).                            | #Y      |\n   * | 1000  | X11 xterm mouse protocol.                               | #Y      |\n   * | 1002  | Use Cell Motion Mouse Tracking.                         | #Y      |\n   * | 1003  | Use All Motion Mouse Tracking.                          | #Y      |\n   * | 1004  | Send FocusIn/FocusOut events                            | #Y      |\n   * | 1005  | Enable UTF-8 Mouse Mode.                                | #N      |\n   * | 1006  | Enable SGR Mouse Mode.                                  | #Y      |\n   * | 1015  | Enable urxvt Mouse Mode.                                | #N      |\n   * | 1016  | Enable SGR-Pixels Mouse Mode.                           | #Y      |\n   * | 1047  | Use Alternate Screen Buffer.                            | #Y      |\n   * | 1048  | Save cursor as in DECSC.                                | #Y      |\n   * | 1049  | Save cursor and switch to alternate buffer clearing it. | #P[Does not clear the alternate buffer.] |\n   * | 2004  | Set bracketed paste mode.                               | #Y      |\n   *\n   *\n   * FIXME: implement DECSCNM, 1049 should clear altbuffer\n   */\n  public setModePrivate(params: IParams): boolean {\n    for (let i = 0; i < params.length; i++) {\n      switch (params.params[i]) {\n        case 1:\n          this._coreService.decPrivateModes.applicationCursorKeys = true;\n          break;\n        case 2:\n          this._charsetService.setgCharset(0, DEFAULT_CHARSET);\n          this._charsetService.setgCharset(1, DEFAULT_CHARSET);\n          this._charsetService.setgCharset(2, DEFAULT_CHARSET);\n          this._charsetService.setgCharset(3, DEFAULT_CHARSET);\n          // set VT100 mode here\n          break;\n        case 3:\n          /**\n           * DECCOLM - 132 column mode.\n           * This is only active if 'SetWinLines' (24) is enabled\n           * through `options.windowsOptions`.\n           */\n          if (this._optionsService.rawOptions.windowOptions.setWinLines) {\n            this._bufferService.resize(132, this._bufferService.rows);\n            this._onRequestReset.fire();\n          }\n          break;\n        case 6:\n          this._coreService.decPrivateModes.origin = true;\n          this._setCursor(0, 0);\n          break;\n        case 7:\n          this._coreService.decPrivateModes.wraparound = true;\n          break;\n        case 12:\n          this._optionsService.options.cursorBlink = true;\n          break;\n        case 45:\n          this._coreService.decPrivateModes.reverseWraparound = true;\n          break;\n        case 66:\n          this._logService.debug('Serial port requested application keypad.');\n          this._coreService.decPrivateModes.applicationKeypad = true;\n          this._onRequestSyncScrollBar.fire();\n          break;\n        case 9: // X10 Mouse\n          // no release, no motion, no wheel, no modifiers.\n          this._coreMouseService.activeProtocol = 'X10';\n          break;\n        case 1000: // vt200 mouse\n          // no motion.\n          this._coreMouseService.activeProtocol = 'VT200';\n          break;\n        case 1002: // button event mouse\n          this._coreMouseService.activeProtocol = 'DRAG';\n          break;\n        case 1003: // any event mouse\n          // any event - sends motion events,\n          // even if there is no button held down.\n          this._coreMouseService.activeProtocol = 'ANY';\n          break;\n        case 1004: // send focusin/focusout events\n          // focusin: ^[[I\n          // focusout: ^[[O\n          this._coreService.decPrivateModes.sendFocus = true;\n          this._onRequestSendFocus.fire();\n          break;\n        case 1005: // utf8 ext mode mouse - removed in #2507\n          this._logService.debug('DECSET 1005 not supported (see #2507)');\n          break;\n        case 1006: // sgr ext mode mouse\n          this._coreMouseService.activeEncoding = 'SGR';\n          break;\n        case 1015: // urxvt ext mode mouse - removed in #2507\n          this._logService.debug('DECSET 1015 not supported (see #2507)');\n          break;\n        case 1016: // sgr pixels mode mouse\n          this._coreMouseService.activeEncoding = 'SGR_PIXELS';\n          break;\n        case 25: // show cursor\n          this._coreService.isCursorHidden = false;\n          break;\n        case 1048: // alt screen cursor\n          this.saveCursor();\n          break;\n        case 1049: // alt screen buffer cursor\n          this.saveCursor();\n        // FALL-THROUGH\n        case 47: // alt screen buffer\n        case 1047: // alt screen buffer\n          this._bufferService.buffers.activateAltBuffer(this._eraseAttrData());\n          this._coreService.isCursorInitialized = true;\n          this._onRequestRefreshRows.fire(0, this._bufferService.rows - 1);\n          this._onRequestSyncScrollBar.fire();\n          break;\n        case 2004: // bracketed paste mode (https://cirw.in/blog/bracketed-paste)\n          this._coreService.decPrivateModes.bracketedPasteMode = true;\n          break;\n      }\n    }\n    return true;\n  }\n\n\n  /**\n   * CSI Pm l  Reset Mode (RM).\n   *     Ps = 2  -> Keyboard Action Mode (AM).\n   *     Ps = 4  -> Replace Mode (IRM).\n   *     Ps = 1 2  -> Send/receive (SRM).\n   *     Ps = 2 0  -> Normal Linefeed (LNM).\n   *\n   * @vt: #P[Only IRM is supported.]    CSI RM    \"Reset Mode\"  \"CSI Pm l\"  \"Set various terminal attributes.\"\n   * Supported param values by RM:\n   *\n   * | Param | Action                                 | Support |\n   * | ----- | -------------------------------------- | ------- |\n   * | 2     | Keyboard Action Mode (KAM). Always on. | #N      |\n   * | 4     | Replace Mode (IRM). (default)          | #Y      |\n   * | 12    | Send/receive (SRM). Always off.        | #N      |\n   * | 20    | Normal Linefeed (LNM).                 | #Y      |\n   *\n   *\n   * FIXME: why is LNM commented out?\n   */\n  public resetMode(params: IParams): boolean {\n    for (let i = 0; i < params.length; i++) {\n      switch (params.params[i]) {\n        case 4:\n          this._coreService.modes.insertMode = false;\n          break;\n        case 20:\n          this._optionsService.options.convertEol = false;\n          break;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * CSI ? Pm l\n   *   DEC Private Mode Reset (DECRST).\n   *     Ps = 1  -> Normal Cursor Keys (DECCKM).\n   *     Ps = 2  -> Designate VT52 mode (DECANM).\n   *     Ps = 3  -> 80 Column Mode (DECCOLM).\n   *     Ps = 4  -> Jump (Fast) Scroll (DECSCLM).\n   *     Ps = 5  -> Normal Video (DECSCNM).\n   *     Ps = 6  -> Normal Cursor Mode (DECOM).\n   *     Ps = 7  -> No Wraparound Mode (DECAWM).\n   *     Ps = 8  -> No Auto-repeat Keys (DECARM).\n   *     Ps = 9  -> Don't send Mouse X & Y on button press.\n   *     Ps = 1 0  -> Hide toolbar (rxvt).\n   *     Ps = 1 2  -> Stop Blinking Cursor (att610).\n   *     Ps = 1 8  -> Don't print form feed (DECPFF).\n   *     Ps = 1 9  -> Limit print to scrolling region (DECPEX).\n   *     Ps = 2 5  -> Hide Cursor (DECTCEM).\n   *     Ps = 3 0  -> Don't show scrollbar (rxvt).\n   *     Ps = 3 5  -> Disable font-shifting functions (rxvt).\n   *     Ps = 4 0  -> Disallow 80 -> 132 Mode.\n   *     Ps = 4 1  -> No more(1) fix (see curses resource).\n   *     Ps = 4 2  -> Disable Nation Replacement Character sets (DEC-\n   *     NRCM).\n   *     Ps = 4 4  -> Turn Off Margin Bell.\n   *     Ps = 4 5  -> No Reverse-wraparound Mode.\n   *     Ps = 4 6  -> Stop Logging.  (This is normally disabled by a\n   *     compile-time option).\n   *     Ps = 4 7  -> Use Normal Screen Buffer.\n   *     Ps = 6 6  -> Numeric keypad (DECNKM).\n   *     Ps = 6 7  -> Backarrow key sends delete (DECBKM).\n   *     Ps = 1 0 0 0  -> Don't send Mouse X & Y on button press and\n   *     release.  See the section Mouse Tracking.\n   *     Ps = 1 0 0 1  -> Don't use Hilite Mouse Tracking.\n   *     Ps = 1 0 0 2  -> Don't use Cell Motion Mouse Tracking.\n   *     Ps = 1 0 0 3  -> Don't use All Motion Mouse Tracking.\n   *     Ps = 1 0 0 4  -> Don't send FocusIn/FocusOut events.\n   *     Ps = 1 0 0 5  -> Disable Extended Mouse Mode.\n   *     Ps = 1 0 1 0  -> Don't scroll to bottom on tty output\n   *     (rxvt).\n   *     Ps = 1 0 1 1  -> Don't scroll to bottom on key press (rxvt).\n   *     Ps = 1 0 3 4  -> Don't interpret \"meta\" key.  (This disables\n   *     the eightBitInput resource).\n   *     Ps = 1 0 3 5  -> Disable special modifiers for Alt and Num-\n   *     Lock keys.  (This disables the numLock resource).\n   *     Ps = 1 0 3 6  -> Don't send ESC  when Meta modifies a key.\n   *     (This disables the metaSendsEscape resource).\n   *     Ps = 1 0 3 7  -> Send VT220 Remove from the editing-keypad\n   *     Delete key.\n   *     Ps = 1 0 3 9  -> Don't send ESC  when Alt modifies a key.\n   *     (This disables the altSendsEscape resource).\n   *     Ps = 1 0 4 0  -> Do not keep selection when not highlighted.\n   *     (This disables the keepSelection resource).\n   *     Ps = 1 0 4 1  -> Use the PRIMARY selection.  (This disables\n   *     the selectToClipboard resource).\n   *     Ps = 1 0 4 2  -> Disable Urgency window manager hint when\n   *     Control-G is received.  (This disables the bellIsUrgent\n   *     resource).\n   *     Ps = 1 0 4 3  -> Disable raising of the window when Control-\n   *     G is received.  (This disables the popOnBell resource).\n   *     Ps = 1 0 4 7  -> Use Normal Screen Buffer, clearing screen\n   *     first if in the Alternate Screen.  (This may be disabled by\n   *     the titeInhibit resource).\n   *     Ps = 1 0 4 8  -> Restore cursor as in DECRC.  (This may be\n   *     disabled by the titeInhibit resource).\n   *     Ps = 1 0 4 9  -> Use Normal Screen Buffer and restore cursor\n   *     as in DECRC.  (This may be disabled by the titeInhibit\n   *     resource).  This combines the effects of the 1 0 4 7  and 1 0\n   *     4 8  modes.  Use this with terminfo-based applications rather\n   *     than the 4 7  mode.\n   *     Ps = 1 0 5 0  -> Reset terminfo/termcap function-key mode.\n   *     Ps = 1 0 5 1  -> Reset Sun function-key mode.\n   *     Ps = 1 0 5 2  -> Reset HP function-key mode.\n   *     Ps = 1 0 5 3  -> Reset SCO function-key mode.\n   *     Ps = 1 0 6 0  -> Reset legacy keyboard emulation (X11R6).\n   *     Ps = 1 0 6 1  -> Reset keyboard emulation to Sun/PC style.\n   *     Ps = 2 0 0 4  -> Reset bracketed paste mode.\n   *\n   * @vt: #P[See below for supported modes.]    CSI DECRST  \"DEC Private Reset Mode\" \"CSI ? Pm l\"  \"Reset various terminal attributes.\"\n   * Supported param values by DECRST:\n   *\n   * | param | Action                                                  | Support |\n   * | ----- | ------------------------------------------------------- | ------- |\n   * | 1     | Normal Cursor Keys (DECCKM).                            | #Y      |\n   * | 2     | Designate VT52 mode (DECANM).                           | #N      |\n   * | 3     | 80 Column Mode (DECCOLM).                               | #B[Switches to old column width instead of 80.] |\n   * | 6     | Normal Cursor Mode (DECOM).                             | #Y      |\n   * | 7     | No Wraparound Mode (DECAWM).                            | #Y      |\n   * | 8     | No Auto-repeat Keys (DECARM).                           | #N      |\n   * | 9     | Don't send Mouse X & Y on button press.                 | #Y      |\n   * | 12    | Stop Blinking Cursor.                                   | #Y      |\n   * | 25    | Hide Cursor (DECTCEM).                                  | #Y      |\n   * | 45    | No reverse wrap-around.                                 | #Y      |\n   * | 47    | Use Normal Screen Buffer.                               | #Y      |\n   * | 66    | Numeric keypad (DECNKM).                                | #Y      |\n   * | 1000  | Don't send Mouse reports.                               | #Y      |\n   * | 1002  | Don't use Cell Motion Mouse Tracking.                   | #Y      |\n   * | 1003  | Don't use All Motion Mouse Tracking.                    | #Y      |\n   * | 1004  | Don't send FocusIn/FocusOut events.                     | #Y      |\n   * | 1005  | Disable UTF-8 Mouse Mode.                               | #N      |\n   * | 1006  | Disable SGR Mouse Mode.                                 | #Y      |\n   * | 1015  | Disable urxvt Mouse Mode.                               | #N      |\n   * | 1016  | Disable SGR-Pixels Mouse Mode.                          | #Y      |\n   * | 1047  | Use Normal Screen Buffer (clearing screen if in alt).   | #Y      |\n   * | 1048  | Restore cursor as in DECRC.                             | #Y      |\n   * | 1049  | Use Normal Screen Buffer and restore cursor.            | #Y      |\n   * | 2004  | Reset bracketed paste mode.                             | #Y      |\n   *\n   *\n   * FIXME: DECCOLM is currently broken (already fixed in window options PR)\n   */\n  public resetModePrivate(params: IParams): boolean {\n    for (let i = 0; i < params.length; i++) {\n      switch (params.params[i]) {\n        case 1:\n          this._coreService.decPrivateModes.applicationCursorKeys = false;\n          break;\n        case 3:\n          /**\n           * DECCOLM - 80 column mode.\n           * This is only active if 'SetWinLines' (24) is enabled\n           * through `options.windowsOptions`.\n           */\n          if (this._optionsService.rawOptions.windowOptions.setWinLines) {\n            this._bufferService.resize(80, this._bufferService.rows);\n            this._onRequestReset.fire();\n          }\n          break;\n        case 6:\n          this._coreService.decPrivateModes.origin = false;\n          this._setCursor(0, 0);\n          break;\n        case 7:\n          this._coreService.decPrivateModes.wraparound = false;\n          break;\n        case 12:\n          this._optionsService.options.cursorBlink = false;\n          break;\n        case 45:\n          this._coreService.decPrivateModes.reverseWraparound = false;\n          break;\n        case 66:\n          this._logService.debug('Switching back to normal keypad.');\n          this._coreService.decPrivateModes.applicationKeypad = false;\n          this._onRequestSyncScrollBar.fire();\n          break;\n        case 9: // X10 Mouse\n        case 1000: // vt200 mouse\n        case 1002: // button event mouse\n        case 1003: // any event mouse\n          this._coreMouseService.activeProtocol = 'NONE';\n          break;\n        case 1004: // send focusin/focusout events\n          this._coreService.decPrivateModes.sendFocus = false;\n          break;\n        case 1005: // utf8 ext mode mouse - removed in #2507\n          this._logService.debug('DECRST 1005 not supported (see #2507)');\n          break;\n        case 1006: // sgr ext mode mouse\n          this._coreMouseService.activeEncoding = 'DEFAULT';\n          break;\n        case 1015: // urxvt ext mode mouse - removed in #2507\n          this._logService.debug('DECRST 1015 not supported (see #2507)');\n          break;\n        case 1016: // sgr pixels mode mouse\n          this._coreMouseService.activeEncoding = 'DEFAULT';\n          break;\n        case 25: // hide cursor\n          this._coreService.isCursorHidden = true;\n          break;\n        case 1048: // alt screen cursor\n          this.restoreCursor();\n          break;\n        case 1049: // alt screen buffer cursor\n        // FALL-THROUGH\n        case 47: // normal screen buffer\n        case 1047: // normal screen buffer - clearing it first\n          // Ensure the selection manager has the correct buffer\n          this._bufferService.buffers.activateNormalBuffer();\n          if (params.params[i] === 1049) {\n            this.restoreCursor();\n          }\n          this._coreService.isCursorInitialized = true;\n          this._onRequestRefreshRows.fire(0, this._bufferService.rows - 1);\n          this._onRequestSyncScrollBar.fire();\n          break;\n        case 2004: // bracketed paste mode (https://cirw.in/blog/bracketed-paste)\n          this._coreService.decPrivateModes.bracketedPasteMode = false;\n          break;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps $ p Request ANSI Mode (DECRQM).\n   *\n   * Reports CSI Ps; Pm $ y (DECRPM), where Ps is the mode number as in SM/RM,\n   * and Pm is the mode value:\n   *    0 - not recognized\n   *    1 - set\n   *    2 - reset\n   *    3 - permanently set\n   *    4 - permanently reset\n   *\n   * @vt: #Y  CSI   DECRQM  \"Request Mode\"  \"CSI Ps $p\"  \"Request mode state.\"\n   * Returns a report as `CSI Ps; Pm $ y` (DECRPM), where `Ps` is the mode number as in SM/RM\n   * or DECSET/DECRST, and `Pm` is the mode value:\n   * - 0: not recognized\n   * - 1: set\n   * - 2: reset\n   * - 3: permanently set\n   * - 4: permanently reset\n   *\n   * For modes not understood xterm.js always returns `notRecognized`. In general this means,\n   * that a certain operation mode is not implemented and cannot be used.\n   *\n   * Modes changing the active terminal buffer (47, 1047, 1049) are not subqueried\n   * and only report, whether the alternate buffer is set.\n   *\n   * Mouse encodings and mouse protocols are handled mutual exclusive,\n   * thus only one of each of those can be set at a given time.\n   *\n   * There is a chance, that some mode reports are not fully in line with xterm.js' behavior,\n   * e.g. if the default implementation already exposes a certain behavior. If you find\n   * discrepancies in the mode reports, please file a bug.\n   */\n  public requestMode(params: IParams, ansi: boolean): boolean {\n    // return value as in DECRPM\n    const enum V {\n      NOT_RECOGNIZED = 0,\n      SET = 1,\n      RESET = 2,\n      PERMANENTLY_SET = 3,\n      PERMANENTLY_RESET = 4\n    }\n\n    // access helpers\n    const dm = this._coreService.decPrivateModes;\n    const { activeProtocol: mouseProtocol, activeEncoding: mouseEncoding } = this._coreMouseService;\n    const cs = this._coreService;\n    const { buffers, cols } = this._bufferService;\n    const { active, alt } = buffers;\n    const opts = this._optionsService.rawOptions;\n\n    const f = (m: number, v: V): boolean => {\n      cs.triggerDataEvent(`${C0.ESC}[${ansi ? '' : '?'}${m};${v}$y`);\n      return true;\n    };\n    const b2v = (value: boolean): V => value ? V.SET : V.RESET;\n\n    const p = params.params[0];\n\n    if (ansi) {\n      if (p === 2) return f(p, V.PERMANENTLY_SET);\n      if (p === 4) return f(p, b2v(cs.modes.insertMode));\n      if (p === 12) return f(p, V.PERMANENTLY_RESET);\n      if (p === 20) return f(p, b2v(opts.convertEol));\n      return f(p, V.NOT_RECOGNIZED);\n    }\n\n    if (p === 1) return f(p, b2v(dm.applicationCursorKeys));\n    if (p === 3) return f(p, opts.windowOptions.setWinLines ? (cols === 80 ? V.RESET : cols === 132 ? V.SET : V.NOT_RECOGNIZED) : V.NOT_RECOGNIZED);\n    if (p === 6) return f(p, b2v(dm.origin));\n    if (p === 7) return f(p, b2v(dm.wraparound));\n    if (p === 8) return f(p, V.PERMANENTLY_SET);\n    if (p === 9) return f(p, b2v(mouseProtocol === 'X10'));\n    if (p === 12) return f(p, b2v(opts.cursorBlink));\n    if (p === 25) return f(p, b2v(!cs.isCursorHidden));\n    if (p === 45) return f(p, b2v(dm.reverseWraparound));\n    if (p === 66) return f(p, b2v(dm.applicationKeypad));\n    if (p === 1000) return f(p, b2v(mouseProtocol === 'VT200'));\n    if (p === 1002) return f(p, b2v(mouseProtocol === 'DRAG'));\n    if (p === 1003) return f(p, b2v(mouseProtocol === 'ANY'));\n    if (p === 1004) return f(p, b2v(dm.sendFocus));\n    if (p === 1005) return f(p, V.PERMANENTLY_RESET);\n    if (p === 1006) return f(p, b2v(mouseEncoding === 'SGR'));\n    if (p === 1015) return f(p, V.PERMANENTLY_RESET);\n    if (p === 1016) return f(p, b2v(mouseEncoding === 'SGR_PIXELS'));\n    if (p === 1048) return f(p, V.SET); // xterm always returns SET here\n    if (p === 47 || p === 1047 || p === 1049) return f(p, b2v(active === alt));\n    if (p === 2004) return f(p, b2v(dm.bracketedPasteMode));\n    return f(p, V.NOT_RECOGNIZED);\n  }\n\n  /**\n   * Helper to write color information packed with color mode.\n   */\n  private _updateAttrColor(color: number, mode: number, c1: number, c2: number, c3: number): number {\n    if (mode === 2) {\n      color |= Attributes.CM_RGB;\n      color &= ~Attributes.RGB_MASK;\n      color |= AttributeData.fromColorRGB([c1, c2, c3]);\n    } else if (mode === 5) {\n      color &= ~(Attributes.CM_MASK | Attributes.PCOLOR_MASK);\n      color |= Attributes.CM_P256 | (c1 & 0xff);\n    }\n    return color;\n  }\n\n  /**\n   * Helper to extract and apply color params/subparams.\n   * Returns advance for params index.\n   */\n  private _extractColor(params: IParams, pos: number, attr: IAttributeData): number {\n    // normalize params\n    // meaning: [target, CM, ign, val, val, val]\n    // RGB    : [ 38/48,  2, ign,   r,   g,   b]\n    // P256   : [ 38/48,  5, ign,   v, ign, ign]\n    const accu = [0, 0, -1, 0, 0, 0];\n\n    // alignment placeholder for non color space sequences\n    let cSpace = 0;\n\n    // return advance we took in params\n    let advance = 0;\n\n    do {\n      accu[advance + cSpace] = params.params[pos + advance];\n      if (params.hasSubParams(pos + advance)) {\n        const subparams = params.getSubParams(pos + advance)!;\n        let i = 0;\n        do {\n          if (accu[1] === 5) {\n            cSpace = 1;\n          }\n          accu[advance + i + 1 + cSpace] = subparams[i];\n        } while (++i < subparams.length && i + advance + 1 + cSpace < accu.length);\n        break;\n      }\n      // exit early if can decide color mode with semicolons\n      if ((accu[1] === 5 && advance + cSpace >= 2)\n        || (accu[1] === 2 && advance + cSpace >= 5)) {\n        break;\n      }\n      // offset colorSpace slot for semicolon mode\n      if (accu[1]) {\n        cSpace = 1;\n      }\n    } while (++advance + pos < params.length && advance + cSpace < accu.length);\n\n    // set default values to 0\n    for (let i = 2; i < accu.length; ++i) {\n      if (accu[i] === -1) {\n        accu[i] = 0;\n      }\n    }\n\n    // apply colors\n    switch (accu[0]) {\n      case 38:\n        attr.fg = this._updateAttrColor(attr.fg, accu[1], accu[3], accu[4], accu[5]);\n        break;\n      case 48:\n        attr.bg = this._updateAttrColor(attr.bg, accu[1], accu[3], accu[4], accu[5]);\n        break;\n      case 58:\n        attr.extended = attr.extended.clone();\n        attr.extended.underlineColor = this._updateAttrColor(attr.extended.underlineColor, accu[1], accu[3], accu[4], accu[5]);\n    }\n\n    return advance;\n  }\n\n  /**\n   * SGR 4 subparams:\n   *    4:0   -   equal to SGR 24 (turn off all underline)\n   *    4:1   -   equal to SGR 4 (single underline)\n   *    4:2   -   equal to SGR 21 (double underline)\n   *    4:3   -   curly underline\n   *    4:4   -   dotted underline\n   *    4:5   -   dashed underline\n   */\n  private _processUnderline(style: number, attr: IAttributeData): void {\n    // treat extended attrs as immutable, thus always clone from old one\n    // this is needed since the buffer only holds references to it\n    attr.extended = attr.extended.clone();\n\n    // default to 1 == single underline\n    if (!~style || style > 5) {\n      style = 1;\n    }\n    attr.extended.underlineStyle = style;\n    attr.fg |= FgFlags.UNDERLINE;\n\n    // 0 deactivates underline\n    if (style === 0) {\n      attr.fg &= ~FgFlags.UNDERLINE;\n    }\n\n    // update HAS_EXTENDED in BG\n    attr.updateExtended();\n  }\n\n  private _processSGR0(attr: IAttributeData): void {\n    attr.fg = DEFAULT_ATTR_DATA.fg;\n    attr.bg = DEFAULT_ATTR_DATA.bg;\n    attr.extended = attr.extended.clone();\n    // Reset underline style and color. Note that we don't want to reset other\n    // fields such as the url id.\n    attr.extended.underlineStyle = UnderlineStyle.NONE;\n    attr.extended.underlineColor &= ~(Attributes.CM_MASK | Attributes.RGB_MASK);\n    attr.updateExtended();\n  }\n\n  /**\n   * CSI Pm m  Character Attributes (SGR).\n   *\n   * @vt: #P[See below for supported attributes.]    CSI SGR   \"Select Graphic Rendition\"  \"CSI Pm m\"  \"Set/Reset various text attributes.\"\n   * SGR selects one or more character attributes at the same time. Multiple params (up to 32)\n   * are applied in order from left to right. The changed attributes are applied to all new\n   * characters received. If you move characters in the viewport by scrolling or any other means,\n   * then the attributes move with the characters.\n   *\n   * Supported param values by SGR:\n   *\n   * | Param     | Meaning                                                  | Support |\n   * | --------- | -------------------------------------------------------- | ------- |\n   * | 0         | Normal (default). Resets any other preceding SGR.        | #Y      |\n   * | 1         | Bold. (also see `options.drawBoldTextInBrightColors`)    | #Y      |\n   * | 2         | Faint, decreased intensity.                              | #Y      |\n   * | 3         | Italic.                                                  | #Y      |\n   * | 4         | Underlined (see below for style support).                | #Y      |\n   * | 5         | Slowly blinking.                                         | #N      |\n   * | 6         | Rapidly blinking.                                        | #N      |\n   * | 7         | Inverse. Flips foreground and background color.          | #Y      |\n   * | 8         | Invisible (hidden).                                      | #Y      |\n   * | 9         | Crossed-out characters (strikethrough).                  | #Y      |\n   * | 21        | Doubly underlined.                                       | #Y      |\n   * | 22        | Normal (neither bold nor faint).                         | #Y      |\n   * | 23        | No italic.                                               | #Y      |\n   * | 24        | Not underlined.                                          | #Y      |\n   * | 25        | Steady (not blinking).                                   | #Y      |\n   * | 27        | Positive (not inverse).                                  | #Y      |\n   * | 28        | Visible (not hidden).                                    | #Y      |\n   * | 29        | Not Crossed-out (strikethrough).                         | #Y      |\n   * | 30        | Foreground color: Black.                                 | #Y      |\n   * | 31        | Foreground color: Red.                                   | #Y      |\n   * | 32        | Foreground color: Green.                                 | #Y      |\n   * | 33        | Foreground color: Yellow.                                | #Y      |\n   * | 34        | Foreground color: Blue.                                  | #Y      |\n   * | 35        | Foreground color: Magenta.                               | #Y      |\n   * | 36        | Foreground color: Cyan.                                  | #Y      |\n   * | 37        | Foreground color: White.                                 | #Y      |\n   * | 38        | Foreground color: Extended color.                        | #P[Support for RGB and indexed colors, see below.] |\n   * | 39        | Foreground color: Default (original).                    | #Y      |\n   * | 40        | Background color: Black.                                 | #Y      |\n   * | 41        | Background color: Red.                                   | #Y      |\n   * | 42        | Background color: Green.                                 | #Y      |\n   * | 43        | Background color: Yellow.                                | #Y      |\n   * | 44        | Background color: Blue.                                  | #Y      |\n   * | 45        | Background color: Magenta.                               | #Y      |\n   * | 46        | Background color: Cyan.                                  | #Y      |\n   * | 47        | Background color: White.                                 | #Y      |\n   * | 48        | Background color: Extended color.                        | #P[Support for RGB and indexed colors, see below.] |\n   * | 49        | Background color: Default (original).                    | #Y      |\n   * | 58        | Underline color: Extended color.                         | #P[Support for RGB and indexed colors, see below.] |\n   * | 90 - 97   | Bright foreground color (analogous to 30 - 37).          | #Y      |\n   * | 100 - 107 | Bright background color (analogous to 40 - 47).          | #Y      |\n   *\n   * Underline supports subparams to denote the style in the form `4 : x`:\n   *\n   * | x      | Meaning                                                       | Support |\n   * | ------ | ------------------------------------------------------------- | ------- |\n   * | 0      | No underline. Same as `SGR 24 m`.                             | #Y      |\n   * | 1      | Single underline. Same as `SGR 4 m`.                          | #Y      |\n   * | 2      | Double underline.                                             | #Y      |\n   * | 3      | Curly underline.                                              | #Y      |\n   * | 4      | Dotted underline.                                             | #Y      |\n   * | 5      | Dashed underline.                                             | #Y      |\n   * | other  | Single underline. Same as `SGR 4 m`.                          | #Y      |\n   *\n   * Extended colors are supported for foreground (Ps=38), background (Ps=48) and underline (Ps=58) as follows:\n   *\n   * | Ps + 1 | Meaning                                                       | Support |\n   * | ------ | ------------------------------------------------------------- | ------- |\n   * | 0      | Implementation defined.                                       | #N      |\n   * | 1      | Transparent.                                                  | #N      |\n   * | 2      | RGB color as `Ps ; 2 ; R ; G ; B` or `Ps : 2 : : R : G : B`.  | #Y      |\n   * | 3      | CMY color.                                                    | #N      |\n   * | 4      | CMYK color.                                                   | #N      |\n   * | 5      | Indexed (256 colors) as `Ps ; 5 ; INDEX` or `Ps : 5 : INDEX`. | #Y      |\n   *\n   *\n   * FIXME: blinking is implemented in attrs, but not working in renderers?\n   * FIXME: remove dead branch for p=100\n   */\n  public charAttributes(params: IParams): boolean {\n    // Optimize a single SGR0.\n    if (params.length === 1 && params.params[0] === 0) {\n      this._processSGR0(this._curAttrData);\n      return true;\n    }\n\n    const l = params.length;\n    let p;\n    const attr = this._curAttrData;\n\n    for (let i = 0; i < l; i++) {\n      p = params.params[i];\n      if (p >= 30 && p <= 37) {\n        // fg color 8\n        attr.fg &= ~(Attributes.CM_MASK | Attributes.PCOLOR_MASK);\n        attr.fg |= Attributes.CM_P16 | (p - 30);\n      } else if (p >= 40 && p <= 47) {\n        // bg color 8\n        attr.bg &= ~(Attributes.CM_MASK | Attributes.PCOLOR_MASK);\n        attr.bg |= Attributes.CM_P16 | (p - 40);\n      } else if (p >= 90 && p <= 97) {\n        // fg color 16\n        attr.fg &= ~(Attributes.CM_MASK | Attributes.PCOLOR_MASK);\n        attr.fg |= Attributes.CM_P16 | (p - 90) | 8;\n      } else if (p >= 100 && p <= 107) {\n        // bg color 16\n        attr.bg &= ~(Attributes.CM_MASK | Attributes.PCOLOR_MASK);\n        attr.bg |= Attributes.CM_P16 | (p - 100) | 8;\n      } else if (p === 0) {\n        // default\n        this._processSGR0(attr);\n      } else if (p === 1) {\n        // bold text\n        attr.fg |= FgFlags.BOLD;\n      } else if (p === 3) {\n        // italic text\n        attr.bg |= BgFlags.ITALIC;\n      } else if (p === 4) {\n        // underlined text\n        attr.fg |= FgFlags.UNDERLINE;\n        this._processUnderline(params.hasSubParams(i) ? params.getSubParams(i)![0] : UnderlineStyle.SINGLE, attr);\n      } else if (p === 5) {\n        // blink\n        attr.fg |= FgFlags.BLINK;\n      } else if (p === 7) {\n        // inverse and positive\n        // test with: echo -e '\\e[31m\\e[42mhello\\e[7mworld\\e[27mhi\\e[m'\n        attr.fg |= FgFlags.INVERSE;\n      } else if (p === 8) {\n        // invisible\n        attr.fg |= FgFlags.INVISIBLE;\n      } else if (p === 9) {\n        // strikethrough\n        attr.fg |= FgFlags.STRIKETHROUGH;\n      } else if (p === 2) {\n        // dimmed text\n        attr.bg |= BgFlags.DIM;\n      } else if (p === 21) {\n        // double underline\n        this._processUnderline(UnderlineStyle.DOUBLE, attr);\n      } else if (p === 22) {\n        // not bold nor faint\n        attr.fg &= ~FgFlags.BOLD;\n        attr.bg &= ~BgFlags.DIM;\n      } else if (p === 23) {\n        // not italic\n        attr.bg &= ~BgFlags.ITALIC;\n      } else if (p === 24) {\n        // not underlined\n        attr.fg &= ~FgFlags.UNDERLINE;\n        this._processUnderline(UnderlineStyle.NONE, attr);\n      } else if (p === 25) {\n        // not blink\n        attr.fg &= ~FgFlags.BLINK;\n      } else if (p === 27) {\n        // not inverse\n        attr.fg &= ~FgFlags.INVERSE;\n      } else if (p === 28) {\n        // not invisible\n        attr.fg &= ~FgFlags.INVISIBLE;\n      } else if (p === 29) {\n        // not strikethrough\n        attr.fg &= ~FgFlags.STRIKETHROUGH;\n      } else if (p === 39) {\n        // reset fg\n        attr.fg &= ~(Attributes.CM_MASK | Attributes.RGB_MASK);\n        attr.fg |= DEFAULT_ATTR_DATA.fg & (Attributes.PCOLOR_MASK | Attributes.RGB_MASK);\n      } else if (p === 49) {\n        // reset bg\n        attr.bg &= ~(Attributes.CM_MASK | Attributes.RGB_MASK);\n        attr.bg |= DEFAULT_ATTR_DATA.bg & (Attributes.PCOLOR_MASK | Attributes.RGB_MASK);\n      } else if (p === 38 || p === 48 || p === 58) {\n        // fg color 256 and RGB\n        i += this._extractColor(params, i, attr);\n      } else if (p === 59) {\n        attr.extended = attr.extended.clone();\n        attr.extended.underlineColor = -1;\n        attr.updateExtended();\n      } else if (p === 100) { // FIXME: dead branch, p=100 already handled above!\n        // reset fg/bg\n        attr.fg &= ~(Attributes.CM_MASK | Attributes.RGB_MASK);\n        attr.fg |= DEFAULT_ATTR_DATA.fg & (Attributes.PCOLOR_MASK | Attributes.RGB_MASK);\n        attr.bg &= ~(Attributes.CM_MASK | Attributes.RGB_MASK);\n        attr.bg |= DEFAULT_ATTR_DATA.bg & (Attributes.PCOLOR_MASK | Attributes.RGB_MASK);\n      } else {\n        this._logService.debug('Unknown SGR attribute: %d.', p);\n      }\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps n  Device Status Report (DSR).\n   *     Ps = 5  -> Status Report.  Result (``OK'') is\n   *   CSI 0 n\n   *     Ps = 6  -> Report Cursor Position (CPR) [row;column].\n   *   Result is\n   *   CSI r ; c R\n   * CSI ? Ps n\n   *   Device Status Report (DSR, DEC-specific).\n   *     Ps = 6  -> Report Cursor Position (CPR) [row;column] as CSI\n   *     ? r ; c R (assumes page is zero).\n   *     Ps = 1 5  -> Report Printer status as CSI ? 1 0  n  (ready).\n   *     or CSI ? 1 1  n  (not ready).\n   *     Ps = 2 5  -> Report UDK status as CSI ? 2 0  n  (unlocked)\n   *     or CSI ? 2 1  n  (locked).\n   *     Ps = 2 6  -> Report Keyboard status as\n   *   CSI ? 2 7  ;  1  ;  0  ;  0  n  (North American).\n   *   The last two parameters apply to VT400 & up, and denote key-\n   *   board ready and LK01 respectively.\n   *     Ps = 5 3  -> Report Locator status as\n   *   CSI ? 5 3  n  Locator available, if compiled-in, or\n   *   CSI ? 5 0  n  No Locator, if not.\n   *\n   * @vt: #Y CSI DSR   \"Device Status Report\"  \"CSI Ps n\"  \"Request cursor position (CPR) with `Ps` = 6.\"\n   */\n  public deviceStatus(params: IParams): boolean {\n    switch (params.params[0]) {\n      case 5:\n        // status report\n        this._coreService.triggerDataEvent(`${C0.ESC}[0n`);\n        break;\n      case 6:\n        // cursor position\n        const y = this._activeBuffer.y + 1;\n        const x = this._activeBuffer.x + 1;\n        this._coreService.triggerDataEvent(`${C0.ESC}[${y};${x}R`);\n        break;\n    }\n    return true;\n  }\n\n  // @vt: #P[Only CPR is supported.]  CSI DECDSR  \"DEC Device Status Report\"  \"CSI ? Ps n\"  \"Only CPR is supported (same as DSR).\"\n  public deviceStatusPrivate(params: IParams): boolean {\n    // modern xterm doesnt seem to\n    // respond to any of these except ?6, 6, and 5\n    switch (params.params[0]) {\n      case 6:\n        // cursor position\n        const y = this._activeBuffer.y + 1;\n        const x = this._activeBuffer.x + 1;\n        this._coreService.triggerDataEvent(`${C0.ESC}[?${y};${x}R`);\n        break;\n      case 15:\n        // no printer\n        // this.handler(C0.ESC + '[?11n');\n        break;\n      case 25:\n        // dont support user defined keys\n        // this.handler(C0.ESC + '[?21n');\n        break;\n      case 26:\n        // north american keyboard\n        // this.handler(C0.ESC + '[?27;1;0;0n');\n        break;\n      case 53:\n        // no dec locator/mouse\n        // this.handler(C0.ESC + '[?50n');\n        break;\n    }\n    return true;\n  }\n\n  /**\n   * CSI ! p   Soft terminal reset (DECSTR).\n   * http://vt100.net/docs/vt220-rm/table4-10.html\n   *\n   * @vt: #Y CSI DECSTR  \"Soft Terminal Reset\"   \"CSI ! p\"   \"Reset several terminal attributes to initial state.\"\n   * There are two terminal reset sequences - RIS and DECSTR. While RIS performs almost a full terminal bootstrap,\n   * DECSTR only resets certain attributes. For most needs DECSTR should be sufficient.\n   *\n   * The following terminal attributes are reset to default values:\n   * - IRM is reset (dafault = false)\n   * - scroll margins are reset (default = viewport size)\n   * - erase attributes are reset to default\n   * - charsets are reset\n   * - DECSC data is reset to initial values\n   * - DECOM is reset to absolute mode\n   *\n   *\n   * FIXME: there are several more attributes missing (see VT520 manual)\n   */\n  public softReset(params: IParams): boolean {\n    this._coreService.isCursorHidden = false;\n    this._onRequestSyncScrollBar.fire();\n    this._activeBuffer.scrollTop = 0;\n    this._activeBuffer.scrollBottom = this._bufferService.rows - 1;\n    this._curAttrData = DEFAULT_ATTR_DATA.clone();\n    this._coreService.reset();\n    this._charsetService.reset();\n\n    // reset DECSC data\n    this._activeBuffer.savedX = 0;\n    this._activeBuffer.savedY = this._activeBuffer.ybase;\n    this._activeBuffer.savedCurAttrData.fg = this._curAttrData.fg;\n    this._activeBuffer.savedCurAttrData.bg = this._curAttrData.bg;\n    this._activeBuffer.savedCharset = this._charsetService.charset;\n\n    // reset DECOM\n    this._coreService.decPrivateModes.origin = false;\n    return true;\n  }\n\n  /**\n   * CSI Ps SP q  Set cursor style (DECSCUSR, VT520).\n   *   Ps = 0  -> blinking block.\n   *   Ps = 1  -> blinking block (default).\n   *   Ps = 2  -> steady block.\n   *   Ps = 3  -> blinking underline.\n   *   Ps = 4  -> steady underline.\n   *   Ps = 5  -> blinking bar (xterm).\n   *   Ps = 6  -> steady bar (xterm).\n   *\n   * @vt: #Y CSI DECSCUSR  \"Set Cursor Style\"  \"CSI Ps SP q\"   \"Set cursor style.\"\n   * Supported cursor styles:\n   *  - empty, 0 or 1: steady block\n   *  - 2: blink block\n   *  - 3: steady underline\n   *  - 4: blink underline\n   *  - 5: steady bar\n   *  - 6: blink bar\n   */\n  public setCursorStyle(params: IParams): boolean {\n    const param = params.params[0] || 1;\n    switch (param) {\n      case 1:\n      case 2:\n        this._optionsService.options.cursorStyle = 'block';\n        break;\n      case 3:\n      case 4:\n        this._optionsService.options.cursorStyle = 'underline';\n        break;\n      case 5:\n      case 6:\n        this._optionsService.options.cursorStyle = 'bar';\n        break;\n    }\n    const isBlinking = param % 2 === 1;\n    this._optionsService.options.cursorBlink = isBlinking;\n    return true;\n  }\n\n  /**\n   * CSI Ps ; Ps r\n   *   Set Scrolling Region [top;bottom] (default = full size of win-\n   *   dow) (DECSTBM).\n   *\n   * @vt: #Y CSI DECSTBM \"Set Top and Bottom Margin\" \"CSI Ps ; Ps r\" \"Set top and bottom margins of the viewport [top;bottom] (default = viewport size).\"\n   */\n  public setScrollRegion(params: IParams): boolean {\n    const top = params.params[0] || 1;\n    let bottom: number;\n\n    if (params.length < 2 || (bottom = params.params[1]) > this._bufferService.rows || bottom === 0) {\n      bottom = this._bufferService.rows;\n    }\n\n    if (bottom > top) {\n      this._activeBuffer.scrollTop = top - 1;\n      this._activeBuffer.scrollBottom = bottom - 1;\n      this._setCursor(0, 0);\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps ; Ps ; Ps t - Various window manipulations and reports (xterm)\n   *\n   * Note: Only those listed below are supported. All others are left to integrators and\n   * need special treatment based on the embedding environment.\n   *\n   *    Ps = 1 4                                                          supported\n   *      Report xterm text area size in pixels.\n   *      Result is CSI 4 ; height ; width t\n   *    Ps = 14 ; 2                                                       not implemented\n   *    Ps = 16                                                           supported\n   *      Report xterm character cell size in pixels.\n   *      Result is CSI 6 ; height ; width t\n   *    Ps = 18                                                           supported\n   *      Report the size of the text area in characters.\n   *      Result is CSI 8 ; height ; width t\n   *    Ps = 20                                                           supported\n   *      Report xterm window's icon label.\n   *      Result is OSC L label ST\n   *    Ps = 21                                                           supported\n   *      Report xterm window's title.\n   *      Result is OSC l label ST\n   *    Ps = 22 ; 0  -> Save xterm icon and window title on stack.        supported\n   *    Ps = 22 ; 1  -> Save xterm icon title on stack.                   supported\n   *    Ps = 22 ; 2  -> Save xterm window title on stack.                 supported\n   *    Ps = 23 ; 0  -> Restore xterm icon and window title from stack.   supported\n   *    Ps = 23 ; 1  -> Restore xterm icon title from stack.              supported\n   *    Ps = 23 ; 2  -> Restore xterm window title from stack.            supported\n   *    Ps >= 24                                                          not implemented\n   */\n  public windowOptions(params: IParams): boolean {\n    if (!paramToWindowOption(params.params[0], this._optionsService.rawOptions.windowOptions)) {\n      return true;\n    }\n    const second = (params.length > 1) ? params.params[1] : 0;\n    switch (params.params[0]) {\n      case 14:  // GetWinSizePixels, returns CSI 4 ; height ; width t\n        if (second !== 2) {\n          this._onRequestWindowsOptionsReport.fire(WindowsOptionsReportType.GET_WIN_SIZE_PIXELS);\n        }\n        break;\n      case 16:  // GetCellSizePixels, returns CSI 6 ; height ; width t\n        this._onRequestWindowsOptionsReport.fire(WindowsOptionsReportType.GET_CELL_SIZE_PIXELS);\n        break;\n      case 18:  // GetWinSizeChars, returns CSI 8 ; height ; width t\n        if (this._bufferService) {\n          this._coreService.triggerDataEvent(`${C0.ESC}[8;${this._bufferService.rows};${this._bufferService.cols}t`);\n        }\n        break;\n      case 22:  // PushTitle\n        if (second === 0 || second === 2) {\n          this._windowTitleStack.push(this._windowTitle);\n          if (this._windowTitleStack.length > STACK_LIMIT) {\n            this._windowTitleStack.shift();\n          }\n        }\n        if (second === 0 || second === 1) {\n          this._iconNameStack.push(this._iconName);\n          if (this._iconNameStack.length > STACK_LIMIT) {\n            this._iconNameStack.shift();\n          }\n        }\n        break;\n      case 23:  // PopTitle\n        if (second === 0 || second === 2) {\n          if (this._windowTitleStack.length) {\n            this.setTitle(this._windowTitleStack.pop()!);\n          }\n        }\n        if (second === 0 || second === 1) {\n          if (this._iconNameStack.length) {\n            this.setIconName(this._iconNameStack.pop()!);\n          }\n        }\n        break;\n    }\n    return true;\n  }\n\n\n  /**\n   * CSI s\n   * ESC 7\n   *   Save cursor (ANSI.SYS).\n   *\n   * @vt: #P[TODO...]  CSI SCOSC   \"Save Cursor\"   \"CSI s\"   \"Save cursor position, charmap and text attributes.\"\n   * @vt: #Y ESC  SC   \"Save Cursor\"   \"ESC 7\"   \"Save cursor position, charmap and text attributes.\"\n   */\n  public saveCursor(params?: IParams): boolean {\n    this._activeBuffer.savedX = this._activeBuffer.x;\n    this._activeBuffer.savedY = this._activeBuffer.ybase + this._activeBuffer.y;\n    this._activeBuffer.savedCurAttrData.fg = this._curAttrData.fg;\n    this._activeBuffer.savedCurAttrData.bg = this._curAttrData.bg;\n    this._activeBuffer.savedCharset = this._charsetService.charset;\n    return true;\n  }\n\n\n  /**\n   * CSI u\n   * ESC 8\n   *   Restore cursor (ANSI.SYS).\n   *\n   * @vt: #P[TODO...]  CSI SCORC \"Restore Cursor\"  \"CSI u\"   \"Restore cursor position, charmap and text attributes.\"\n   * @vt: #Y ESC  RC \"Restore Cursor\"  \"ESC 8\"   \"Restore cursor position, charmap and text attributes.\"\n   */\n  public restoreCursor(params?: IParams): boolean {\n    this._activeBuffer.x = this._activeBuffer.savedX || 0;\n    this._activeBuffer.y = Math.max(this._activeBuffer.savedY - this._activeBuffer.ybase, 0);\n    this._curAttrData.fg = this._activeBuffer.savedCurAttrData.fg;\n    this._curAttrData.bg = this._activeBuffer.savedCurAttrData.bg;\n    this._charsetService.charset = (this as any)._savedCharset;\n    if (this._activeBuffer.savedCharset) {\n      this._charsetService.charset = this._activeBuffer.savedCharset;\n    }\n    this._restrictCursor();\n    return true;\n  }\n\n\n  /**\n   * OSC 2; <data> ST (set window title)\n   *   Proxy to set window title.\n   *\n   * @vt: #P[Icon name is not exposed.]   OSC    0   \"Set Windows Title and Icon Name\"  \"OSC 0 ; Pt BEL\"  \"Set window title and icon name.\"\n   * Icon name is not supported. For Window Title see below.\n   *\n   * @vt: #Y     OSC    2   \"Set Windows Title\"  \"OSC 2 ; Pt BEL\"  \"Set window title.\"\n   * xterm.js does not manipulate the title directly, instead exposes changes via the event `Terminal.onTitleChange`.\n   */\n  public setTitle(data: string): boolean {\n    this._windowTitle = data;\n    this._onTitleChange.fire(data);\n    return true;\n  }\n\n  /**\n   * OSC 1; <data> ST\n   * Note: Icon name is not exposed.\n   */\n  public setIconName(data: string): boolean {\n    this._iconName = data;\n    return true;\n  }\n\n  /**\n   * OSC 4; <num> ; <text> ST (set ANSI color <num> to <text>)\n   *\n   * @vt: #Y    OSC    4    \"Set ANSI color\"   \"OSC 4 ; c ; spec BEL\" \"Change color number `c` to the color specified by `spec`.\"\n   * `c` is the color index between 0 and 255. The color format of `spec` is derived from `XParseColor` (see OSC 10 for supported formats).\n   * There may be multipe `c ; spec` pairs present in the same instruction.\n   * If `spec` contains `?` the terminal returns a sequence with the currently set color.\n   */\n  public setOrReportIndexedColor(data: string): boolean {\n    const event: IColorEvent = [];\n    const slots = data.split(';');\n    while (slots.length > 1) {\n      const idx = slots.shift() as string;\n      const spec = slots.shift() as string;\n      if (/^\\d+$/.exec(idx)) {\n        const index = parseInt(idx);\n        if (0 <= index && index < 256) {\n          if (spec === '?') {\n            event.push({ type: ColorRequestType.REPORT, index });\n          } else {\n            const color = parseColor(spec);\n            if (color) {\n              event.push({ type: ColorRequestType.SET, index, color });\n            }\n          }\n        }\n      }\n    }\n    if (event.length) {\n      this._onColor.fire(event);\n    }\n    return true;\n  }\n\n  /**\n   * OSC 8 ; <params> ; <uri> ST - create hyperlink\n   * OSC 8 ; ; ST - finish hyperlink\n   *\n   * Test case:\n   *\n   * ```sh\n   * printf '\\e]8;;http://example.com\\e\\\\This is a link\\e]8;;\\e\\\\\\n'\n   * ```\n   *\n   * @vt: #Y    OSC    8    \"Create hyperlink\"   \"OSC 8 ; params ; uri BEL\" \"Create a hyperlink to `uri` using `params`.\"\n   * `uri` is a hyperlink starting with `http://`, `https://`, `ftp://`, `file://` or `mailto://`. `params` is an\n   * optional list of key=value assignments, separated by the : character. Example: `id=xyz123:foo=bar:baz=quux`.\n   * Currently only the id key is defined. Cells that share the same ID and URI share hover feedback.\n   * Use `OSC 8 ; ; BEL` to finish the current hyperlink.\n   */\n  public setHyperlink(data: string): boolean {\n    const args = data.split(';');\n    if (args.length < 2) {\n      return false;\n    }\n    if (args[1]) {\n      return this._createHyperlink(args[0], args[1]);\n    }\n    if (args[0]) {\n      return false;\n    }\n    return this._finishHyperlink();\n  }\n\n  private _createHyperlink(params: string, uri: string): boolean {\n    // It's legal to open a new hyperlink without explicitly finishing the previous one\n    if (this._getCurrentLinkId()) {\n      this._finishHyperlink();\n    }\n    const parsedParams = params.split(':');\n    let id: string | undefined;\n    const idParamIndex = parsedParams.findIndex(e => e.startsWith('id='));\n    if (idParamIndex !== -1) {\n      id = parsedParams[idParamIndex].slice(3) || undefined;\n    }\n    this._curAttrData.extended = this._curAttrData.extended.clone();\n    this._curAttrData.extended.urlId = this._oscLinkService.registerLink({ id, uri });\n    this._curAttrData.updateExtended();\n    return true;\n  }\n\n  private _finishHyperlink(): boolean {\n    this._curAttrData.extended = this._curAttrData.extended.clone();\n    this._curAttrData.extended.urlId = 0;\n    this._curAttrData.updateExtended();\n    return true;\n  }\n\n  // special colors - OSC 10 | 11 | 12\n  private _specialColors = [ColorIndex.FOREGROUND, ColorIndex.BACKGROUND, ColorIndex.CURSOR];\n\n  /**\n   * Apply colors requests for special colors in OSC 10 | 11 | 12.\n   * Since these commands are stacking from multiple parameters,\n   * we handle them in a loop with an entry offset to `_specialColors`.\n   */\n  private _setOrReportSpecialColor(data: string, offset: number): boolean {\n    const slots = data.split(';');\n    for (let i = 0; i < slots.length; ++i, ++offset) {\n      if (offset >= this._specialColors.length) break;\n      if (slots[i] === '?') {\n        this._onColor.fire([{ type: ColorRequestType.REPORT, index: this._specialColors[offset] }]);\n      } else {\n        const color = parseColor(slots[i]);\n        if (color) {\n          this._onColor.fire([{ type: ColorRequestType.SET, index: this._specialColors[offset], color }]);\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * OSC 10 ; <xcolor name>|<?> ST - set or query default foreground color\n   *\n   * @vt: #Y  OSC   10    \"Set or query default foreground color\"   \"OSC 10 ; Pt BEL\"  \"Set or query default foreground color.\"\n   * To set the color, the following color specification formats are supported:\n   * - `rgb:<red>/<green>/<blue>` for  `<red>, <green>, <blue>` in `h | hh | hhh | hhhh`, where\n   *   `h` is a single hexadecimal digit (case insignificant). The different widths scale\n   *   from 4 bit (`h`) to 16 bit (`hhhh`) and get converted to 8 bit (`hh`).\n   * - `#RGB` - 4 bits per channel, expanded to `#R0G0B0`\n   * - `#RRGGBB` - 8 bits per channel\n   * - `#RRRGGGBBB` - 12 bits per channel, truncated to `#RRGGBB`\n   * - `#RRRRGGGGBBBB` - 16 bits per channel, truncated to `#RRGGBB`\n   *\n   * **Note:** X11 named colors are currently unsupported.\n   *\n   * If `Pt` contains `?` instead of a color specification, the terminal\n   * returns a sequence with the current default foreground color\n   * (use that sequence to restore the color after changes).\n   *\n   * **Note:** Other than xterm, xterm.js does not support OSC 12 - 19.\n   * Therefore stacking multiple `Pt` separated by `;` only works for the first two entries.\n   */\n  public setOrReportFgColor(data: string): boolean {\n    return this._setOrReportSpecialColor(data, 0);\n  }\n\n  /**\n   * OSC 11 ; <xcolor name>|<?> ST - set or query default background color\n   *\n   * @vt: #Y  OSC   11    \"Set or query default background color\"   \"OSC 11 ; Pt BEL\"  \"Same as OSC 10, but for default background.\"\n   */\n  public setOrReportBgColor(data: string): boolean {\n    return this._setOrReportSpecialColor(data, 1);\n  }\n\n  /**\n   * OSC 12 ; <xcolor name>|<?> ST - set or query default cursor color\n   *\n   * @vt: #Y  OSC   12    \"Set or query default cursor color\"   \"OSC 12 ; Pt BEL\"  \"Same as OSC 10, but for default cursor color.\"\n   */\n  public setOrReportCursorColor(data: string): boolean {\n    return this._setOrReportSpecialColor(data, 2);\n  }\n\n  /**\n   * OSC 104 ; <num> ST - restore ANSI color <num>\n   *\n   * @vt: #Y  OSC   104    \"Reset ANSI color\"   \"OSC 104 ; c BEL\" \"Reset color number `c` to themed color.\"\n   * `c` is the color index between 0 and 255. This function restores the default color for `c` as\n   * specified by the loaded theme. Any number of `c` parameters may be given.\n   * If no parameters are given, the entire indexed color table will be reset.\n   */\n  public restoreIndexedColor(data: string): boolean {\n    if (!data) {\n      this._onColor.fire([{ type: ColorRequestType.RESTORE }]);\n      return true;\n    }\n    const event: IColorEvent = [];\n    const slots = data.split(';');\n    for (let i = 0; i < slots.length; ++i) {\n      if (/^\\d+$/.exec(slots[i])) {\n        const index = parseInt(slots[i]);\n        if (0 <= index && index < 256) {\n          event.push({ type: ColorRequestType.RESTORE, index });\n        }\n      }\n    }\n    if (event.length) {\n      this._onColor.fire(event);\n    }\n    return true;\n  }\n\n  /**\n   * OSC 110 ST - restore default foreground color\n   *\n   * @vt: #Y  OSC   110    \"Restore default foreground color\"   \"OSC 110 BEL\"  \"Restore default foreground to themed color.\"\n   */\n  public restoreFgColor(data: string): boolean {\n    this._onColor.fire([{ type: ColorRequestType.RESTORE, index: ColorIndex.FOREGROUND }]);\n    return true;\n  }\n\n  /**\n   * OSC 111 ST - restore default background color\n   *\n   * @vt: #Y  OSC   111    \"Restore default background color\"   \"OSC 111 BEL\"  \"Restore default background to themed color.\"\n   */\n  public restoreBgColor(data: string): boolean {\n    this._onColor.fire([{ type: ColorRequestType.RESTORE, index: ColorIndex.BACKGROUND }]);\n    return true;\n  }\n\n  /**\n   * OSC 112 ST - restore default cursor color\n   *\n   * @vt: #Y  OSC   112    \"Restore default cursor color\"   \"OSC 112 BEL\"  \"Restore default cursor to themed color.\"\n   */\n  public restoreCursorColor(data: string): boolean {\n    this._onColor.fire([{ type: ColorRequestType.RESTORE, index: ColorIndex.CURSOR }]);\n    return true;\n  }\n\n  /**\n   * ESC E\n   * C1.NEL\n   *   DEC mnemonic: NEL (https://vt100.net/docs/vt510-rm/NEL)\n   *   Moves cursor to first position on next line.\n   *\n   * @vt: #Y   C1    NEL   \"Next Line\"   \"\\x85\"    \"Move the cursor to the beginning of the next row.\"\n   * @vt: #Y   ESC   NEL   \"Next Line\"   \"ESC E\"   \"Move the cursor to the beginning of the next row.\"\n   */\n  public nextLine(): boolean {\n    this._activeBuffer.x = 0;\n    this.index();\n    return true;\n  }\n\n  /**\n   * ESC =\n   *   DEC mnemonic: DECKPAM (https://vt100.net/docs/vt510-rm/DECKPAM.html)\n   *   Enables the numeric keypad to send application sequences to the host.\n   */\n  public keypadApplicationMode(): boolean {\n    this._logService.debug('Serial port requested application keypad.');\n    this._coreService.decPrivateModes.applicationKeypad = true;\n    this._onRequestSyncScrollBar.fire();\n    return true;\n  }\n\n  /**\n   * ESC >\n   *   DEC mnemonic: DECKPNM (https://vt100.net/docs/vt510-rm/DECKPNM.html)\n   *   Enables the keypad to send numeric characters to the host.\n   */\n  public keypadNumericMode(): boolean {\n    this._logService.debug('Switching back to normal keypad.');\n    this._coreService.decPrivateModes.applicationKeypad = false;\n    this._onRequestSyncScrollBar.fire();\n    return true;\n  }\n\n  /**\n   * ESC % @\n   * ESC % G\n   *   Select default character set. UTF-8 is not supported (string are unicode anyways)\n   *   therefore ESC % G does the same.\n   */\n  public selectDefaultCharset(): boolean {\n    this._charsetService.setgLevel(0);\n    this._charsetService.setgCharset(0, DEFAULT_CHARSET); // US (default)\n    return true;\n  }\n\n  /**\n   * ESC ( C\n   *   Designate G0 Character Set, VT100, ISO 2022.\n   * ESC ) C\n   *   Designate G1 Character Set (ISO 2022, VT100).\n   * ESC * C\n   *   Designate G2 Character Set (ISO 2022, VT220).\n   * ESC + C\n   *   Designate G3 Character Set (ISO 2022, VT220).\n   * ESC - C\n   *   Designate G1 Character Set (VT300).\n   * ESC . C\n   *   Designate G2 Character Set (VT300).\n   * ESC / C\n   *   Designate G3 Character Set (VT300). C = A  -> ISO Latin-1 Supplemental. - Supported?\n   */\n  public selectCharset(collectAndFlag: string): boolean {\n    if (collectAndFlag.length !== 2) {\n      this.selectDefaultCharset();\n      return true;\n    }\n    if (collectAndFlag[0] === '/') {\n      return true;  // TODO: Is this supported?\n    }\n    this._charsetService.setgCharset(GLEVEL[collectAndFlag[0]], CHARSETS[collectAndFlag[1]] || DEFAULT_CHARSET);\n    return true;\n  }\n\n  /**\n   * ESC D\n   * C1.IND\n   *   DEC mnemonic: IND (https://vt100.net/docs/vt510-rm/IND.html)\n   *   Moves the cursor down one line in the same column.\n   *\n   * @vt: #Y   C1    IND   \"Index\"   \"\\x84\"    \"Move the cursor one line down scrolling if needed.\"\n   * @vt: #Y   ESC   IND   \"Index\"   \"ESC D\"   \"Move the cursor one line down scrolling if needed.\"\n   */\n  public index(): boolean {\n    this._restrictCursor();\n    this._activeBuffer.y++;\n    if (this._activeBuffer.y === this._activeBuffer.scrollBottom + 1) {\n      this._activeBuffer.y--;\n      this._bufferService.scroll(this._eraseAttrData());\n    } else if (this._activeBuffer.y >= this._bufferService.rows) {\n      this._activeBuffer.y = this._bufferService.rows - 1;\n    }\n    this._restrictCursor();\n    return true;\n  }\n\n  /**\n   * ESC H\n   * C1.HTS\n   *   DEC mnemonic: HTS (https://vt100.net/docs/vt510-rm/HTS.html)\n   *   Sets a horizontal tab stop at the column position indicated by\n   *   the value of the active column when the terminal receives an HTS.\n   *\n   * @vt: #Y   C1    HTS   \"Horizontal Tabulation Set\" \"\\x88\"    \"Places a tab stop at the current cursor position.\"\n   * @vt: #Y   ESC   HTS   \"Horizontal Tabulation Set\" \"ESC H\"   \"Places a tab stop at the current cursor position.\"\n   */\n  public tabSet(): boolean {\n    this._activeBuffer.tabs[this._activeBuffer.x] = true;\n    return true;\n  }\n\n  /**\n   * ESC M\n   * C1.RI\n   *   DEC mnemonic: HTS\n   *   Moves the cursor up one line in the same column. If the cursor is at the top margin,\n   *   the page scrolls down.\n   *\n   * @vt: #Y ESC  IR \"Reverse Index\" \"ESC M\"  \"Move the cursor one line up scrolling if needed.\"\n   */\n  public reverseIndex(): boolean {\n    this._restrictCursor();\n    if (this._activeBuffer.y === this._activeBuffer.scrollTop) {\n      // possibly move the code below to term.reverseScroll();\n      // test: echo -ne '\\e[1;1H\\e[44m\\eM\\e[0m'\n      // blankLine(true) is xterm/linux behavior\n      const scrollRegionHeight = this._activeBuffer.scrollBottom - this._activeBuffer.scrollTop;\n      this._activeBuffer.lines.shiftElements(this._activeBuffer.ybase + this._activeBuffer.y, scrollRegionHeight, 1);\n      this._activeBuffer.lines.set(this._activeBuffer.ybase + this._activeBuffer.y, this._activeBuffer.getBlankLine(this._eraseAttrData()));\n      this._dirtyRowTracker.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom);\n    } else {\n      this._activeBuffer.y--;\n      this._restrictCursor(); // quickfix to not run out of bounds\n    }\n    return true;\n  }\n\n  /**\n   * ESC c\n   *   DEC mnemonic: RIS (https://vt100.net/docs/vt510-rm/RIS.html)\n   *   Reset to initial state.\n   */\n  public fullReset(): boolean {\n    this._parser.reset();\n    this._onRequestReset.fire();\n    return true;\n  }\n\n  public reset(): void {\n    this._curAttrData = DEFAULT_ATTR_DATA.clone();\n    this._eraseAttrDataInternal = DEFAULT_ATTR_DATA.clone();\n  }\n\n  /**\n   * back_color_erase feature for xterm.\n   */\n  private _eraseAttrData(): IAttributeData {\n    this._eraseAttrDataInternal.bg &= ~(Attributes.CM_MASK | 0xFFFFFF);\n    this._eraseAttrDataInternal.bg |= this._curAttrData.bg & ~0xFC000000;\n    return this._eraseAttrDataInternal;\n  }\n\n  /**\n   * ESC n\n   * ESC o\n   * ESC |\n   * ESC }\n   * ESC ~\n   *   DEC mnemonic: LS (https://vt100.net/docs/vt510-rm/LS.html)\n   *   When you use a locking shift, the character set remains in GL or GR until\n   *   you use another locking shift. (partly supported)\n   */\n  public setgLevel(level: number): boolean {\n    this._charsetService.setgLevel(level);\n    return true;\n  }\n\n  /**\n   * ESC # 8\n   *   DEC mnemonic: DECALN (https://vt100.net/docs/vt510-rm/DECALN.html)\n   *   This control function fills the complete screen area with\n   *   a test pattern (E) used for adjusting screen alignment.\n   *\n   * @vt: #Y   ESC   DECALN   \"Screen Alignment Pattern\"  \"ESC # 8\"  \"Fill viewport with a test pattern (E).\"\n   */\n  public screenAlignmentPattern(): boolean {\n    // prepare cell data\n    const cell = new CellData();\n    cell.content = 1 << Content.WIDTH_SHIFT | 'E'.charCodeAt(0);\n    cell.fg = this._curAttrData.fg;\n    cell.bg = this._curAttrData.bg;\n\n\n    this._setCursor(0, 0);\n    for (let yOffset = 0; yOffset < this._bufferService.rows; ++yOffset) {\n      const row = this._activeBuffer.ybase + this._activeBuffer.y + yOffset;\n      const line = this._activeBuffer.lines.get(row);\n      if (line) {\n        line.fill(cell);\n        line.isWrapped = false;\n      }\n    }\n    this._dirtyRowTracker.markAllDirty();\n    this._setCursor(0, 0);\n    return true;\n  }\n\n\n  /**\n   * DCS $ q Pt ST\n   *   DECRQSS (https://vt100.net/docs/vt510-rm/DECRQSS.html)\n   *   Request Status String (DECRQSS), VT420 and up.\n   *   Response: DECRPSS (https://vt100.net/docs/vt510-rm/DECRPSS.html)\n   *\n   * @vt: #P[Limited support, see below.]  DCS   DECRQSS   \"Request Selection or Setting\"  \"DCS $ q Pt ST\"   \"Request several terminal settings.\"\n   * Response is in the form `ESC P 1 $ r Pt ST` for valid requests, where `Pt` contains the corresponding CSI string,\n   * `ESC P 0 ST` for invalid requests.\n   *\n   * Supported requests and responses:\n   *\n   * | Type                             | Request           | Response (`Pt`)                                       |\n   * | -------------------------------- | ----------------- | ----------------------------------------------------- |\n   * | Graphic Rendition (SGR)          | `DCS $ q m ST`    | always reporting `0m` (currently broken)              |\n   * | Top and Bottom Margins (DECSTBM) | `DCS $ q r ST`    | `Ps ; Ps r`                                           |\n   * | Cursor Style (DECSCUSR)          | `DCS $ q SP q ST` | `Ps SP q`                                             |\n   * | Protection Attribute (DECSCA)    | `DCS $ q \" q ST`  | `Ps \" q` (DECSCA 2 is reported as Ps = 0)             |\n   * | Conformance Level (DECSCL)       | `DCS $ q \" p ST`  | always reporting `61 ; 1 \" p` (DECSCL is unsupported) |\n   *\n   *\n   * TODO:\n   * - fix SGR report\n   * - either check which conformance is better suited or remove the report completely\n   *   --> we are currently a mixture of all up to VT400 but dont follow anyone strictly\n   */\n  public requestStatusString(data: string, params: IParams): boolean {\n    const f = (s: string): boolean => {\n      this._coreService.triggerDataEvent(`${C0.ESC}${s}${C0.ESC}\\\\`);\n      return true;\n    };\n\n    // access helpers\n    const b = this._bufferService.buffer;\n    const opts = this._optionsService.rawOptions;\n    const STYLES: { [key: string]: number } = { 'block': 2, 'underline': 4, 'bar': 6 };\n\n    if (data === '\"q') return f(`P1$r${this._curAttrData.isProtected() ? 1 : 0}\"q`);\n    if (data === '\"p') return f(`P1$r61;1\"p`);\n    if (data === 'r') return f(`P1$r${b.scrollTop + 1};${b.scrollBottom + 1}r`);\n    // FIXME: report real SGR settings instead of 0m\n    if (data === 'm') return f(`P1$r0m`);\n    if (data === ' q') return f(`P1$r${STYLES[opts.cursorStyle] - (opts.cursorBlink ? 1 : 0)} q`);\n    return f(`P0$r`);\n  }\n\n  public markRangeDirty(y1: number, y2: number): void {\n    this._dirtyRowTracker.markRangeDirty(y1, y2);\n  }\n}\n\nexport interface IDirtyRowTracker {\n  readonly start: number;\n  readonly end: number;\n\n  clearRange(): void;\n  markDirty(y: number): void;\n  markRangeDirty(y1: number, y2: number): void;\n  markAllDirty(): void;\n}\n\nclass DirtyRowTracker implements IDirtyRowTracker {\n  public start!: number;\n  public end!: number;\n\n  constructor(\n    @IBufferService private readonly _bufferService: IBufferService\n  ) {\n    this.clearRange();\n  }\n\n  public clearRange(): void {\n    this.start = this._bufferService.buffer.y;\n    this.end = this._bufferService.buffer.y;\n  }\n\n  public markDirty(y: number): void {\n    if (y < this.start) {\n      this.start = y;\n    } else if (y > this.end) {\n      this.end = y;\n    }\n  }\n\n  public markRangeDirty(y1: number, y2: number): void {\n    if (y1 > y2) {\n      $temp = y1;\n      y1 = y2;\n      y2 = $temp;\n    }\n    if (y1 < this.start) {\n      this.start = y1;\n    }\n    if (y2 > this.end) {\n      this.end = y2;\n    }\n  }\n\n  public markAllDirty(): void {\n    this.markRangeDirty(0, this._bufferService.rows - 1);\n  }\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IDisposable } from 'common/Types';\n\n/**\n * A base class that can be extended to provide convenience methods for managing the lifecycle of an\n * object and its components.\n */\nexport abstract class Disposable implements IDisposable {\n  protected _disposables: IDisposable[] = [];\n  protected _isDisposed: boolean = false;\n\n  constructor() {\n  }\n\n  /**\n   * Disposes the object, triggering the `dispose` method on all registered IDisposables.\n   */\n  public dispose(): void {\n    this._isDisposed = true;\n    for (const d of this._disposables) {\n      d.dispose();\n    }\n    this._disposables.length = 0;\n  }\n\n  /**\n   * Registers a disposable object.\n   * @param d The disposable to register.\n   * @returns The disposable.\n   */\n  public register<T extends IDisposable>(d: T): T {\n    this._disposables.push(d);\n    return d;\n  }\n\n  /**\n   * Unregisters a disposable object if it has been registered, if not do\n   * nothing.\n   * @param d The disposable to unregister.\n   */\n  public unregister<T extends IDisposable>(d: T): void {\n    const index = this._disposables.indexOf(d);\n    if (index !== -1) {\n      this._disposables.splice(index, 1);\n    }\n  }\n}\n\n/**\n * Wrap a function in a disposable.\n */\nexport function toDisposable(f: () => void): IDisposable {\n  return { dispose: f };\n}\n\n/**\n * Dispose of all disposables in an array and set its length to 0.\n */\nexport function disposeArray(disposables: IDisposable[]): void {\n  for (const d of disposables) {\n    d.dispose();\n  }\n  disposables.length = 0;\n}\n\n/**\n * Creates a disposable that will dispose of an array of disposables when disposed.\n */\nexport function getDisposeArrayDisposable(array: IDisposable[]): IDisposable {\n  return { dispose: () => disposeArray(array) };\n}\n","/**\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\ninterface INavigator {\n  userAgent: string;\n  language: string;\n  platform: string;\n}\n\n// We're declaring a navigator global here as we expect it in all runtimes (node and browser), but\n// we want this module to live in common.\ndeclare const navigator: INavigator;\n\nexport const isNode = (typeof navigator === 'undefined') ? true : false;\nconst userAgent = (isNode) ? 'node' : navigator.userAgent;\nconst platform = (isNode) ? 'node' : navigator.platform;\n\nexport const isFirefox = userAgent.includes('Firefox');\nexport const isLegacyEdge = userAgent.includes('Edge');\nexport const isSafari = /^((?!chrome|android).)*safari/i.test(userAgent);\nexport function getSafariVersion(): number {\n  if (!isSafari) {\n    return 0;\n  }\n  const majorVersion = userAgent.match(/Version\\/(\\d+)/);\n  if (majorVersion === null || majorVersion.length < 2) {\n    return 0;\n  }\n  return parseInt(majorVersion[1]);\n}\n\n// Find the users platform. We use this to interpret the meta key\n// and ISO third level shifts.\n// http://stackoverflow.com/q/19877924/577598\nexport const isMac = ['Macintosh', 'MacIntel', 'MacPPC', 'Mac68K'].includes(platform);\nexport const isIpad = platform === 'iPad';\nexport const isIphone = platform === 'iPhone';\nexport const isWindows = ['Windows', 'Win16', 'Win32', 'WinCE'].includes(platform);\nexport const isLinux = platform.indexOf('Linux') >= 0;\n// Note that when this is true, isLinux will also be true.\nexport const isChromeOS = /\\bCrOS\\b/.test(userAgent);\n","/**\n * Copyright (c) 2022 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { isNode } from 'common/Platform';\n\ninterface ITaskQueue {\n  /**\n   * Adds a task to the queue which will run in a future idle callback.\n   * To avoid perceivable stalls on the mainthread, tasks with heavy workload\n   * should split their work into smaller pieces and return `true` to get\n   * called again until the work is done (on falsy return value).\n   */\n  enqueue(task: () => boolean | void): void;\n\n  /**\n   * Flushes the queue, running all remaining tasks synchronously.\n   */\n  flush(): void;\n\n  /**\n   * Clears any remaining tasks from the queue, these will not be run.\n   */\n  clear(): void;\n}\n\ninterface ITaskDeadline {\n  timeRemaining(): number;\n}\ntype CallbackWithDeadline = (deadline: ITaskDeadline) => void;\n\nabstract class TaskQueue implements ITaskQueue {\n  private _tasks: (() => boolean | void)[] = [];\n  private _idleCallback?: number;\n  private _i = 0;\n\n  protected abstract _requestCallback(callback: CallbackWithDeadline): number;\n  protected abstract _cancelCallback(identifier: number): void;\n\n  public enqueue(task: () => boolean | void): void {\n    this._tasks.push(task);\n    this._start();\n  }\n\n  public flush(): void {\n    while (this._i < this._tasks.length) {\n      if (!this._tasks[this._i]()) {\n        this._i++;\n      }\n    }\n    this.clear();\n  }\n\n  public clear(): void {\n    if (this._idleCallback) {\n      this._cancelCallback(this._idleCallback);\n      this._idleCallback = undefined;\n    }\n    this._i = 0;\n    this._tasks.length = 0;\n  }\n\n  private _start(): void {\n    if (!this._idleCallback) {\n      this._idleCallback = this._requestCallback(this._process.bind(this));\n    }\n  }\n\n  private _process(deadline: ITaskDeadline): void {\n    this._idleCallback = undefined;\n    let taskDuration = 0;\n    let longestTask = 0;\n    let lastDeadlineRemaining = deadline.timeRemaining();\n    let deadlineRemaining = 0;\n    while (this._i < this._tasks.length) {\n      taskDuration = Date.now();\n      if (!this._tasks[this._i]()) {\n        this._i++;\n      }\n      // other than performance.now, Date.now might not be stable (changes on wall clock changes),\n      // this is not an issue here as a clock change during a short running task is very unlikely\n      // in case it still happened and leads to negative duration, simply assume 1 msec\n      taskDuration = Math.max(1, Date.now() - taskDuration);\n      longestTask = Math.max(taskDuration, longestTask);\n      // Guess the following task will take a similar time to the longest task in this batch, allow\n      // additional room to try avoid exceeding the deadline\n      deadlineRemaining = deadline.timeRemaining();\n      if (longestTask * 1.5 > deadlineRemaining) {\n        // Warn when the time exceeding the deadline is over 20ms, if this happens in practice the\n        // task should be split into sub-tasks to ensure the UI remains responsive.\n        if (lastDeadlineRemaining - taskDuration < -20) {\n          console.warn(`task queue exceeded allotted deadline by ${Math.abs(Math.round(lastDeadlineRemaining - taskDuration))}ms`);\n        }\n        this._start();\n        return;\n      }\n      lastDeadlineRemaining = deadlineRemaining;\n    }\n    this.clear();\n  }\n}\n\n/**\n * A queue of that runs tasks over several tasks via setTimeout, trying to maintain above 60 frames\n * per second. The tasks will run in the order they are enqueued, but they will run some time later,\n * and care should be taken to ensure they're non-urgent and will not introduce race conditions.\n */\nexport class PriorityTaskQueue extends TaskQueue {\n  protected _requestCallback(callback: CallbackWithDeadline): number {\n    return setTimeout(() => callback(this._createDeadline(16)));\n  }\n\n  protected _cancelCallback(identifier: number): void {\n    clearTimeout(identifier);\n  }\n\n  private _createDeadline(duration: number): ITaskDeadline {\n    const end = Date.now() + duration;\n    return {\n      timeRemaining: () => Math.max(0, end - Date.now())\n    };\n  }\n}\n\nclass IdleTaskQueueInternal extends TaskQueue {\n  protected _requestCallback(callback: IdleRequestCallback): number {\n    return requestIdleCallback(callback);\n  }\n\n  protected _cancelCallback(identifier: number): void {\n    cancelIdleCallback(identifier);\n  }\n}\n\n/**\n * A queue of that runs tasks over several idle callbacks, trying to respect the idle callback's\n * deadline given by the environment. The tasks will run in the order they are enqueued, but they\n * will run some time later, and care should be taken to ensure they're non-urgent and will not\n * introduce race conditions.\n *\n * This reverts to a {@link PriorityTaskQueue} if the environment does not support idle callbacks.\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const IdleTaskQueue = (!isNode && 'requestIdleCallback' in window) ? IdleTaskQueueInternal : PriorityTaskQueue;\n\n/**\n * An object that tracks a single debounced task that will run on the next idle frame. When called\n * multiple times, only the last set task will run.\n */\nexport class DebouncedIdleTask {\n  private _queue: ITaskQueue;\n\n  constructor() {\n    this._queue = new IdleTaskQueue();\n  }\n\n  public set(task: () => boolean | void): void {\n    this._queue.clear();\n    this._queue.enqueue(task);\n  }\n\n  public flush(): void {\n    this._queue.flush();\n  }\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { CHAR_DATA_CODE_INDEX, NULL_CELL_CODE, WHITESPACE_CELL_CODE } from 'common/buffer/Constants';\nimport { IBufferService } from 'common/services/Services';\n\nexport function updateWindowsModeWrappedState(bufferService: IBufferService): void {\n  // Winpty does not support wraparound mode which means that lines will never\n  // be marked as wrapped. This causes issues for things like copying a line\n  // retaining the wrapped new line characters or if consumers are listening\n  // in on the data stream.\n  //\n  // The workaround for this is to listen to every incoming line feed and mark\n  // the line as wrapped if the last character in the previous line is not a\n  // space. This is certainly not without its problems, but generally on\n  // Windows when text reaches the end of the terminal it's likely going to be\n  // wrapped.\n  const line = bufferService.buffer.lines.get(bufferService.buffer.ybase + bufferService.buffer.y - 1);\n  const lastChar = line?.get(bufferService.cols - 1);\n\n  const nextLine = bufferService.buffer.lines.get(bufferService.buffer.ybase + bufferService.buffer.y);\n  if (nextLine && lastChar) {\n    nextLine.isWrapped = (lastChar[CHAR_DATA_CODE_INDEX] !== NULL_CELL_CODE && lastChar[CHAR_DATA_CODE_INDEX] !== WHITESPACE_CELL_CODE);\n  }\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IAttributeData, IColorRGB, IExtendedAttrs } from 'common/Types';\nimport { Attributes, FgFlags, BgFlags, UnderlineStyle, ExtFlags } from 'common/buffer/Constants';\n\nexport class AttributeData implements IAttributeData {\n  public static toColorRGB(value: number): IColorRGB {\n    return [\n      value >>> Attributes.RED_SHIFT & 255,\n      value >>> Attributes.GREEN_SHIFT & 255,\n      value & 255\n    ];\n  }\n\n  public static fromColorRGB(value: IColorRGB): number {\n    return (value[0] & 255) << Attributes.RED_SHIFT | (value[1] & 255) << Attributes.GREEN_SHIFT | value[2] & 255;\n  }\n\n  public clone(): IAttributeData {\n    const newObj = new AttributeData();\n    newObj.fg = this.fg;\n    newObj.bg = this.bg;\n    newObj.extended = this.extended.clone();\n    return newObj;\n  }\n\n  // data\n  public fg = 0;\n  public bg = 0;\n  public extended: IExtendedAttrs = new ExtendedAttrs();\n\n  // flags\n  public isInverse(): number       { return this.fg & FgFlags.INVERSE; }\n  public isBold(): number          { return this.fg & FgFlags.BOLD; }\n  public isUnderline(): number     {\n    if (this.hasExtendedAttrs() && this.extended.underlineStyle !== UnderlineStyle.NONE) {\n      return 1;\n    }\n    return this.fg & FgFlags.UNDERLINE;\n  }\n  public isBlink(): number         { return this.fg & FgFlags.BLINK; }\n  public isInvisible(): number     { return this.fg & FgFlags.INVISIBLE; }\n  public isItalic(): number        { return this.bg & BgFlags.ITALIC; }\n  public isDim(): number           { return this.bg & BgFlags.DIM; }\n  public isStrikethrough(): number { return this.fg & FgFlags.STRIKETHROUGH; }\n  public isProtected(): number     { return this.bg & BgFlags.PROTECTED; }\n\n  // color modes\n  public getFgColorMode(): number { return this.fg & Attributes.CM_MASK; }\n  public getBgColorMode(): number { return this.bg & Attributes.CM_MASK; }\n  public isFgRGB(): boolean       { return (this.fg & Attributes.CM_MASK) === Attributes.CM_RGB; }\n  public isBgRGB(): boolean       { return (this.bg & Attributes.CM_MASK) === Attributes.CM_RGB; }\n  public isFgPalette(): boolean   { return (this.fg & Attributes.CM_MASK) === Attributes.CM_P16 || (this.fg & Attributes.CM_MASK) === Attributes.CM_P256; }\n  public isBgPalette(): boolean   { return (this.bg & Attributes.CM_MASK) === Attributes.CM_P16 || (this.bg & Attributes.CM_MASK) === Attributes.CM_P256; }\n  public isFgDefault(): boolean   { return (this.fg & Attributes.CM_MASK) === 0; }\n  public isBgDefault(): boolean   { return (this.bg & Attributes.CM_MASK) === 0; }\n  public isAttributeDefault(): boolean { return this.fg === 0 && this.bg === 0; }\n\n  // colors\n  public getFgColor(): number {\n    switch (this.fg & Attributes.CM_MASK) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:  return this.fg & Attributes.PCOLOR_MASK;\n      case Attributes.CM_RGB:   return this.fg & Attributes.RGB_MASK;\n      default:                  return -1;  // CM_DEFAULT defaults to -1\n    }\n  }\n  public getBgColor(): number {\n    switch (this.bg & Attributes.CM_MASK) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:  return this.bg & Attributes.PCOLOR_MASK;\n      case Attributes.CM_RGB:   return this.bg & Attributes.RGB_MASK;\n      default:                  return -1;  // CM_DEFAULT defaults to -1\n    }\n  }\n\n  // extended attrs\n  public hasExtendedAttrs(): number {\n    return this.bg & BgFlags.HAS_EXTENDED;\n  }\n  public updateExtended(): void {\n    if (this.extended.isEmpty()) {\n      this.bg &= ~BgFlags.HAS_EXTENDED;\n    } else {\n      this.bg |= BgFlags.HAS_EXTENDED;\n    }\n  }\n  public getUnderlineColor(): number {\n    if ((this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor) {\n      switch (this.extended.underlineColor & Attributes.CM_MASK) {\n        case Attributes.CM_P16:\n        case Attributes.CM_P256:  return this.extended.underlineColor & Attributes.PCOLOR_MASK;\n        case Attributes.CM_RGB:   return this.extended.underlineColor & Attributes.RGB_MASK;\n        default:                  return this.getFgColor();\n      }\n    }\n    return this.getFgColor();\n  }\n  public getUnderlineColorMode(): number {\n    return (this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor\n      ? this.extended.underlineColor & Attributes.CM_MASK\n      : this.getFgColorMode();\n  }\n  public isUnderlineColorRGB(): boolean {\n    return (this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor\n      ? (this.extended.underlineColor & Attributes.CM_MASK) === Attributes.CM_RGB\n      : this.isFgRGB();\n  }\n  public isUnderlineColorPalette(): boolean {\n    return (this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor\n      ? (this.extended.underlineColor & Attributes.CM_MASK) === Attributes.CM_P16\n          || (this.extended.underlineColor & Attributes.CM_MASK) === Attributes.CM_P256\n      : this.isFgPalette();\n  }\n  public isUnderlineColorDefault(): boolean {\n    return (this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor\n      ? (this.extended.underlineColor & Attributes.CM_MASK) === 0\n      : this.isFgDefault();\n  }\n  public getUnderlineStyle(): UnderlineStyle {\n    return this.fg & FgFlags.UNDERLINE\n      ? (this.bg & BgFlags.HAS_EXTENDED ? this.extended.underlineStyle : UnderlineStyle.SINGLE)\n      : UnderlineStyle.NONE;\n  }\n}\n\n\n/**\n * Extended attributes for a cell.\n * Holds information about different underline styles and color.\n */\nexport class ExtendedAttrs implements IExtendedAttrs {\n  private _ext: number = 0;\n  public get ext(): number {\n    if (this._urlId) {\n      return (\n        (this._ext & ~ExtFlags.UNDERLINE_STYLE) |\n        (this.underlineStyle << 26)\n      );\n    }\n    return this._ext;\n  }\n  public set ext(value: number) { this._ext = value; }\n\n  public get underlineStyle(): UnderlineStyle {\n    // Always return the URL style if it has one\n    if (this._urlId) {\n      return UnderlineStyle.DASHED;\n    }\n    return (this._ext & ExtFlags.UNDERLINE_STYLE) >> 26;\n  }\n  public set underlineStyle(value: UnderlineStyle) {\n    this._ext &= ~ExtFlags.UNDERLINE_STYLE;\n    this._ext |= (value << 26) & ExtFlags.UNDERLINE_STYLE;\n  }\n\n  public get underlineColor(): number {\n    return this._ext & (Attributes.CM_MASK | Attributes.RGB_MASK);\n  }\n  public set underlineColor(value: number) {\n    this._ext &= ~(Attributes.CM_MASK | Attributes.RGB_MASK);\n    this._ext |= value & (Attributes.CM_MASK | Attributes.RGB_MASK);\n  }\n\n  private _urlId: number = 0;\n  public get urlId(): number {\n    return this._urlId;\n  }\n  public set urlId(value: number) {\n    this._urlId = value;\n  }\n\n  constructor(\n    ext: number = 0,\n    urlId: number = 0\n  ) {\n    this._ext = ext;\n    this._urlId = urlId;\n  }\n\n  public clone(): IExtendedAttrs {\n    return new ExtendedAttrs(this._ext, this._urlId);\n  }\n\n  /**\n   * Convenient method to indicate whether the object holds no additional information,\n   * that needs to be persistant in the buffer.\n   */\n  public isEmpty(): boolean {\n    return this.underlineStyle === UnderlineStyle.NONE && this._urlId === 0;\n  }\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { CircularList, IInsertEvent } from 'common/CircularList';\nimport { IBuffer } from 'common/buffer/Types';\nimport { IBufferLine, ICellData, IAttributeData, ICharset } from 'common/Types';\nimport { BufferLine, DEFAULT_ATTR_DATA } from 'common/buffer/BufferLine';\nimport { CellData } from 'common/buffer/CellData';\nimport { NULL_CELL_CHAR, NULL_CELL_WIDTH, NULL_CELL_CODE, WHITESPACE_CELL_CHAR, WHITESPACE_CELL_WIDTH, WHITESPACE_CELL_CODE, CHAR_DATA_WIDTH_INDEX, CHAR_DATA_CHAR_INDEX } from 'common/buffer/Constants';\nimport { reflowLargerApplyNewLayout, reflowLargerCreateNewLayout, reflowLargerGetLinesToRemove, reflowSmallerGetNewLineLengths, getWrappedLineTrimmedLength } from 'common/buffer/BufferReflow';\nimport { Marker } from 'common/buffer/Marker';\nimport { IOptionsService, IBufferService } from 'common/services/Services';\nimport { DEFAULT_CHARSET } from 'common/data/Charsets';\nimport { ExtendedAttrs } from 'common/buffer/AttributeData';\nimport { IdleTaskQueue } from 'common/TaskQueue';\n\nexport const MAX_BUFFER_SIZE = 4294967295; // 2^32 - 1\n\n/**\n * This class represents a terminal buffer (an internal state of the terminal), where the\n * following information is stored (in high-level):\n *   - text content of this particular buffer\n *   - cursor position\n *   - scroll position\n */\nexport class Buffer implements IBuffer {\n  public lines: CircularList<IBufferLine>;\n  public ydisp: number = 0;\n  public ybase: number = 0;\n  public y: number = 0;\n  public x: number = 0;\n  public scrollBottom: number;\n  public scrollTop: number;\n  public tabs: { [column: number]: boolean | undefined } = {};\n  public savedY: number = 0;\n  public savedX: number = 0;\n  public savedCurAttrData = DEFAULT_ATTR_DATA.clone();\n  public savedCharset: ICharset | undefined = DEFAULT_CHARSET;\n  public markers: Marker[] = [];\n  private _nullCell: ICellData = CellData.fromCharData([0, NULL_CELL_CHAR, NULL_CELL_WIDTH, NULL_CELL_CODE]);\n  private _whitespaceCell: ICellData = CellData.fromCharData([0, WHITESPACE_CELL_CHAR, WHITESPACE_CELL_WIDTH, WHITESPACE_CELL_CODE]);\n  private _cols: number;\n  private _rows: number;\n  private _isClearing: boolean = false;\n\n  constructor(\n    private _hasScrollback: boolean,\n    private _optionsService: IOptionsService,\n    private _bufferService: IBufferService\n  ) {\n    this._cols = this._bufferService.cols;\n    this._rows = this._bufferService.rows;\n    this.lines = new CircularList<IBufferLine>(this._getCorrectBufferLength(this._rows));\n    this.scrollTop = 0;\n    this.scrollBottom = this._rows - 1;\n    this.setupTabStops();\n  }\n\n  public getNullCell(attr?: IAttributeData): ICellData {\n    if (attr) {\n      this._nullCell.fg = attr.fg;\n      this._nullCell.bg = attr.bg;\n      this._nullCell.extended = attr.extended;\n    } else {\n      this._nullCell.fg = 0;\n      this._nullCell.bg = 0;\n      this._nullCell.extended = new ExtendedAttrs();\n    }\n    return this._nullCell;\n  }\n\n  public getWhitespaceCell(attr?: IAttributeData): ICellData {\n    if (attr) {\n      this._whitespaceCell.fg = attr.fg;\n      this._whitespaceCell.bg = attr.bg;\n      this._whitespaceCell.extended = attr.extended;\n    } else {\n      this._whitespaceCell.fg = 0;\n      this._whitespaceCell.bg = 0;\n      this._whitespaceCell.extended = new ExtendedAttrs();\n    }\n    return this._whitespaceCell;\n  }\n\n  public getBlankLine(attr: IAttributeData, isWrapped?: boolean): IBufferLine {\n    return new BufferLine(this._bufferService.cols, this.getNullCell(attr), isWrapped);\n  }\n\n  public get hasScrollback(): boolean {\n    return this._hasScrollback && this.lines.maxLength > this._rows;\n  }\n\n  public get isCursorInViewport(): boolean {\n    const absoluteY = this.ybase + this.y;\n    const relativeY = absoluteY - this.ydisp;\n    return (relativeY >= 0 && relativeY < this._rows);\n  }\n\n  /**\n   * Gets the correct buffer length based on the rows provided, the terminal's\n   * scrollback and whether this buffer is flagged to have scrollback or not.\n   * @param rows The terminal rows to use in the calculation.\n   */\n  private _getCorrectBufferLength(rows: number): number {\n    if (!this._hasScrollback) {\n      return rows;\n    }\n\n    const correctBufferLength = rows + this._optionsService.rawOptions.scrollback;\n\n    return correctBufferLength > MAX_BUFFER_SIZE ? MAX_BUFFER_SIZE : correctBufferLength;\n  }\n\n  /**\n   * Fills the buffer's viewport with blank lines.\n   */\n  public fillViewportRows(fillAttr?: IAttributeData): void {\n    if (this.lines.length === 0) {\n      if (fillAttr === undefined) {\n        fillAttr = DEFAULT_ATTR_DATA;\n      }\n      let i = this._rows;\n      while (i--) {\n        this.lines.push(this.getBlankLine(fillAttr));\n      }\n    }\n  }\n\n  /**\n   * Clears the buffer to it's initial state, discarding all previous data.\n   */\n  public clear(): void {\n    this.ydisp = 0;\n    this.ybase = 0;\n    this.y = 0;\n    this.x = 0;\n    this.lines = new CircularList<IBufferLine>(this._getCorrectBufferLength(this._rows));\n    this.scrollTop = 0;\n    this.scrollBottom = this._rows - 1;\n    this.setupTabStops();\n  }\n\n  /**\n   * Resizes the buffer, adjusting its data accordingly.\n   * @param newCols The new number of columns.\n   * @param newRows The new number of rows.\n   */\n  public resize(newCols: number, newRows: number): void {\n    // store reference to null cell with default attrs\n    const nullCell = this.getNullCell(DEFAULT_ATTR_DATA);\n\n    // count bufferlines with overly big memory to be cleaned afterwards\n    let dirtyMemoryLines = 0;\n\n    // Increase max length if needed before adjustments to allow space to fill\n    // as required.\n    const newMaxLength = this._getCorrectBufferLength(newRows);\n    if (newMaxLength > this.lines.maxLength) {\n      this.lines.maxLength = newMaxLength;\n    }\n\n    // The following adjustments should only happen if the buffer has been\n    // initialized/filled.\n    if (this.lines.length > 0) {\n      // Deal with columns increasing (reducing needs to happen after reflow)\n      if (this._cols < newCols) {\n        for (let i = 0; i < this.lines.length; i++) {\n          // +boolean for fast 0 or 1 conversion\n          dirtyMemoryLines += +this.lines.get(i)!.resize(newCols, nullCell);\n        }\n      }\n\n      // Resize rows in both directions as needed\n      let addToY = 0;\n      if (this._rows < newRows) {\n        for (let y = this._rows; y < newRows; y++) {\n          if (this.lines.length < newRows + this.ybase) {\n            if (this._optionsService.rawOptions.windowsMode) {\n              // Just add the new missing rows on Windows as conpty reprints the screen with it's\n              // view of the world. Once a line enters scrollback for conpty it remains there\n              this.lines.push(new BufferLine(newCols, nullCell));\n            } else {\n              if (this.ybase > 0 && this.lines.length <= this.ybase + this.y + addToY + 1) {\n                // There is room above the buffer and there are no empty elements below the line,\n                // scroll up\n                this.ybase--;\n                addToY++;\n                if (this.ydisp > 0) {\n                  // Viewport is at the top of the buffer, must increase downwards\n                  this.ydisp--;\n                }\n              } else {\n                // Add a blank line if there is no buffer left at the top to scroll to, or if there\n                // are blank lines after the cursor\n                this.lines.push(new BufferLine(newCols, nullCell));\n              }\n            }\n          }\n        }\n      } else { // (this._rows >= newRows)\n        for (let y = this._rows; y > newRows; y--) {\n          if (this.lines.length > newRows + this.ybase) {\n            if (this.lines.length > this.ybase + this.y + 1) {\n              // The line is a blank line below the cursor, remove it\n              this.lines.pop();\n            } else {\n              // The line is the cursor, scroll down\n              this.ybase++;\n              this.ydisp++;\n            }\n          }\n        }\n      }\n\n      // Reduce max length if needed after adjustments, this is done after as it\n      // would otherwise cut data from the bottom of the buffer.\n      if (newMaxLength < this.lines.maxLength) {\n        // Trim from the top of the buffer and adjust ybase and ydisp.\n        const amountToTrim = this.lines.length - newMaxLength;\n        if (amountToTrim > 0) {\n          this.lines.trimStart(amountToTrim);\n          this.ybase = Math.max(this.ybase - amountToTrim, 0);\n          this.ydisp = Math.max(this.ydisp - amountToTrim, 0);\n          this.savedY = Math.max(this.savedY - amountToTrim, 0);\n        }\n        this.lines.maxLength = newMaxLength;\n      }\n\n      // Make sure that the cursor stays on screen\n      this.x = Math.min(this.x, newCols - 1);\n      this.y = Math.min(this.y, newRows - 1);\n      if (addToY) {\n        this.y += addToY;\n      }\n      this.savedX = Math.min(this.savedX, newCols - 1);\n\n      this.scrollTop = 0;\n    }\n\n    this.scrollBottom = newRows - 1;\n\n    if (this._isReflowEnabled) {\n      this._reflow(newCols, newRows);\n\n      // Trim the end of the line off if cols shrunk\n      if (this._cols > newCols) {\n        for (let i = 0; i < this.lines.length; i++) {\n          // +boolean for fast 0 or 1 conversion\n          dirtyMemoryLines += +this.lines.get(i)!.resize(newCols, nullCell);\n        }\n      }\n    }\n\n    this._cols = newCols;\n    this._rows = newRows;\n\n    this._memoryCleanupQueue.clear();\n    // schedule memory cleanup only, if more than 10% of the lines are affected\n    if (dirtyMemoryLines > 0.1 * this.lines.length) {\n      this._memoryCleanupPosition = 0;\n      this._memoryCleanupQueue.enqueue(() => this._batchedMemoryCleanup());\n    }\n  }\n\n  private _memoryCleanupQueue = new IdleTaskQueue();\n  private _memoryCleanupPosition = 0;\n\n  private _batchedMemoryCleanup(): boolean {\n    let normalRun = true;\n    if (this._memoryCleanupPosition >= this.lines.length) {\n      // cleanup made it once through all lines, thus rescan in loop below to also catch shifted lines,\n      // which should finish rather quick if there are no more cleanups pending\n      this._memoryCleanupPosition = 0;\n      normalRun = false;\n    }\n    let counted = 0;\n    while (this._memoryCleanupPosition < this.lines.length) {\n      counted += this.lines.get(this._memoryCleanupPosition++)!.cleanupMemory();\n      // cleanup max 100 lines per batch\n      if (counted > 100) {\n        return true;\n      }\n    }\n    // normal runs always need another rescan afterwards\n    // if we made it here with normalRun=false, we are in a final run\n    // and can end the cleanup task for sure\n    return normalRun;\n  }\n\n  private get _isReflowEnabled(): boolean {\n    return this._hasScrollback && !this._optionsService.rawOptions.windowsMode;\n  }\n\n  private _reflow(newCols: number, newRows: number): void {\n    if (this._cols === newCols) {\n      return;\n    }\n\n    // Iterate through rows, ignore the last one as it cannot be wrapped\n    if (newCols > this._cols) {\n      this._reflowLarger(newCols, newRows);\n    } else {\n      this._reflowSmaller(newCols, newRows);\n    }\n  }\n\n  private _reflowLarger(newCols: number, newRows: number): void {\n    const toRemove: number[] = reflowLargerGetLinesToRemove(this.lines, this._cols, newCols, this.ybase + this.y, this.getNullCell(DEFAULT_ATTR_DATA));\n    if (toRemove.length > 0) {\n      const newLayoutResult = reflowLargerCreateNewLayout(this.lines, toRemove);\n      reflowLargerApplyNewLayout(this.lines, newLayoutResult.layout);\n      this._reflowLargerAdjustViewport(newCols, newRows, newLayoutResult.countRemoved);\n    }\n  }\n\n  private _reflowLargerAdjustViewport(newCols: number, newRows: number, countRemoved: number): void {\n    const nullCell = this.getNullCell(DEFAULT_ATTR_DATA);\n    // Adjust viewport based on number of items removed\n    let viewportAdjustments = countRemoved;\n    while (viewportAdjustments-- > 0) {\n      if (this.ybase === 0) {\n        if (this.y > 0) {\n          this.y--;\n        }\n        if (this.lines.length < newRows) {\n          // Add an extra row at the bottom of the viewport\n          this.lines.push(new BufferLine(newCols, nullCell));\n        }\n      } else {\n        if (this.ydisp === this.ybase) {\n          this.ydisp--;\n        }\n        this.ybase--;\n      }\n    }\n    this.savedY = Math.max(this.savedY - countRemoved, 0);\n  }\n\n  private _reflowSmaller(newCols: number, newRows: number): void {\n    const nullCell = this.getNullCell(DEFAULT_ATTR_DATA);\n    // Gather all BufferLines that need to be inserted into the Buffer here so that they can be\n    // batched up and only committed once\n    const toInsert = [];\n    let countToInsert = 0;\n    // Go backwards as many lines may be trimmed and this will avoid considering them\n    for (let y = this.lines.length - 1; y >= 0; y--) {\n      // Check whether this line is a problem\n      let nextLine = this.lines.get(y) as BufferLine;\n      if (!nextLine || !nextLine.isWrapped && nextLine.getTrimmedLength() <= newCols) {\n        continue;\n      }\n\n      // Gather wrapped lines and adjust y to be the starting line\n      const wrappedLines: BufferLine[] = [nextLine];\n      while (nextLine.isWrapped && y > 0) {\n        nextLine = this.lines.get(--y) as BufferLine;\n        wrappedLines.unshift(nextLine);\n      }\n\n      // If these lines contain the cursor don't touch them, the program will handle fixing up\n      // wrapped lines with the cursor\n      const absoluteY = this.ybase + this.y;\n      if (absoluteY >= y && absoluteY < y + wrappedLines.length) {\n        continue;\n      }\n\n      const lastLineLength = wrappedLines[wrappedLines.length - 1].getTrimmedLength();\n      const destLineLengths = reflowSmallerGetNewLineLengths(wrappedLines, this._cols, newCols);\n      const linesToAdd = destLineLengths.length - wrappedLines.length;\n      let trimmedLines: number;\n      if (this.ybase === 0 && this.y !== this.lines.length - 1) {\n        // If the top section of the buffer is not yet filled\n        trimmedLines = Math.max(0, this.y - this.lines.maxLength + linesToAdd);\n      } else {\n        trimmedLines = Math.max(0, this.lines.length - this.lines.maxLength + linesToAdd);\n      }\n\n      // Add the new lines\n      const newLines: BufferLine[] = [];\n      for (let i = 0; i < linesToAdd; i++) {\n        const newLine = this.getBlankLine(DEFAULT_ATTR_DATA, true) as BufferLine;\n        newLines.push(newLine);\n      }\n      if (newLines.length > 0) {\n        toInsert.push({\n          // countToInsert here gets the actual index, taking into account other inserted items.\n          // using this we can iterate through the list forwards\n          start: y + wrappedLines.length + countToInsert,\n          newLines\n        });\n        countToInsert += newLines.length;\n      }\n      wrappedLines.push(...newLines);\n\n      // Copy buffer data to new locations, this needs to happen backwards to do in-place\n      let destLineIndex = destLineLengths.length - 1; // Math.floor(cellsNeeded / newCols);\n      let destCol = destLineLengths[destLineIndex]; // cellsNeeded % newCols;\n      if (destCol === 0) {\n        destLineIndex--;\n        destCol = destLineLengths[destLineIndex];\n      }\n      let srcLineIndex = wrappedLines.length - linesToAdd - 1;\n      let srcCol = lastLineLength;\n      while (srcLineIndex >= 0) {\n        const cellsToCopy = Math.min(srcCol, destCol);\n        if (wrappedLines[destLineIndex] === undefined) {\n          // Sanity check that the line exists, this has been known to fail for an unknown reason\n          // which would stop the reflow from happening if an exception would throw.\n          break;\n        }\n        wrappedLines[destLineIndex].copyCellsFrom(wrappedLines[srcLineIndex], srcCol - cellsToCopy, destCol - cellsToCopy, cellsToCopy, true);\n        destCol -= cellsToCopy;\n        if (destCol === 0) {\n          destLineIndex--;\n          destCol = destLineLengths[destLineIndex];\n        }\n        srcCol -= cellsToCopy;\n        if (srcCol === 0) {\n          srcLineIndex--;\n          const wrappedLinesIndex = Math.max(srcLineIndex, 0);\n          srcCol = getWrappedLineTrimmedLength(wrappedLines, wrappedLinesIndex, this._cols);\n        }\n      }\n\n      // Null out the end of the line ends if a wide character wrapped to the following line\n      for (let i = 0; i < wrappedLines.length; i++) {\n        if (destLineLengths[i] < newCols) {\n          wrappedLines[i].setCell(destLineLengths[i], nullCell);\n        }\n      }\n\n      // Adjust viewport as needed\n      let viewportAdjustments = linesToAdd - trimmedLines;\n      while (viewportAdjustments-- > 0) {\n        if (this.ybase === 0) {\n          if (this.y < newRows - 1) {\n            this.y++;\n            this.lines.pop();\n          } else {\n            this.ybase++;\n            this.ydisp++;\n          }\n        } else {\n          // Ensure ybase does not exceed its maximum value\n          if (this.ybase < Math.min(this.lines.maxLength, this.lines.length + countToInsert) - newRows) {\n            if (this.ybase === this.ydisp) {\n              this.ydisp++;\n            }\n            this.ybase++;\n          }\n        }\n      }\n      this.savedY = Math.min(this.savedY + linesToAdd, this.ybase + newRows - 1);\n    }\n\n    // Rearrange lines in the buffer if there are any insertions, this is done at the end rather\n    // than earlier so that it's a single O(n) pass through the buffer, instead of O(n^2) from many\n    // costly calls to CircularList.splice.\n    if (toInsert.length > 0) {\n      // Record buffer insert events and then play them back backwards so that the indexes are\n      // correct\n      const insertEvents: IInsertEvent[] = [];\n\n      // Record original lines so they don't get overridden when we rearrange the list\n      const originalLines: BufferLine[] = [];\n      for (let i = 0; i < this.lines.length; i++) {\n        originalLines.push(this.lines.get(i) as BufferLine);\n      }\n      const originalLinesLength = this.lines.length;\n\n      let originalLineIndex = originalLinesLength - 1;\n      let nextToInsertIndex = 0;\n      let nextToInsert = toInsert[nextToInsertIndex];\n      this.lines.length = Math.min(this.lines.maxLength, this.lines.length + countToInsert);\n      let countInsertedSoFar = 0;\n      for (let i = Math.min(this.lines.maxLength - 1, originalLinesLength + countToInsert - 1); i >= 0; i--) {\n        if (nextToInsert && nextToInsert.start > originalLineIndex + countInsertedSoFar) {\n          // Insert extra lines here, adjusting i as needed\n          for (let nextI = nextToInsert.newLines.length - 1; nextI >= 0; nextI--) {\n            this.lines.set(i--, nextToInsert.newLines[nextI]);\n          }\n          i++;\n\n          // Create insert events for later\n          insertEvents.push({\n            index: originalLineIndex + 1,\n            amount: nextToInsert.newLines.length\n          });\n\n          countInsertedSoFar += nextToInsert.newLines.length;\n          nextToInsert = toInsert[++nextToInsertIndex];\n        } else {\n          this.lines.set(i, originalLines[originalLineIndex--]);\n        }\n      }\n\n      // Update markers\n      let insertCountEmitted = 0;\n      for (let i = insertEvents.length - 1; i >= 0; i--) {\n        insertEvents[i].index += insertCountEmitted;\n        this.lines.onInsertEmitter.fire(insertEvents[i]);\n        insertCountEmitted += insertEvents[i].amount;\n      }\n      const amountToTrim = Math.max(0, originalLinesLength + countToInsert - this.lines.maxLength);\n      if (amountToTrim > 0) {\n        this.lines.onTrimEmitter.fire(amountToTrim);\n      }\n    }\n  }\n\n  /**\n   * Translates a buffer line to a string, with optional start and end columns.\n   * Wide characters will count as two columns in the resulting string. This\n   * function is useful for getting the actual text underneath the raw selection\n   * position.\n   * @param lineIndex The absolute index of the line being translated.\n   * @param trimRight Whether to trim whitespace to the right.\n   * @param startCol The column to start at.\n   * @param endCol The column to end at.\n   */\n  public translateBufferLineToString(lineIndex: number, trimRight: boolean, startCol: number = 0, endCol?: number): string {\n    const line = this.lines.get(lineIndex);\n    if (!line) {\n      return '';\n    }\n    return line.translateToString(trimRight, startCol, endCol);\n  }\n\n  public getWrappedRangeForLine(y: number): { first: number, last: number } {\n    let first = y;\n    let last = y;\n    // Scan upwards for wrapped lines\n    while (first > 0 && this.lines.get(first)!.isWrapped) {\n      first--;\n    }\n    // Scan downwards for wrapped lines\n    while (last + 1 < this.lines.length && this.lines.get(last + 1)!.isWrapped) {\n      last++;\n    }\n    return { first, last };\n  }\n\n  /**\n   * Setup the tab stops.\n   * @param i The index to start setting up tab stops from.\n   */\n  public setupTabStops(i?: number): void {\n    if (i !== null && i !== undefined) {\n      if (!this.tabs[i]) {\n        i = this.prevStop(i);\n      }\n    } else {\n      this.tabs = {};\n      i = 0;\n    }\n\n    for (; i < this._cols; i += this._optionsService.rawOptions.tabStopWidth) {\n      this.tabs[i] = true;\n    }\n  }\n\n  /**\n   * Move the cursor to the previous tab stop from the given position (default is current).\n   * @param x The position to move the cursor to the previous tab stop.\n   */\n  public prevStop(x?: number): number {\n    if (x === null || x === undefined) {\n      x = this.x;\n    }\n    while (!this.tabs[--x] && x > 0);\n    return x >= this._cols ? this._cols - 1 : x < 0 ? 0 : x;\n  }\n\n  /**\n   * Move the cursor one tab stop forward from the given position (default is current).\n   * @param x The position to move the cursor one tab stop forward.\n   */\n  public nextStop(x?: number): number {\n    if (x === null || x === undefined) {\n      x = this.x;\n    }\n    while (!this.tabs[++x] && x < this._cols);\n    return x >= this._cols ? this._cols - 1 : x < 0 ? 0 : x;\n  }\n\n  /**\n   * Clears markers on single line.\n   * @param y The line to clear.\n   */\n  public clearMarkers(y: number): void {\n    this._isClearing = true;\n    for (let i = 0; i < this.markers.length; i++) {\n      if (this.markers[i].line === y) {\n        this.markers[i].dispose();\n        this.markers.splice(i--, 1);\n      }\n    }\n    this._isClearing = false;\n  }\n\n  /**\n   * Clears markers on all lines\n   */\n  public clearAllMarkers(): void {\n    this._isClearing = true;\n    for (let i = 0; i < this.markers.length; i++) {\n      this.markers[i].dispose();\n      this.markers.splice(i--, 1);\n    }\n    this._isClearing = false;\n  }\n\n  public addMarker(y: number): Marker {\n    const marker = new Marker(y);\n    this.markers.push(marker);\n    marker.register(this.lines.onTrim(amount => {\n      marker.line -= amount;\n      // The marker should be disposed when the line is trimmed from the buffer\n      if (marker.line < 0) {\n        marker.dispose();\n      }\n    }));\n    marker.register(this.lines.onInsert(event => {\n      if (marker.line >= event.index) {\n        marker.line += event.amount;\n      }\n    }));\n    marker.register(this.lines.onDelete(event => {\n      // Delete the marker if it's within the range\n      if (marker.line >= event.index && marker.line < event.index + event.amount) {\n        marker.dispose();\n      }\n\n      // Shift the marker if it's after the deleted range\n      if (marker.line > event.index) {\n        marker.line -= event.amount;\n      }\n    }));\n    marker.register(marker.onDispose(() => this._removeMarker(marker)));\n    return marker;\n  }\n\n  private _removeMarker(marker: Marker): void {\n    if (!this._isClearing) {\n      this.markers.splice(this.markers.indexOf(marker), 1);\n    }\n  }\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { CharData, IBufferLine, ICellData, IAttributeData, IExtendedAttrs } from 'common/Types';\nimport { stringFromCodePoint } from 'common/input/TextDecoder';\nimport { CHAR_DATA_CHAR_INDEX, CHAR_DATA_WIDTH_INDEX, CHAR_DATA_ATTR_INDEX, NULL_CELL_CHAR, NULL_CELL_WIDTH, NULL_CELL_CODE, WHITESPACE_CELL_CHAR, Content, BgFlags, FgFlags } from 'common/buffer/Constants';\nimport { CellData } from 'common/buffer/CellData';\nimport { AttributeData, ExtendedAttrs } from 'common/buffer/AttributeData';\n\n/**\n * buffer memory layout:\n *\n *   |             uint32_t             |        uint32_t         |        uint32_t         |\n *   |             `content`            |          `FG`           |          `BG`           |\n *   | wcwidth(2) comb(1) codepoint(21) | flags(8) R(8) G(8) B(8) | flags(8) R(8) G(8) B(8) |\n */\n\n\n/** typed array slots taken by one cell */\nconst CELL_SIZE = 3;\n\n/**\n * Cell member indices.\n *\n * Direct access:\n *    `content = data[column * CELL_SIZE + Cell.CONTENT];`\n *    `fg = data[column * CELL_SIZE + Cell.FG];`\n *    `bg = data[column * CELL_SIZE + Cell.BG];`\n */\nconst enum Cell {\n  CONTENT = 0,\n  FG = 1, // currently simply holds all known attrs\n  BG = 2  // currently unused\n}\n\nexport const DEFAULT_ATTR_DATA = Object.freeze(new AttributeData());\n\n// Work variables to avoid garbage collection\nlet $startIndex = 0;\n\n/** Factor when to cleanup underlying array buffer after shrinking. */\nconst CLEANUP_THRESHOLD = 2;\n\n/**\n * Typed array based bufferline implementation.\n *\n * There are 2 ways to insert data into the cell buffer:\n * - `setCellFromCodepoint` + `addCodepointToCell`\n *   Use these for data that is already UTF32.\n *   Used during normal input in `InputHandler` for faster buffer access.\n * - `setCell`\n *   This method takes a CellData object and stores the data in the buffer.\n *   Use `CellData.fromCharData` to create the CellData object (e.g. from JS string).\n *\n * To retrieve data from the buffer use either one of the primitive methods\n * (if only one particular value is needed) or `loadCell`. For `loadCell` in a loop\n * memory allocs / GC pressure can be greatly reduced by reusing the CellData object.\n */\nexport class BufferLine implements IBufferLine {\n  protected _data: Uint32Array;\n  protected _combined: {[index: number]: string} = {};\n  protected _extendedAttrs: {[index: number]: IExtendedAttrs | undefined} = {};\n  public length: number;\n\n  constructor(cols: number, fillCellData?: ICellData, public isWrapped: boolean = false) {\n    this._data = new Uint32Array(cols * CELL_SIZE);\n    const cell = fillCellData || CellData.fromCharData([0, NULL_CELL_CHAR, NULL_CELL_WIDTH, NULL_CELL_CODE]);\n    for (let i = 0; i < cols; ++i) {\n      this.setCell(i, cell);\n    }\n    this.length = cols;\n  }\n\n  /**\n   * Get cell data CharData.\n   * @deprecated\n   */\n  public get(index: number): CharData {\n    const content = this._data[index * CELL_SIZE + Cell.CONTENT];\n    const cp = content & Content.CODEPOINT_MASK;\n    return [\n      this._data[index * CELL_SIZE + Cell.FG],\n      (content & Content.IS_COMBINED_MASK)\n        ? this._combined[index]\n        : (cp) ? stringFromCodePoint(cp) : '',\n      content >> Content.WIDTH_SHIFT,\n      (content & Content.IS_COMBINED_MASK)\n        ? this._combined[index].charCodeAt(this._combined[index].length - 1)\n        : cp\n    ];\n  }\n\n  /**\n   * Set cell data from CharData.\n   * @deprecated\n   */\n  public set(index: number, value: CharData): void {\n    this._data[index * CELL_SIZE + Cell.FG] = value[CHAR_DATA_ATTR_INDEX];\n    if (value[CHAR_DATA_CHAR_INDEX].length > 1) {\n      this._combined[index] = value[1];\n      this._data[index * CELL_SIZE + Cell.CONTENT] = index | Content.IS_COMBINED_MASK | (value[CHAR_DATA_WIDTH_INDEX] << Content.WIDTH_SHIFT);\n    } else {\n      this._data[index * CELL_SIZE + Cell.CONTENT] = value[CHAR_DATA_CHAR_INDEX].charCodeAt(0) | (value[CHAR_DATA_WIDTH_INDEX] << Content.WIDTH_SHIFT);\n    }\n  }\n\n  /**\n   * primitive getters\n   * use these when only one value is needed, otherwise use `loadCell`\n   */\n  public getWidth(index: number): number {\n    return this._data[index * CELL_SIZE + Cell.CONTENT] >> Content.WIDTH_SHIFT;\n  }\n\n  /** Test whether content has width. */\n  public hasWidth(index: number): number {\n    return this._data[index * CELL_SIZE + Cell.CONTENT] & Content.WIDTH_MASK;\n  }\n\n  /** Get FG cell component. */\n  public getFg(index: number): number {\n    return this._data[index * CELL_SIZE + Cell.FG];\n  }\n\n  /** Get BG cell component. */\n  public getBg(index: number): number {\n    return this._data[index * CELL_SIZE + Cell.BG];\n  }\n\n  /**\n   * Test whether contains any chars.\n   * Basically an empty has no content, but other cells might differ in FG/BG\n   * from real empty cells.\n   */\n  public hasContent(index: number): number {\n    return this._data[index * CELL_SIZE + Cell.CONTENT] & Content.HAS_CONTENT_MASK;\n  }\n\n  /**\n   * Get codepoint of the cell.\n   * To be in line with `code` in CharData this either returns\n   * a single UTF32 codepoint or the last codepoint of a combined string.\n   */\n  public getCodePoint(index: number): number {\n    const content = this._data[index * CELL_SIZE + Cell.CONTENT];\n    if (content & Content.IS_COMBINED_MASK) {\n      return this._combined[index].charCodeAt(this._combined[index].length - 1);\n    }\n    return content & Content.CODEPOINT_MASK;\n  }\n\n  /** Test whether the cell contains a combined string. */\n  public isCombined(index: number): number {\n    return this._data[index * CELL_SIZE + Cell.CONTENT] & Content.IS_COMBINED_MASK;\n  }\n\n  /** Returns the string content of the cell. */\n  public getString(index: number): string {\n    const content = this._data[index * CELL_SIZE + Cell.CONTENT];\n    if (content & Content.IS_COMBINED_MASK) {\n      return this._combined[index];\n    }\n    if (content & Content.CODEPOINT_MASK) {\n      return stringFromCodePoint(content & Content.CODEPOINT_MASK);\n    }\n    // return empty string for empty cells\n    return '';\n  }\n\n  /** Get state of protected flag. */\n  public isProtected(index: number): number {\n    return this._data[index * CELL_SIZE + Cell.BG] & BgFlags.PROTECTED;\n  }\n\n  /**\n   * Load data at `index` into `cell`. This is used to access cells in a way that's more friendly\n   * to GC as it significantly reduced the amount of new objects/references needed.\n   */\n  public loadCell(index: number, cell: ICellData): ICellData {\n    $startIndex = index * CELL_SIZE;\n    cell.content = this._data[$startIndex + Cell.CONTENT];\n    cell.fg = this._data[$startIndex + Cell.FG];\n    cell.bg = this._data[$startIndex + Cell.BG];\n    if (cell.content & Content.IS_COMBINED_MASK) {\n      cell.combinedData = this._combined[index];\n    }\n    if (cell.bg & BgFlags.HAS_EXTENDED) {\n      cell.extended = this._extendedAttrs[index]!;\n    }\n    return cell;\n  }\n\n  /**\n   * Set data at `index` to `cell`.\n   */\n  public setCell(index: number, cell: ICellData): void {\n    if (cell.content & Content.IS_COMBINED_MASK) {\n      this._combined[index] = cell.combinedData;\n    }\n    if (cell.bg & BgFlags.HAS_EXTENDED) {\n      this._extendedAttrs[index] = cell.extended;\n    }\n    this._data[index * CELL_SIZE + Cell.CONTENT] = cell.content;\n    this._data[index * CELL_SIZE + Cell.FG] = cell.fg;\n    this._data[index * CELL_SIZE + Cell.BG] = cell.bg;\n  }\n\n  /**\n   * Set cell data from input handler.\n   * Since the input handler see the incoming chars as UTF32 codepoints,\n   * it gets an optimized access method.\n   */\n  public setCellFromCodePoint(index: number, codePoint: number, width: number, fg: number, bg: number, eAttrs: IExtendedAttrs): void {\n    if (bg & BgFlags.HAS_EXTENDED) {\n      this._extendedAttrs[index] = eAttrs;\n    }\n    this._data[index * CELL_SIZE + Cell.CONTENT] = codePoint | (width << Content.WIDTH_SHIFT);\n    this._data[index * CELL_SIZE + Cell.FG] = fg;\n    this._data[index * CELL_SIZE + Cell.BG] = bg;\n  }\n\n  /**\n   * Add a codepoint to a cell from input handler.\n   * During input stage combining chars with a width of 0 follow and stack\n   * onto a leading char. Since we already set the attrs\n   * by the previous `setDataFromCodePoint` call, we can omit it here.\n   */\n  public addCodepointToCell(index: number, codePoint: number): void {\n    let content = this._data[index * CELL_SIZE + Cell.CONTENT];\n    if (content & Content.IS_COMBINED_MASK) {\n      // we already have a combined string, simply add\n      this._combined[index] += stringFromCodePoint(codePoint);\n    } else {\n      if (content & Content.CODEPOINT_MASK) {\n        // normal case for combining chars:\n        //  - move current leading char + new one into combined string\n        //  - set combined flag\n        this._combined[index] = stringFromCodePoint(content & Content.CODEPOINT_MASK) + stringFromCodePoint(codePoint);\n        content &= ~Content.CODEPOINT_MASK; // set codepoint in buffer to 0\n        content |= Content.IS_COMBINED_MASK;\n      } else {\n        // should not happen - we actually have no data in the cell yet\n        // simply set the data in the cell buffer with a width of 1\n        content = codePoint | (1 << Content.WIDTH_SHIFT);\n      }\n      this._data[index * CELL_SIZE + Cell.CONTENT] = content;\n    }\n  }\n\n  public insertCells(pos: number, n: number, fillCellData: ICellData, eraseAttr?: IAttributeData): void {\n    pos %= this.length;\n\n    // handle fullwidth at pos: reset cell one to the left if pos is second cell of a wide char\n    if (pos && this.getWidth(pos - 1) === 2) {\n      this.setCellFromCodePoint(pos - 1, 0, 1, eraseAttr?.fg || 0, eraseAttr?.bg || 0, eraseAttr?.extended || new ExtendedAttrs());\n    }\n\n    if (n < this.length - pos) {\n      const cell = new CellData();\n      for (let i = this.length - pos - n - 1; i >= 0; --i) {\n        this.setCell(pos + n + i, this.loadCell(pos + i, cell));\n      }\n      for (let i = 0; i < n; ++i) {\n        this.setCell(pos + i, fillCellData);\n      }\n    } else {\n      for (let i = pos; i < this.length; ++i) {\n        this.setCell(i, fillCellData);\n      }\n    }\n\n    // handle fullwidth at line end: reset last cell if it is first cell of a wide char\n    if (this.getWidth(this.length - 1) === 2) {\n      this.setCellFromCodePoint(this.length - 1, 0, 1, eraseAttr?.fg || 0, eraseAttr?.bg || 0, eraseAttr?.extended || new ExtendedAttrs());\n    }\n  }\n\n  public deleteCells(pos: number, n: number, fillCellData: ICellData, eraseAttr?: IAttributeData): void {\n    pos %= this.length;\n    if (n < this.length - pos) {\n      const cell = new CellData();\n      for (let i = 0; i < this.length - pos - n; ++i) {\n        this.setCell(pos + i, this.loadCell(pos + n + i, cell));\n      }\n      for (let i = this.length - n; i < this.length; ++i) {\n        this.setCell(i, fillCellData);\n      }\n    } else {\n      for (let i = pos; i < this.length; ++i) {\n        this.setCell(i, fillCellData);\n      }\n    }\n\n    // handle fullwidth at pos:\n    // - reset pos-1 if wide char\n    // - reset pos if width==0 (previous second cell of a wide char)\n    if (pos && this.getWidth(pos - 1) === 2) {\n      this.setCellFromCodePoint(pos - 1, 0, 1, eraseAttr?.fg || 0, eraseAttr?.bg || 0, eraseAttr?.extended || new ExtendedAttrs());\n    }\n    if (this.getWidth(pos) === 0 && !this.hasContent(pos)) {\n      this.setCellFromCodePoint(pos, 0, 1, eraseAttr?.fg || 0, eraseAttr?.bg || 0, eraseAttr?.extended || new ExtendedAttrs());\n    }\n  }\n\n  public replaceCells(start: number, end: number, fillCellData: ICellData, eraseAttr?: IAttributeData, respectProtect: boolean = false): void {\n    // full branching on respectProtect==true, hopefully getting fast JIT for standard case\n    if (respectProtect) {\n      if (start && this.getWidth(start - 1) === 2 && !this.isProtected(start - 1)) {\n        this.setCellFromCodePoint(start - 1, 0, 1, eraseAttr?.fg || 0, eraseAttr?.bg || 0, eraseAttr?.extended || new ExtendedAttrs());\n      }\n      if (end < this.length && this.getWidth(end - 1) === 2 && !this.isProtected(end)) {\n        this.setCellFromCodePoint(end, 0, 1, eraseAttr?.fg || 0, eraseAttr?.bg || 0, eraseAttr?.extended || new ExtendedAttrs());\n      }\n      while (start < end  && start < this.length) {\n        if (!this.isProtected(start)) {\n          this.setCell(start, fillCellData);\n        }\n        start++;\n      }\n      return;\n    }\n\n    // handle fullwidth at start: reset cell one to the left if start is second cell of a wide char\n    if (start && this.getWidth(start - 1) === 2) {\n      this.setCellFromCodePoint(start - 1, 0, 1, eraseAttr?.fg || 0, eraseAttr?.bg || 0, eraseAttr?.extended || new ExtendedAttrs());\n    }\n    // handle fullwidth at last cell + 1: reset to empty cell if it is second part of a wide char\n    if (end < this.length && this.getWidth(end - 1) === 2) {\n      this.setCellFromCodePoint(end, 0, 1, eraseAttr?.fg || 0, eraseAttr?.bg || 0, eraseAttr?.extended || new ExtendedAttrs());\n    }\n\n    while (start < end  && start < this.length) {\n      this.setCell(start++, fillCellData);\n    }\n  }\n\n  /**\n   * Resize BufferLine to `cols` filling excess cells with `fillCellData`.\n   * The underlying array buffer will not change if there is still enough space\n   * to hold the new buffer line data.\n   * Returns a boolean indicating, whether a `cleanupMemory` call would free\n   * excess memory (true after shrinking > CLEANUP_THRESHOLD).\n   */\n  public resize(cols: number, fillCellData: ICellData): boolean {\n    if (cols === this.length) {\n      return this._data.length * 4 * CLEANUP_THRESHOLD < this._data.buffer.byteLength;\n    }\n    const uint32Cells = cols * CELL_SIZE;\n    if (cols > this.length) {\n      if (this._data.buffer.byteLength >= uint32Cells * 4) {\n        // optimization: avoid alloc and data copy if buffer has enough room\n        this._data = new Uint32Array(this._data.buffer, 0, uint32Cells);\n      } else {\n        // slow path: new alloc and full data copy\n        const data = new Uint32Array(uint32Cells);\n        data.set(this._data);\n        this._data = data;\n      }\n      for (let i = this.length; i < cols; ++i) {\n        this.setCell(i, fillCellData);\n      }\n    } else {\n      // optimization: just shrink the view on existing buffer\n      this._data = this._data.subarray(0, uint32Cells);\n      // Remove any cut off combined data\n      const keys = Object.keys(this._combined);\n      for (let i = 0; i < keys.length; i++) {\n        const key = parseInt(keys[i], 10);\n        if (key >= cols) {\n          delete this._combined[key];\n        }\n      }\n      // remove any cut off extended attributes\n      const extKeys = Object.keys(this._extendedAttrs);\n      for (let i = 0; i < extKeys.length; i++) {\n        const key = parseInt(extKeys[i], 10);\n        if (key >= cols) {\n          delete this._extendedAttrs[key];\n        }\n      }\n    }\n    this.length = cols;\n    return uint32Cells * 4 * CLEANUP_THRESHOLD < this._data.buffer.byteLength;\n  }\n\n  /**\n   * Cleanup underlying array buffer.\n   * A cleanup will be triggered if the array buffer exceeds the actual used\n   * memory by a factor of CLEANUP_THRESHOLD.\n   * Returns 0 or 1 indicating whether a cleanup happened.\n   */\n  public cleanupMemory(): number {\n    if (this._data.length * 4 * CLEANUP_THRESHOLD < this._data.buffer.byteLength) {\n      const data = new Uint32Array(this._data.length);\n      data.set(this._data);\n      this._data = data;\n      return 1;\n    }\n    return 0;\n  }\n\n  /** fill a line with fillCharData */\n  public fill(fillCellData: ICellData, respectProtect: boolean = false): void {\n    // full branching on respectProtect==true, hopefully getting fast JIT for standard case\n    if (respectProtect) {\n      for (let i = 0; i < this.length; ++i) {\n        if (!this.isProtected(i)) {\n          this.setCell(i, fillCellData);\n        }\n      }\n      return;\n    }\n    this._combined = {};\n    this._extendedAttrs = {};\n    for (let i = 0; i < this.length; ++i) {\n      this.setCell(i, fillCellData);\n    }\n  }\n\n  /** alter to a full copy of line  */\n  public copyFrom(line: BufferLine): void {\n    if (this.length !== line.length) {\n      this._data = new Uint32Array(line._data);\n    } else {\n      // use high speed copy if lengths are equal\n      this._data.set(line._data);\n    }\n    this.length = line.length;\n    this._combined = {};\n    for (const el in line._combined) {\n      this._combined[el] = line._combined[el];\n    }\n    this._extendedAttrs = {};\n    for (const el in line._extendedAttrs) {\n      this._extendedAttrs[el] = line._extendedAttrs[el];\n    }\n    this.isWrapped = line.isWrapped;\n  }\n\n  /** create a new clone */\n  public clone(): IBufferLine {\n    const newLine = new BufferLine(0);\n    newLine._data = new Uint32Array(this._data);\n    newLine.length = this.length;\n    for (const el in this._combined) {\n      newLine._combined[el] = this._combined[el];\n    }\n    for (const el in this._extendedAttrs) {\n      newLine._extendedAttrs[el] = this._extendedAttrs[el];\n    }\n    newLine.isWrapped = this.isWrapped;\n    return newLine;\n  }\n\n  public getTrimmedLength(): number {\n    for (let i = this.length - 1; i >= 0; --i) {\n      if ((this._data[i * CELL_SIZE + Cell.CONTENT] & Content.HAS_CONTENT_MASK)) {\n        return i + (this._data[i * CELL_SIZE + Cell.CONTENT] >> Content.WIDTH_SHIFT);\n      }\n    }\n    return 0;\n  }\n\n  public copyCellsFrom(src: BufferLine, srcCol: number, destCol: number, length: number, applyInReverse: boolean): void {\n    const srcData = src._data;\n    if (applyInReverse) {\n      for (let cell = length - 1; cell >= 0; cell--) {\n        for (let i = 0; i < CELL_SIZE; i++) {\n          this._data[(destCol + cell) * CELL_SIZE + i] = srcData[(srcCol + cell) * CELL_SIZE + i];\n        }\n        if (srcData[(srcCol + cell) * CELL_SIZE + Cell.BG] & BgFlags.HAS_EXTENDED) {\n          this._extendedAttrs[destCol + cell] = src._extendedAttrs[srcCol + cell];\n        }\n      }\n    } else {\n      for (let cell = 0; cell < length; cell++) {\n        for (let i = 0; i < CELL_SIZE; i++) {\n          this._data[(destCol + cell) * CELL_SIZE + i] = srcData[(srcCol + cell) * CELL_SIZE + i];\n        }\n        if (srcData[(srcCol + cell) * CELL_SIZE + Cell.BG] & BgFlags.HAS_EXTENDED) {\n          this._extendedAttrs[destCol + cell] = src._extendedAttrs[srcCol + cell];\n        }\n      }\n    }\n\n    // Move any combined data over as needed, FIXME: repeat for extended attrs\n    const srcCombinedKeys = Object.keys(src._combined);\n    for (let i = 0; i < srcCombinedKeys.length; i++) {\n      const key = parseInt(srcCombinedKeys[i], 10);\n      if (key >= srcCol) {\n        this._combined[key - srcCol + destCol] = src._combined[key];\n      }\n    }\n  }\n\n  public translateToString(trimRight: boolean = false, startCol: number = 0, endCol: number = this.length): string {\n    if (trimRight) {\n      endCol = Math.min(endCol, this.getTrimmedLength());\n    }\n    let result = '';\n    while (startCol < endCol) {\n      const content = this._data[startCol * CELL_SIZE + Cell.CONTENT];\n      const cp = content & Content.CODEPOINT_MASK;\n      result += (content & Content.IS_COMBINED_MASK) ? this._combined[startCol] : (cp) ? stringFromCodePoint(cp) : WHITESPACE_CELL_CHAR;\n      startCol += (content >> Content.WIDTH_SHIFT) || 1; // always advance by 1\n    }\n    return result;\n  }\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { BufferLine } from 'common/buffer/BufferLine';\nimport { CircularList } from 'common/CircularList';\nimport { IBufferLine, ICellData } from 'common/Types';\n\nexport interface INewLayoutResult {\n  layout: number[];\n  countRemoved: number;\n}\n\n/**\n * Evaluates and returns indexes to be removed after a reflow larger occurs. Lines will be removed\n * when a wrapped line unwraps.\n * @param lines The buffer lines.\n * @param oldCols The columns before resize\n * @param newCols The columns after resize.\n * @param bufferAbsoluteY The absolute y position of the cursor (baseY + cursorY).\n * @param nullCell The cell data to use when filling in empty cells.\n */\nexport function reflowLargerGetLinesToRemove(lines: CircularList<IBufferLine>, oldCols: number, newCols: number, bufferAbsoluteY: number, nullCell: ICellData): number[] {\n  // Gather all BufferLines that need to be removed from the Buffer here so that they can be\n  // batched up and only committed once\n  const toRemove: number[] = [];\n\n  for (let y = 0; y < lines.length - 1; y++) {\n    // Check if this row is wrapped\n    let i = y;\n    let nextLine = lines.get(++i) as BufferLine;\n    if (!nextLine.isWrapped) {\n      continue;\n    }\n\n    // Check how many lines it's wrapped for\n    const wrappedLines: BufferLine[] = [lines.get(y) as BufferLine];\n    while (i < lines.length && nextLine.isWrapped) {\n      wrappedLines.push(nextLine);\n      nextLine = lines.get(++i) as BufferLine;\n    }\n\n    // If these lines contain the cursor don't touch them, the program will handle fixing up wrapped\n    // lines with the cursor\n    if (bufferAbsoluteY >= y && bufferAbsoluteY < i) {\n      y += wrappedLines.length - 1;\n      continue;\n    }\n\n    // Copy buffer data to new locations\n    let destLineIndex = 0;\n    let destCol = getWrappedLineTrimmedLength(wrappedLines, destLineIndex, oldCols);\n    let srcLineIndex = 1;\n    let srcCol = 0;\n    while (srcLineIndex < wrappedLines.length) {\n      const srcTrimmedTineLength = getWrappedLineTrimmedLength(wrappedLines, srcLineIndex, oldCols);\n      const srcRemainingCells = srcTrimmedTineLength - srcCol;\n      const destRemainingCells = newCols - destCol;\n      const cellsToCopy = Math.min(srcRemainingCells, destRemainingCells);\n\n      wrappedLines[destLineIndex].copyCellsFrom(wrappedLines[srcLineIndex], srcCol, destCol, cellsToCopy, false);\n\n      destCol += cellsToCopy;\n      if (destCol === newCols) {\n        destLineIndex++;\n        destCol = 0;\n      }\n      srcCol += cellsToCopy;\n      if (srcCol === srcTrimmedTineLength) {\n        srcLineIndex++;\n        srcCol = 0;\n      }\n\n      // Make sure the last cell isn't wide, if it is copy it to the current dest\n      if (destCol === 0 && destLineIndex !== 0) {\n        if (wrappedLines[destLineIndex - 1].getWidth(newCols - 1) === 2) {\n          wrappedLines[destLineIndex].copyCellsFrom(wrappedLines[destLineIndex - 1], newCols - 1, destCol++, 1, false);\n          // Null out the end of the last row\n          wrappedLines[destLineIndex - 1].setCell(newCols - 1, nullCell);\n        }\n      }\n    }\n\n    // Clear out remaining cells or fragments could remain;\n    wrappedLines[destLineIndex].replaceCells(destCol, newCols, nullCell);\n\n    // Work backwards and remove any rows at the end that only contain null cells\n    let countToRemove = 0;\n    for (let i = wrappedLines.length - 1; i > 0; i--) {\n      if (i > destLineIndex || wrappedLines[i].getTrimmedLength() === 0) {\n        countToRemove++;\n      } else {\n        break;\n      }\n    }\n\n    if (countToRemove > 0) {\n      toRemove.push(y + wrappedLines.length - countToRemove); // index\n      toRemove.push(countToRemove);\n    }\n\n    y += wrappedLines.length - 1;\n  }\n  return toRemove;\n}\n\n/**\n * Creates and return the new layout for lines given an array of indexes to be removed.\n * @param lines The buffer lines.\n * @param toRemove The indexes to remove.\n */\nexport function reflowLargerCreateNewLayout(lines: CircularList<IBufferLine>, toRemove: number[]): INewLayoutResult {\n  const layout: number[] = [];\n  // First iterate through the list and get the actual indexes to use for rows\n  let nextToRemoveIndex = 0;\n  let nextToRemoveStart = toRemove[nextToRemoveIndex];\n  let countRemovedSoFar = 0;\n  for (let i = 0; i < lines.length; i++) {\n    if (nextToRemoveStart === i) {\n      const countToRemove = toRemove[++nextToRemoveIndex];\n\n      // Tell markers that there was a deletion\n      lines.onDeleteEmitter.fire({\n        index: i - countRemovedSoFar,\n        amount: countToRemove\n      });\n\n      i += countToRemove - 1;\n      countRemovedSoFar += countToRemove;\n      nextToRemoveStart = toRemove[++nextToRemoveIndex];\n    } else {\n      layout.push(i);\n    }\n  }\n  return {\n    layout,\n    countRemoved: countRemovedSoFar\n  };\n}\n\n/**\n * Applies a new layout to the buffer. This essentially does the same as many splice calls but it's\n * done all at once in a single iteration through the list since splice is very expensive.\n * @param lines The buffer lines.\n * @param newLayout The new layout to apply.\n */\nexport function reflowLargerApplyNewLayout(lines: CircularList<IBufferLine>, newLayout: number[]): void {\n  // Record original lines so they don't get overridden when we rearrange the list\n  const newLayoutLines: BufferLine[] = [];\n  for (let i = 0; i < newLayout.length; i++) {\n    newLayoutLines.push(lines.get(newLayout[i]) as BufferLine);\n  }\n\n  // Rearrange the list\n  for (let i = 0; i < newLayoutLines.length; i++) {\n    lines.set(i, newLayoutLines[i]);\n  }\n  lines.length = newLayout.length;\n}\n\n/**\n * Gets the new line lengths for a given wrapped line. The purpose of this function it to pre-\n * compute the wrapping points since wide characters may need to be wrapped onto the following line.\n * This function will return an array of numbers of where each line wraps to, the resulting array\n * will only contain the values `newCols` (when the line does not end with a wide character) and\n * `newCols - 1` (when the line does end with a wide character), except for the last value which\n * will contain the remaining items to fill the line.\n *\n * Calling this with a `newCols` value of `1` will lock up.\n *\n * @param wrappedLines The wrapped lines to evaluate.\n * @param oldCols The columns before resize.\n * @param newCols The columns after resize.\n */\nexport function reflowSmallerGetNewLineLengths(wrappedLines: BufferLine[], oldCols: number, newCols: number): number[] {\n  const newLineLengths: number[] = [];\n  const cellsNeeded = wrappedLines.map((l, i) => getWrappedLineTrimmedLength(wrappedLines, i, oldCols)).reduce((p, c) => p + c);\n\n  // Use srcCol and srcLine to find the new wrapping point, use that to get the cellsAvailable and\n  // linesNeeded\n  let srcCol = 0;\n  let srcLine = 0;\n  let cellsAvailable = 0;\n  while (cellsAvailable < cellsNeeded) {\n    if (cellsNeeded - cellsAvailable < newCols) {\n      // Add the final line and exit the loop\n      newLineLengths.push(cellsNeeded - cellsAvailable);\n      break;\n    }\n    srcCol += newCols;\n    const oldTrimmedLength = getWrappedLineTrimmedLength(wrappedLines, srcLine, oldCols);\n    if (srcCol > oldTrimmedLength) {\n      srcCol -= oldTrimmedLength;\n      srcLine++;\n    }\n    const endsWithWide = wrappedLines[srcLine].getWidth(srcCol - 1) === 2;\n    if (endsWithWide) {\n      srcCol--;\n    }\n    const lineLength = endsWithWide ? newCols - 1 : newCols;\n    newLineLengths.push(lineLength);\n    cellsAvailable += lineLength;\n  }\n\n  return newLineLengths;\n}\n\nexport function getWrappedLineTrimmedLength(lines: BufferLine[], i: number, cols: number): number {\n  // If this is the last row in the wrapped line, get the actual trimmed length\n  if (i === lines.length - 1) {\n    return lines[i].getTrimmedLength();\n  }\n  // Detect whether the following line starts with a wide character and the end of the current line\n  // is null, if so then we can be pretty sure the null character should be excluded from the line\n  // length]\n  const endsInNull = !(lines[i].hasContent(cols - 1)) && lines[i].getWidth(cols - 1) === 1;\n  const followingLineStartsWithWide = lines[i + 1].getWidth(0) === 2;\n  if (endsInNull && followingLineStartsWithWide) {\n    return cols - 1;\n  }\n  return cols;\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IBuffer, IBufferSet } from 'common/buffer/Types';\nimport { IAttributeData } from 'common/Types';\nimport { Buffer } from 'common/buffer/Buffer';\nimport { EventEmitter, IEvent } from 'common/EventEmitter';\nimport { IOptionsService, IBufferService } from 'common/services/Services';\nimport { Disposable } from 'common/Lifecycle';\n\n/**\n * The BufferSet represents the set of two buffers used by xterm terminals (normal and alt) and\n * provides also utilities for working with them.\n */\nexport class BufferSet extends Disposable implements IBufferSet {\n  private _normal!: Buffer;\n  private _alt!: Buffer;\n  private _activeBuffer!: Buffer;\n\n  private readonly _onBufferActivate = this.register(new EventEmitter<{activeBuffer: IBuffer, inactiveBuffer: IBuffer}>());\n  public readonly onBufferActivate = this._onBufferActivate.event;\n\n  /**\n   * Create a new BufferSet for the given terminal.\n   */\n  constructor(\n    private readonly _optionsService: IOptionsService,\n    private readonly _bufferService: IBufferService\n  ) {\n    super();\n    this.reset();\n    this.register(this._optionsService.onSpecificOptionChange('scrollback', () => this.resize(this._bufferService.cols, this._bufferService.rows)));\n    this.register(this._optionsService.onSpecificOptionChange('tabStopWidth', () => this.setupTabStops()));\n  }\n\n  public reset(): void {\n    this._normal = new Buffer(true, this._optionsService, this._bufferService);\n    this._normal.fillViewportRows();\n\n    // The alt buffer should never have scrollback.\n    // See http://invisible-island.net/xterm/ctlseqs/ctlseqs.html#h2-The-Alternate-Screen-Buffer\n    this._alt = new Buffer(false, this._optionsService, this._bufferService);\n    this._activeBuffer = this._normal;\n    this._onBufferActivate.fire({\n      activeBuffer: this._normal,\n      inactiveBuffer: this._alt\n    });\n\n    this.setupTabStops();\n  }\n\n  /**\n   * Returns the alt Buffer of the BufferSet\n   */\n  public get alt(): Buffer {\n    return this._alt;\n  }\n\n  /**\n   * Returns the currently active Buffer of the BufferSet\n   */\n  public get active(): Buffer {\n    return this._activeBuffer;\n  }\n\n  /**\n   * Returns the normal Buffer of the BufferSet\n   */\n  public get normal(): Buffer {\n    return this._normal;\n  }\n\n  /**\n   * Sets the normal Buffer of the BufferSet as its currently active Buffer\n   */\n  public activateNormalBuffer(): void {\n    if (this._activeBuffer === this._normal) {\n      return;\n    }\n    this._normal.x = this._alt.x;\n    this._normal.y = this._alt.y;\n    // The alt buffer should always be cleared when we switch to the normal\n    // buffer. This frees up memory since the alt buffer should always be new\n    // when activated.\n    this._alt.clearAllMarkers();\n    this._alt.clear();\n    this._activeBuffer = this._normal;\n    this._onBufferActivate.fire({\n      activeBuffer: this._normal,\n      inactiveBuffer: this._alt\n    });\n  }\n\n  /**\n   * Sets the alt Buffer of the BufferSet as its currently active Buffer\n   */\n  public activateAltBuffer(fillAttr?: IAttributeData): void {\n    if (this._activeBuffer === this._alt) {\n      return;\n    }\n    // Since the alt buffer is always cleared when the normal buffer is\n    // activated, we want to fill it when switching to it.\n    this._alt.fillViewportRows(fillAttr);\n    this._alt.x = this._normal.x;\n    this._alt.y = this._normal.y;\n    this._activeBuffer = this._alt;\n    this._onBufferActivate.fire({\n      activeBuffer: this._alt,\n      inactiveBuffer: this._normal\n    });\n  }\n\n  /**\n   * Resizes both normal and alt buffers, adjusting their data accordingly.\n   * @param newCols The new number of columns.\n   * @param newRows The new number of rows.\n   */\n  public resize(newCols: number, newRows: number): void {\n    this._normal.resize(newCols, newRows);\n    this._alt.resize(newCols, newRows);\n    this.setupTabStops(newCols);\n  }\n\n  /**\n   * Setup the tab stops.\n   * @param i The index to start setting up tab stops from.\n   */\n  public setupTabStops(i?: number): void {\n    this._normal.setupTabStops(i);\n    this._alt.setupTabStops(i);\n  }\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { CharData, ICellData, IExtendedAttrs } from 'common/Types';\nimport { stringFromCodePoint } from 'common/input/TextDecoder';\nimport { CHAR_DATA_CHAR_INDEX, CHAR_DATA_WIDTH_INDEX, CHAR_DATA_ATTR_INDEX, Content } from 'common/buffer/Constants';\nimport { AttributeData, ExtendedAttrs } from 'common/buffer/AttributeData';\n\n/**\n * CellData - represents a single Cell in the terminal buffer.\n */\nexport class CellData extends AttributeData implements ICellData {\n  /** Helper to create CellData from CharData. */\n  public static fromCharData(value: CharData): CellData {\n    const obj = new CellData();\n    obj.setFromCharData(value);\n    return obj;\n  }\n  /** Primitives from terminal buffer. */\n  public content = 0;\n  public fg = 0;\n  public bg = 0;\n  public extended: IExtendedAttrs = new ExtendedAttrs();\n  public combinedData = '';\n  /** Whether cell contains a combined string. */\n  public isCombined(): number {\n    return this.content & Content.IS_COMBINED_MASK;\n  }\n  /** Width of the cell. */\n  public getWidth(): number {\n    return this.content >> Content.WIDTH_SHIFT;\n  }\n  /** JS string of the content. */\n  public getChars(): string {\n    if (this.content & Content.IS_COMBINED_MASK) {\n      return this.combinedData;\n    }\n    if (this.content & Content.CODEPOINT_MASK) {\n      return stringFromCodePoint(this.content & Content.CODEPOINT_MASK);\n    }\n    return '';\n  }\n  /**\n   * Codepoint of cell\n   * Note this returns the UTF32 codepoint of single chars,\n   * if content is a combined string it returns the codepoint\n   * of the last char in string to be in line with code in CharData.\n   */\n  public getCode(): number {\n    return (this.isCombined())\n      ? this.combinedData.charCodeAt(this.combinedData.length - 1)\n      : this.content & Content.CODEPOINT_MASK;\n  }\n  /** Set data from CharData */\n  public setFromCharData(value: CharData): void {\n    this.fg = value[CHAR_DATA_ATTR_INDEX];\n    this.bg = 0;\n    let combined = false;\n    // surrogates and combined strings need special treatment\n    if (value[CHAR_DATA_CHAR_INDEX].length > 2) {\n      combined = true;\n    }\n    else if (value[CHAR_DATA_CHAR_INDEX].length === 2) {\n      const code = value[CHAR_DATA_CHAR_INDEX].charCodeAt(0);\n      // if the 2-char string is a surrogate create single codepoint\n      // everything else is combined\n      if (0xD800 <= code && code <= 0xDBFF) {\n        const second = value[CHAR_DATA_CHAR_INDEX].charCodeAt(1);\n        if (0xDC00 <= second && second <= 0xDFFF) {\n          this.content = ((code - 0xD800) * 0x400 + second - 0xDC00 + 0x10000) | (value[CHAR_DATA_WIDTH_INDEX] << Content.WIDTH_SHIFT);\n        }\n        else {\n          combined = true;\n        }\n      }\n      else {\n        combined = true;\n      }\n    }\n    else {\n      this.content = value[CHAR_DATA_CHAR_INDEX].charCodeAt(0) | (value[CHAR_DATA_WIDTH_INDEX] << Content.WIDTH_SHIFT);\n    }\n    if (combined) {\n      this.combinedData = value[CHAR_DATA_CHAR_INDEX];\n      this.content = Content.IS_COMBINED_MASK | (value[CHAR_DATA_WIDTH_INDEX] << Content.WIDTH_SHIFT);\n    }\n  }\n  /** Get data as CharData. */\n  public getAsCharData(): CharData {\n    return [this.fg, this.getChars(), this.getWidth(), this.getCode()];\n  }\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nexport const DEFAULT_COLOR = 0;\nexport const DEFAULT_ATTR = (0 << 18) | (DEFAULT_COLOR << 9) | (256 << 0);\nexport const DEFAULT_EXT = 0;\n\nexport const CHAR_DATA_ATTR_INDEX = 0;\nexport const CHAR_DATA_CHAR_INDEX = 1;\nexport const CHAR_DATA_WIDTH_INDEX = 2;\nexport const CHAR_DATA_CODE_INDEX = 3;\n\n/**\n * Null cell - a real empty cell (containing nothing).\n * Note that code should always be 0 for a null cell as\n * several test condition of the buffer line rely on this.\n */\nexport const NULL_CELL_CHAR = '';\nexport const NULL_CELL_WIDTH = 1;\nexport const NULL_CELL_CODE = 0;\n\n/**\n * Whitespace cell.\n * This is meant as a replacement for empty cells when needed\n * during rendering lines to preserve correct aligment.\n */\nexport const WHITESPACE_CELL_CHAR = ' ';\nexport const WHITESPACE_CELL_WIDTH = 1;\nexport const WHITESPACE_CELL_CODE = 32;\n\n/**\n * Bitmasks for accessing data in `content`.\n */\nexport const enum Content {\n  /**\n   * bit 1..21    codepoint, max allowed in UTF32 is 0x10FFFF (21 bits taken)\n   *              read:   `codepoint = content & Content.codepointMask;`\n   *              write:  `content |= codepoint & Content.codepointMask;`\n   *                      shortcut if precondition `codepoint <= 0x10FFFF` is met:\n   *                      `content |= codepoint;`\n   */\n  CODEPOINT_MASK = 0x1FFFFF,\n\n  /**\n   * bit 22       flag indication whether a cell contains combined content\n   *              read:   `isCombined = content & Content.isCombined;`\n   *              set:    `content |= Content.isCombined;`\n   *              clear:  `content &= ~Content.isCombined;`\n   */\n  IS_COMBINED_MASK = 0x200000,  // 1 << 21\n\n  /**\n   * bit 1..22    mask to check whether a cell contains any string data\n   *              we need to check for codepoint and isCombined bits to see\n   *              whether a cell contains anything\n   *              read:   `isEmpty = !(content & Content.hasContent)`\n   */\n  HAS_CONTENT_MASK = 0x3FFFFF,\n\n  /**\n   * bit 23..24   wcwidth value of cell, takes 2 bits (ranges from 0..2)\n   *              read:   `width = (content & Content.widthMask) >> Content.widthShift;`\n   *                      `hasWidth = content & Content.widthMask;`\n   *                      as long as wcwidth is highest value in `content`:\n   *                      `width = content >> Content.widthShift;`\n   *              write:  `content |= (width << Content.widthShift) & Content.widthMask;`\n   *                      shortcut if precondition `0 <= width <= 3` is met:\n   *                      `content |= width << Content.widthShift;`\n   */\n  WIDTH_MASK = 0xC00000,   // 3 << 22\n  WIDTH_SHIFT = 22\n}\n\nexport const enum Attributes {\n  /**\n   * bit 1..8     blue in RGB, color in P256 and P16\n   */\n  BLUE_MASK = 0xFF,\n  BLUE_SHIFT = 0,\n  PCOLOR_MASK = 0xFF,\n  PCOLOR_SHIFT = 0,\n\n  /**\n   * bit 9..16    green in RGB\n   */\n  GREEN_MASK = 0xFF00,\n  GREEN_SHIFT = 8,\n\n  /**\n   * bit 17..24   red in RGB\n   */\n  RED_MASK = 0xFF0000,\n  RED_SHIFT = 16,\n\n  /**\n   * bit 25..26   color mode: DEFAULT (0) | P16 (1) | P256 (2) | RGB (3)\n   */\n  CM_MASK = 0x3000000,\n  CM_DEFAULT = 0,\n  CM_P16 = 0x1000000,\n  CM_P256 = 0x2000000,\n  CM_RGB = 0x3000000,\n\n  /**\n   * bit 1..24  RGB room\n   */\n  RGB_MASK = 0xFFFFFF\n}\n\nexport const enum FgFlags {\n  /**\n   * bit 27..32\n   */\n  INVERSE = 0x4000000,\n  BOLD = 0x8000000,\n  UNDERLINE = 0x10000000,\n  BLINK = 0x20000000,\n  INVISIBLE = 0x40000000,\n  STRIKETHROUGH = 0x80000000,\n}\n\nexport const enum BgFlags {\n  /**\n   * bit 27..32 (upper 2 unused)\n   */\n  ITALIC = 0x4000000,\n  DIM = 0x8000000,\n  HAS_EXTENDED = 0x10000000,\n  PROTECTED = 0x20000000\n}\n\nexport const enum ExtFlags {\n  /**\n   * bit 27..32 (upper 3 unused)\n   */\n  UNDERLINE_STYLE = 0x1C000000\n}\n\nexport const enum UnderlineStyle {\n  NONE = 0,\n  SINGLE = 1,\n  DOUBLE = 2,\n  CURLY = 3,\n  DOTTED = 4,\n  DASHED = 5\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { EventEmitter } from 'common/EventEmitter';\nimport { disposeArray } from 'common/Lifecycle';\nimport { IDisposable, IMarker } from 'common/Types';\n\nexport class Marker implements IMarker {\n  private static _nextId = 1;\n\n  public isDisposed: boolean = false;\n  private _disposables: IDisposable[] = [];\n\n  private _id: number = Marker._nextId++;\n  public get id(): number { return this._id; }\n\n  private readonly _onDispose = this.register(new EventEmitter<void>());\n  public readonly onDispose = this._onDispose.event;\n\n  constructor(\n    public line: number\n  ) {\n  }\n\n  public dispose(): void {\n    if (this.isDisposed) {\n      return;\n    }\n    this.isDisposed = true;\n    this.line = -1;\n    // Emit before super.dispose such that dispose listeners get a change to react\n    this._onDispose.fire();\n    disposeArray(this._disposables);\n    this._disposables.length = 0;\n  }\n\n  public register<T extends IDisposable>(disposable: T): T {\n    this._disposables.push(disposable);\n    return disposable;\n  }\n}\n","/**\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICharset } from 'common/Types';\n\n/**\n * The character sets supported by the terminal. These enable several languages\n * to be represented within the terminal with only 8-bit encoding. See ISO 2022\n * for a discussion on character sets. Only VT100 character sets are supported.\n */\nexport const CHARSETS: { [key: string]: ICharset | undefined } = {};\n\n/**\n * The default character set, US.\n */\nexport const DEFAULT_CHARSET: ICharset | undefined = CHARSETS['B'];\n\n/**\n * DEC Special Character and Line Drawing Set.\n * Reference: http://vt100.net/docs/vt102-ug/table5-13.html\n * A lot of curses apps use this if they see TERM=xterm.\n * testing: echo -e '\\e(0a\\e(B'\n * The xterm output sometimes seems to conflict with the\n * reference above. xterm seems in line with the reference\n * when running vttest however.\n * The table below now uses xterm's output from vttest.\n */\nCHARSETS['0'] = {\n  '`': '\\u25c6', // '◆'\n  'a': '\\u2592', // '▒'\n  'b': '\\u2409', // '␉' (HT)\n  'c': '\\u240c', // '␌' (FF)\n  'd': '\\u240d', // '␍' (CR)\n  'e': '\\u240a', // '␊' (LF)\n  'f': '\\u00b0', // '°'\n  'g': '\\u00b1', // '±'\n  'h': '\\u2424', // '␤' (NL)\n  'i': '\\u240b', // '␋' (VT)\n  'j': '\\u2518', // '┘'\n  'k': '\\u2510', // '┐'\n  'l': '\\u250c', // '┌'\n  'm': '\\u2514', // '└'\n  'n': '\\u253c', // '┼'\n  'o': '\\u23ba', // '⎺'\n  'p': '\\u23bb', // '⎻'\n  'q': '\\u2500', // '─'\n  'r': '\\u23bc', // '⎼'\n  's': '\\u23bd', // '⎽'\n  't': '\\u251c', // '├'\n  'u': '\\u2524', // '┤'\n  'v': '\\u2534', // '┴'\n  'w': '\\u252c', // '┬'\n  'x': '\\u2502', // '│'\n  'y': '\\u2264', // '≤'\n  'z': '\\u2265', // '≥'\n  '{': '\\u03c0', // 'π'\n  '|': '\\u2260', // '≠'\n  '}': '\\u00a3', // '£'\n  '~': '\\u00b7'  // '·'\n};\n\n/**\n * British character set\n * ESC (A\n * Reference: http://vt100.net/docs/vt220-rm/table2-5.html\n */\nCHARSETS['A'] = {\n  '#': '£'\n};\n\n/**\n * United States character set\n * ESC (B\n */\nCHARSETS['B'] = undefined;\n\n/**\n * Dutch character set\n * ESC (4\n * Reference: http://vt100.net/docs/vt220-rm/table2-6.html\n */\nCHARSETS['4'] = {\n  '#': '£',\n  '@': '¾',\n  '[': 'ij',\n  '\\\\': '½',\n  ']': '|',\n  '{': '¨',\n  '|': 'f',\n  '}': '¼',\n  '~': '´'\n};\n\n/**\n * Finnish character set\n * ESC (C or ESC (5\n * Reference: http://vt100.net/docs/vt220-rm/table2-7.html\n */\nCHARSETS['C'] =\nCHARSETS['5'] = {\n  '[': 'Ä',\n  '\\\\': 'Ö',\n  ']': 'Å',\n  '^': 'Ü',\n  '`': 'é',\n  '{': 'ä',\n  '|': 'ö',\n  '}': 'å',\n  '~': 'ü'\n};\n\n/**\n * French character set\n * ESC (R\n * Reference: http://vt100.net/docs/vt220-rm/table2-8.html\n */\nCHARSETS['R'] = {\n  '#': '£',\n  '@': 'à',\n  '[': '°',\n  '\\\\': 'ç',\n  ']': '§',\n  '{': 'é',\n  '|': 'ù',\n  '}': 'è',\n  '~': '¨'\n};\n\n/**\n * French Canadian character set\n * ESC (Q\n * Reference: http://vt100.net/docs/vt220-rm/table2-9.html\n */\nCHARSETS['Q'] = {\n  '@': 'à',\n  '[': 'â',\n  '\\\\': 'ç',\n  ']': 'ê',\n  '^': 'î',\n  '`': 'ô',\n  '{': 'é',\n  '|': 'ù',\n  '}': 'è',\n  '~': 'û'\n};\n\n/**\n * German character set\n * ESC (K\n * Reference: http://vt100.net/docs/vt220-rm/table2-10.html\n */\nCHARSETS['K'] = {\n  '@': '§',\n  '[': 'Ä',\n  '\\\\': 'Ö',\n  ']': 'Ü',\n  '{': 'ä',\n  '|': 'ö',\n  '}': 'ü',\n  '~': 'ß'\n};\n\n/**\n * Italian character set\n * ESC (Y\n * Reference: http://vt100.net/docs/vt220-rm/table2-11.html\n */\nCHARSETS['Y'] = {\n  '#': '£',\n  '@': '§',\n  '[': '°',\n  '\\\\': 'ç',\n  ']': 'é',\n  '`': 'ù',\n  '{': 'à',\n  '|': 'ò',\n  '}': 'è',\n  '~': 'ì'\n};\n\n/**\n * Norwegian/Danish character set\n * ESC (E or ESC (6\n * Reference: http://vt100.net/docs/vt220-rm/table2-12.html\n */\nCHARSETS['E'] =\nCHARSETS['6'] = {\n  '@': 'Ä',\n  '[': 'Æ',\n  '\\\\': 'Ø',\n  ']': 'Å',\n  '^': 'Ü',\n  '`': 'ä',\n  '{': 'æ',\n  '|': 'ø',\n  '}': 'å',\n  '~': 'ü'\n};\n\n/**\n * Spanish character set\n * ESC (Z\n * Reference: http://vt100.net/docs/vt220-rm/table2-13.html\n */\nCHARSETS['Z'] = {\n  '#': '£',\n  '@': '§',\n  '[': '¡',\n  '\\\\': 'Ñ',\n  ']': '¿',\n  '{': '°',\n  '|': 'ñ',\n  '}': 'ç'\n};\n\n/**\n * Swedish character set\n * ESC (H or ESC (7\n * Reference: http://vt100.net/docs/vt220-rm/table2-14.html\n */\nCHARSETS['H'] =\nCHARSETS['7'] = {\n  '@': 'É',\n  '[': 'Ä',\n  '\\\\': 'Ö',\n  ']': 'Å',\n  '^': 'Ü',\n  '`': 'é',\n  '{': 'ä',\n  '|': 'ö',\n  '}': 'å',\n  '~': 'ü'\n};\n\n/**\n * Swiss character set\n * ESC (=\n * Reference: http://vt100.net/docs/vt220-rm/table2-15.html\n */\nCHARSETS['='] = {\n  '#': 'ù',\n  '@': 'à',\n  '[': 'é',\n  '\\\\': 'ç',\n  ']': 'ê',\n  '^': 'î',\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  '_': 'è',\n  '`': 'ô',\n  '{': 'ä',\n  '|': 'ö',\n  '}': 'ü',\n  '~': 'û'\n};\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\n/**\n * C0 control codes\n * See = https://en.wikipedia.org/wiki/C0_and_C1_control_codes\n */\nexport namespace C0 {\n  /** Null (Caret = ^@, C = \\0) */\n  export const NUL = '\\x00';\n  /** Start of Heading (Caret = ^A) */\n  export const SOH = '\\x01';\n  /** Start of Text (Caret = ^B) */\n  export const STX = '\\x02';\n  /** End of Text (Caret = ^C) */\n  export const ETX = '\\x03';\n  /** End of Transmission (Caret = ^D) */\n  export const EOT = '\\x04';\n  /** Enquiry (Caret = ^E) */\n  export const ENQ = '\\x05';\n  /** Acknowledge (Caret = ^F) */\n  export const ACK = '\\x06';\n  /** Bell (Caret = ^G, C = \\a) */\n  export const BEL = '\\x07';\n  /** Backspace (Caret = ^H, C = \\b) */\n  export const BS  = '\\x08';\n  /** Character Tabulation, Horizontal Tabulation (Caret = ^I, C = \\t) */\n  export const HT  = '\\x09';\n  /** Line Feed (Caret = ^J, C = \\n) */\n  export const LF  = '\\x0a';\n  /** Line Tabulation, Vertical Tabulation (Caret = ^K, C = \\v) */\n  export const VT  = '\\x0b';\n  /** Form Feed (Caret = ^L, C = \\f) */\n  export const FF  = '\\x0c';\n  /** Carriage Return (Caret = ^M, C = \\r) */\n  export const CR  = '\\x0d';\n  /** Shift Out (Caret = ^N) */\n  export const SO  = '\\x0e';\n  /** Shift In (Caret = ^O) */\n  export const SI  = '\\x0f';\n  /** Data Link Escape (Caret = ^P) */\n  export const DLE = '\\x10';\n  /** Device Control One (XON) (Caret = ^Q) */\n  export const DC1 = '\\x11';\n  /** Device Control Two (Caret = ^R) */\n  export const DC2 = '\\x12';\n  /** Device Control Three (XOFF) (Caret = ^S) */\n  export const DC3 = '\\x13';\n  /** Device Control Four (Caret = ^T) */\n  export const DC4 = '\\x14';\n  /** Negative Acknowledge (Caret = ^U) */\n  export const NAK = '\\x15';\n  /** Synchronous Idle (Caret = ^V) */\n  export const SYN = '\\x16';\n  /** End of Transmission Block (Caret = ^W) */\n  export const ETB = '\\x17';\n  /** Cancel (Caret = ^X) */\n  export const CAN = '\\x18';\n  /** End of Medium (Caret = ^Y) */\n  export const EM  = '\\x19';\n  /** Substitute (Caret = ^Z) */\n  export const SUB = '\\x1a';\n  /** Escape (Caret = ^[, C = \\e) */\n  export const ESC = '\\x1b';\n  /** File Separator (Caret = ^\\) */\n  export const FS  = '\\x1c';\n  /** Group Separator (Caret = ^]) */\n  export const GS  = '\\x1d';\n  /** Record Separator (Caret = ^^) */\n  export const RS  = '\\x1e';\n  /** Unit Separator (Caret = ^_) */\n  export const US  = '\\x1f';\n  /** Space */\n  export const SP  = '\\x20';\n  /** Delete (Caret = ^?) */\n  export const DEL = '\\x7f';\n}\n\n/**\n * C1 control codes\n * See = https://en.wikipedia.org/wiki/C0_and_C1_control_codes\n */\nexport namespace C1 {\n  /** padding character */\n  export const PAD = '\\x80';\n  /** High Octet Preset */\n  export const HOP = '\\x81';\n  /** Break Permitted Here */\n  export const BPH = '\\x82';\n  /** No Break Here */\n  export const NBH = '\\x83';\n  /** Index */\n  export const IND = '\\x84';\n  /** Next Line */\n  export const NEL = '\\x85';\n  /** Start of Selected Area */\n  export const SSA = '\\x86';\n  /** End of Selected Area */\n  export const ESA = '\\x87';\n  /** Horizontal Tabulation Set */\n  export const HTS = '\\x88';\n  /** Horizontal Tabulation With Justification */\n  export const HTJ = '\\x89';\n  /** Vertical Tabulation Set */\n  export const VTS = '\\x8a';\n  /** Partial Line Down */\n  export const PLD = '\\x8b';\n  /** Partial Line Up */\n  export const PLU = '\\x8c';\n  /** Reverse Index */\n  export const RI = '\\x8d';\n  /** Single-Shift 2 */\n  export const SS2 = '\\x8e';\n  /** Single-Shift 3 */\n  export const SS3 = '\\x8f';\n  /** Device Control String */\n  export const DCS = '\\x90';\n  /** Private Use 1 */\n  export const PU1 = '\\x91';\n  /** Private Use 2 */\n  export const PU2 = '\\x92';\n  /** Set Transmit State */\n  export const STS = '\\x93';\n  /** Destructive backspace, intended to eliminate ambiguity about meaning of BS. */\n  export const CCH = '\\x94';\n  /** Message Waiting */\n  export const MW = '\\x95';\n  /** Start of Protected Area */\n  export const SPA = '\\x96';\n  /** End of Protected Area */\n  export const EPA = '\\x97';\n  /** Start of String */\n  export const SOS = '\\x98';\n  /** Single Graphic Character Introducer */\n  export const SGCI = '\\x99';\n  /** Single Character Introducer */\n  export const SCI = '\\x9a';\n  /** Control Sequence Introducer */\n  export const CSI = '\\x9b';\n  /** String Terminator */\n  export const ST = '\\x9c';\n  /** Operating System Command */\n  export const OSC = '\\x9d';\n  /** Privacy Message */\n  export const PM = '\\x9e';\n  /** Application Program Command */\n  export const APC = '\\x9f';\n}\nexport namespace C1_ESCAPED {\n  export const ST = `${C0.ESC}\\\\`;\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\n/**\n * Polyfill - Convert UTF32 codepoint into JS string.\n * Note: The built-in String.fromCodePoint happens to be much slower\n *       due to additional sanity checks. We can avoid them since\n *       we always operate on legal UTF32 (granted by the input decoders)\n *       and use this faster version instead.\n */\nexport function stringFromCodePoint(codePoint: number): string {\n  if (codePoint > 0xFFFF) {\n    codePoint -= 0x10000;\n    return String.fromCharCode((codePoint >> 10) + 0xD800) + String.fromCharCode((codePoint % 0x400) + 0xDC00);\n  }\n  return String.fromCharCode(codePoint);\n}\n\n/**\n * Convert UTF32 char codes into JS string.\n * Basically the same as `stringFromCodePoint` but for multiple codepoints\n * in a loop (which is a lot faster).\n */\nexport function utf32ToString(data: Uint32Array, start: number = 0, end: number = data.length): string {\n  let result = '';\n  for (let i = start; i < end; ++i) {\n    let codepoint = data[i];\n    if (codepoint > 0xFFFF) {\n      // JS strings are encoded as UTF16, thus a non BMP codepoint gets converted into a surrogate pair\n      // conversion rules:\n      //  - subtract 0x10000 from code point, leaving a 20 bit number\n      //  - add high 10 bits to 0xD800  --> first surrogate\n      //  - add low 10 bits to 0xDC00   --> second surrogate\n      codepoint -= 0x10000;\n      result += String.fromCharCode((codepoint >> 10) + 0xD800) + String.fromCharCode((codepoint % 0x400) + 0xDC00);\n    } else {\n      result += String.fromCharCode(codepoint);\n    }\n  }\n  return result;\n}\n\n/**\n * StringToUtf32 - decodes UTF16 sequences into UTF32 codepoints.\n * To keep the decoder in line with JS strings it handles single surrogates as UCS2.\n */\nexport class StringToUtf32 {\n  private _interim: number = 0;\n\n  /**\n   * Clears interim and resets decoder to clean state.\n   */\n  public clear(): void {\n    this._interim = 0;\n  }\n\n  /**\n   * Decode JS string to UTF32 codepoints.\n   * The methods assumes stream input and will store partly transmitted\n   * surrogate pairs and decode them with the next data chunk.\n   * Note: The method does no bound checks for target, therefore make sure\n   * the provided input data does not exceed the size of `target`.\n   * Returns the number of written codepoints in `target`.\n   */\n  public decode(input: string, target: Uint32Array): number {\n    const length = input.length;\n\n    if (!length) {\n      return 0;\n    }\n\n    let size = 0;\n    let startPos = 0;\n\n    // handle leftover surrogate high\n    if (this._interim) {\n      const second = input.charCodeAt(startPos++);\n      if (0xDC00 <= second && second <= 0xDFFF) {\n        target[size++] = (this._interim - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n      } else {\n        // illegal codepoint (USC2 handling)\n        target[size++] = this._interim;\n        target[size++] = second;\n      }\n      this._interim = 0;\n    }\n\n    for (let i = startPos; i < length; ++i) {\n      const code = input.charCodeAt(i);\n      // surrogate pair first\n      if (0xD800 <= code && code <= 0xDBFF) {\n        if (++i >= length) {\n          this._interim = code;\n          return size;\n        }\n        const second = input.charCodeAt(i);\n        if (0xDC00 <= second && second <= 0xDFFF) {\n          target[size++] = (code - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n        } else {\n          // illegal codepoint (USC2 handling)\n          target[size++] = code;\n          target[size++] = second;\n        }\n        continue;\n      }\n      if (code === 0xFEFF) {\n        // BOM\n        continue;\n      }\n      target[size++] = code;\n    }\n    return size;\n  }\n}\n\n/**\n * Utf8Decoder - decodes UTF8 byte sequences into UTF32 codepoints.\n */\nexport class Utf8ToUtf32 {\n  public interim: Uint8Array = new Uint8Array(3);\n\n  /**\n   * Clears interim bytes and resets decoder to clean state.\n   */\n  public clear(): void {\n    this.interim.fill(0);\n  }\n\n  /**\n   * Decodes UTF8 byte sequences in `input` to UTF32 codepoints in `target`.\n   * The methods assumes stream input and will store partly transmitted bytes\n   * and decode them with the next data chunk.\n   * Note: The method does no bound checks for target, therefore make sure\n   * the provided data chunk does not exceed the size of `target`.\n   * Returns the number of written codepoints in `target`.\n   */\n  public decode(input: Uint8Array, target: Uint32Array): number {\n    const length = input.length;\n\n    if (!length) {\n      return 0;\n    }\n\n    let size = 0;\n    let byte1: number;\n    let byte2: number;\n    let byte3: number;\n    let byte4: number;\n    let codepoint = 0;\n    let startPos = 0;\n\n    // handle leftover bytes\n    if (this.interim[0]) {\n      let discardInterim = false;\n      let cp = this.interim[0];\n      cp &= ((((cp & 0xE0) === 0xC0)) ? 0x1F : (((cp & 0xF0) === 0xE0)) ? 0x0F : 0x07);\n      let pos = 0;\n      let tmp: number;\n      while ((tmp = this.interim[++pos] & 0x3F) && pos < 4) {\n        cp <<= 6;\n        cp |= tmp;\n      }\n      // missing bytes - read ahead from input\n      const type = (((this.interim[0] & 0xE0) === 0xC0)) ? 2 : (((this.interim[0] & 0xF0) === 0xE0)) ? 3 : 4;\n      const missing = type - pos;\n      while (startPos < missing) {\n        if (startPos >= length) {\n          return 0;\n        }\n        tmp = input[startPos++];\n        if ((tmp & 0xC0) !== 0x80) {\n          // wrong continuation, discard interim bytes completely\n          startPos--;\n          discardInterim = true;\n          break;\n        } else {\n          // need to save so we can continue short inputs in next call\n          this.interim[pos++] = tmp;\n          cp <<= 6;\n          cp |= tmp & 0x3F;\n        }\n      }\n      if (!discardInterim) {\n        // final test is type dependent\n        if (type === 2) {\n          if (cp < 0x80) {\n            // wrong starter byte\n            startPos--;\n          } else {\n            target[size++] = cp;\n          }\n        } else if (type === 3) {\n          if (cp < 0x0800 || (cp >= 0xD800 && cp <= 0xDFFF) || cp === 0xFEFF) {\n            // illegal codepoint or BOM\n          } else {\n            target[size++] = cp;\n          }\n        } else {\n          if (cp < 0x010000 || cp > 0x10FFFF) {\n            // illegal codepoint\n          } else {\n            target[size++] = cp;\n          }\n        }\n      }\n      this.interim.fill(0);\n    }\n\n    // loop through input\n    const fourStop = length - 4;\n    let i = startPos;\n    while (i < length) {\n      /**\n       * ASCII shortcut with loop unrolled to 4 consecutive ASCII chars.\n       * This is a compromise between speed gain for ASCII\n       * and penalty for non ASCII:\n       * For best ASCII performance the char should be stored directly into target,\n       * but even a single attempt to write to target and compare afterwards\n       * penalizes non ASCII really bad (-50%), thus we load the char into byteX first,\n       * which reduces ASCII performance by ~15%.\n       * This trial for ASCII reduces non ASCII performance by ~10% which seems acceptible\n       * compared to the gains.\n       * Note that this optimization only takes place for 4 consecutive ASCII chars,\n       * for any shorter it bails out. Worst case - all 4 bytes being read but\n       * thrown away due to the last being a non ASCII char (-10% performance).\n       */\n      while (i < fourStop\n        && !((byte1 = input[i]) & 0x80)\n        && !((byte2 = input[i + 1]) & 0x80)\n        && !((byte3 = input[i + 2]) & 0x80)\n        && !((byte4 = input[i + 3]) & 0x80))\n      {\n        target[size++] = byte1;\n        target[size++] = byte2;\n        target[size++] = byte3;\n        target[size++] = byte4;\n        i += 4;\n      }\n\n      // reread byte1\n      byte1 = input[i++];\n\n      // 1 byte\n      if (byte1 < 0x80) {\n        target[size++] = byte1;\n\n        // 2 bytes\n      } else if ((byte1 & 0xE0) === 0xC0) {\n        if (i >= length) {\n          this.interim[0] = byte1;\n          return size;\n        }\n        byte2 = input[i++];\n        if ((byte2 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        codepoint = (byte1 & 0x1F) << 6 | (byte2 & 0x3F);\n        if (codepoint < 0x80) {\n          // wrong starter byte\n          i--;\n          continue;\n        }\n        target[size++] = codepoint;\n\n        // 3 bytes\n      } else if ((byte1 & 0xF0) === 0xE0) {\n        if (i >= length) {\n          this.interim[0] = byte1;\n          return size;\n        }\n        byte2 = input[i++];\n        if ((byte2 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        if (i >= length) {\n          this.interim[0] = byte1;\n          this.interim[1] = byte2;\n          return size;\n        }\n        byte3 = input[i++];\n        if ((byte3 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        codepoint = (byte1 & 0x0F) << 12 | (byte2 & 0x3F) << 6 | (byte3 & 0x3F);\n        if (codepoint < 0x0800 || (codepoint >= 0xD800 && codepoint <= 0xDFFF) || codepoint === 0xFEFF) {\n          // illegal codepoint or BOM, no i-- here\n          continue;\n        }\n        target[size++] = codepoint;\n\n        // 4 bytes\n      } else if ((byte1 & 0xF8) === 0xF0) {\n        if (i >= length) {\n          this.interim[0] = byte1;\n          return size;\n        }\n        byte2 = input[i++];\n        if ((byte2 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        if (i >= length) {\n          this.interim[0] = byte1;\n          this.interim[1] = byte2;\n          return size;\n        }\n        byte3 = input[i++];\n        if ((byte3 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        if (i >= length) {\n          this.interim[0] = byte1;\n          this.interim[1] = byte2;\n          this.interim[2] = byte3;\n          return size;\n        }\n        byte4 = input[i++];\n        if ((byte4 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        codepoint = (byte1 & 0x07) << 18 | (byte2 & 0x3F) << 12 | (byte3 & 0x3F) << 6 | (byte4 & 0x3F);\n        if (codepoint < 0x010000 || codepoint > 0x10FFFF) {\n          // illegal codepoint, no i-- here\n          continue;\n        }\n        target[size++] = codepoint;\n      } else {\n        // illegal byte, just skip\n      }\n    }\n    return size;\n  }\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\nimport { IUnicodeVersionProvider } from 'common/services/Services';\n\ntype CharWidth = 0 | 1 | 2;\n\nconst BMP_COMBINING = [\n  [0x0300, 0x036F], [0x0483, 0x0486], [0x0488, 0x0489],\n  [0x0591, 0x05BD], [0x05BF, 0x05BF], [0x05C1, 0x05C2],\n  [0x05C4, 0x05C5], [0x05C7, 0x05C7], [0x0600, 0x0603],\n  [0x0610, 0x0615], [0x064B, 0x065E], [0x0670, 0x0670],\n  [0x06D6, 0x06E4], [0x06E7, 0x06E8], [0x06EA, 0x06ED],\n  [0x070F, 0x070F], [0x0711, 0x0711], [0x0730, 0x074A],\n  [0x07A6, 0x07B0], [0x07EB, 0x07F3], [0x0901, 0x0902],\n  [0x093C, 0x093C], [0x0941, 0x0948], [0x094D, 0x094D],\n  [0x0951, 0x0954], [0x0962, 0x0963], [0x0981, 0x0981],\n  [0x09BC, 0x09BC], [0x09C1, 0x09C4], [0x09CD, 0x09CD],\n  [0x09E2, 0x09E3], [0x0A01, 0x0A02], [0x0A3C, 0x0A3C],\n  [0x0A41, 0x0A42], [0x0A47, 0x0A48], [0x0A4B, 0x0A4D],\n  [0x0A70, 0x0A71], [0x0A81, 0x0A82], [0x0ABC, 0x0ABC],\n  [0x0AC1, 0x0AC5], [0x0AC7, 0x0AC8], [0x0ACD, 0x0ACD],\n  [0x0AE2, 0x0AE3], [0x0B01, 0x0B01], [0x0B3C, 0x0B3C],\n  [0x0B3F, 0x0B3F], [0x0B41, 0x0B43], [0x0B4D, 0x0B4D],\n  [0x0B56, 0x0B56], [0x0B82, 0x0B82], [0x0BC0, 0x0BC0],\n  [0x0BCD, 0x0BCD], [0x0C3E, 0x0C40], [0x0C46, 0x0C48],\n  [0x0C4A, 0x0C4D], [0x0C55, 0x0C56], [0x0CBC, 0x0CBC],\n  [0x0CBF, 0x0CBF], [0x0CC6, 0x0CC6], [0x0CCC, 0x0CCD],\n  [0x0CE2, 0x0CE3], [0x0D41, 0x0D43], [0x0D4D, 0x0D4D],\n  [0x0DCA, 0x0DCA], [0x0DD2, 0x0DD4], [0x0DD6, 0x0DD6],\n  [0x0E31, 0x0E31], [0x0E34, 0x0E3A], [0x0E47, 0x0E4E],\n  [0x0EB1, 0x0EB1], [0x0EB4, 0x0EB9], [0x0EBB, 0x0EBC],\n  [0x0EC8, 0x0ECD], [0x0F18, 0x0F19], [0x0F35, 0x0F35],\n  [0x0F37, 0x0F37], [0x0F39, 0x0F39], [0x0F71, 0x0F7E],\n  [0x0F80, 0x0F84], [0x0F86, 0x0F87], [0x0F90, 0x0F97],\n  [0x0F99, 0x0FBC], [0x0FC6, 0x0FC6], [0x102D, 0x1030],\n  [0x1032, 0x1032], [0x1036, 0x1037], [0x1039, 0x1039],\n  [0x1058, 0x1059], [0x1160, 0x11FF], [0x135F, 0x135F],\n  [0x1712, 0x1714], [0x1732, 0x1734], [0x1752, 0x1753],\n  [0x1772, 0x1773], [0x17B4, 0x17B5], [0x17B7, 0x17BD],\n  [0x17C6, 0x17C6], [0x17C9, 0x17D3], [0x17DD, 0x17DD],\n  [0x180B, 0x180D], [0x18A9, 0x18A9], [0x1920, 0x1922],\n  [0x1927, 0x1928], [0x1932, 0x1932], [0x1939, 0x193B],\n  [0x1A17, 0x1A18], [0x1B00, 0x1B03], [0x1B34, 0x1B34],\n  [0x1B36, 0x1B3A], [0x1B3C, 0x1B3C], [0x1B42, 0x1B42],\n  [0x1B6B, 0x1B73], [0x1DC0, 0x1DCA], [0x1DFE, 0x1DFF],\n  [0x200B, 0x200F], [0x202A, 0x202E], [0x2060, 0x2063],\n  [0x206A, 0x206F], [0x20D0, 0x20EF], [0x302A, 0x302F],\n  [0x3099, 0x309A], [0xA806, 0xA806], [0xA80B, 0xA80B],\n  [0xA825, 0xA826], [0xFB1E, 0xFB1E], [0xFE00, 0xFE0F],\n  [0xFE20, 0xFE23], [0xFEFF, 0xFEFF], [0xFFF9, 0xFFFB]\n];\nconst HIGH_COMBINING = [\n  [0x10A01, 0x10A03], [0x10A05, 0x10A06], [0x10A0C, 0x10A0F],\n  [0x10A38, 0x10A3A], [0x10A3F, 0x10A3F], [0x1D167, 0x1D169],\n  [0x1D173, 0x1D182], [0x1D185, 0x1D18B], [0x1D1AA, 0x1D1AD],\n  [0x1D242, 0x1D244], [0xE0001, 0xE0001], [0xE0020, 0xE007F],\n  [0xE0100, 0xE01EF]\n];\n\n// BMP lookup table, lazy initialized during first addon loading\nlet table: Uint8Array;\n\nfunction bisearch(ucs: number, data: number[][]): boolean {\n  let min = 0;\n  let max = data.length - 1;\n  let mid;\n  if (ucs < data[0][0] || ucs > data[max][1]) {\n    return false;\n  }\n  while (max >= min) {\n    mid = (min + max) >> 1;\n    if (ucs > data[mid][1]) {\n      min = mid + 1;\n    } else if (ucs < data[mid][0]) {\n      max = mid - 1;\n    } else {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport class UnicodeV6 implements IUnicodeVersionProvider {\n  public readonly version = '6';\n\n  constructor() {\n    // init lookup table once\n    if (!table) {\n      table = new Uint8Array(65536);\n      table.fill(1);\n      table[0] = 0;\n      // control chars\n      table.fill(0, 1, 32);\n      table.fill(0, 0x7f, 0xa0);\n\n      // apply wide char rules first\n      // wide chars\n      table.fill(2, 0x1100, 0x1160);\n      table[0x2329] = 2;\n      table[0x232a] = 2;\n      table.fill(2, 0x2e80, 0xa4d0);\n      table[0x303f] = 1;  // wrongly in last line\n\n      table.fill(2, 0xac00, 0xd7a4);\n      table.fill(2, 0xf900, 0xfb00);\n      table.fill(2, 0xfe10, 0xfe1a);\n      table.fill(2, 0xfe30, 0xfe70);\n      table.fill(2, 0xff00, 0xff61);\n      table.fill(2, 0xffe0, 0xffe7);\n\n      // apply combining last to ensure we overwrite\n      // wrongly wide set chars:\n      //    the original algo evals combining first and falls\n      //    through to wide check so we simply do here the opposite\n      // combining 0\n      for (let r = 0; r < BMP_COMBINING.length; ++r) {\n        table.fill(0, BMP_COMBINING[r][0], BMP_COMBINING[r][1] + 1);\n      }\n    }\n  }\n\n  public wcwidth(num: number): CharWidth {\n    if (num < 32) return 0;\n    if (num < 127) return 1;\n    if (num < 65536) return table[num] as CharWidth;\n    if (bisearch(num, HIGH_COMBINING)) return 0;\n    if ((num >= 0x20000 && num <= 0x2fffd) || (num >= 0x30000 && num <= 0x3fffd)) return 2;\n    return 1;\n  }\n}\n","\n/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { EventEmitter, IEvent } from 'common/EventEmitter';\nimport { Disposable } from 'common/Lifecycle';\n\ndeclare const setTimeout: (handler: () => void, timeout?: number) => void;\n\n/**\n * Safety watermark to avoid memory exhaustion and browser engine crash on fast data input.\n * Enable flow control to avoid this limit and make sure that your backend correctly\n * propagates this to the underlying pty. (see docs for further instructions)\n * Since this limit is meant as a safety parachute to prevent browser crashs,\n * it is set to a very high number. Typically xterm.js gets unresponsive with\n * a 100 times lower number (>500 kB).\n */\nconst DISCARD_WATERMARK = 50000000; // ~50 MB\n\n/**\n * The max number of ms to spend on writes before allowing the renderer to\n * catch up with a 0ms setTimeout. A value of < 33 to keep us close to\n * 30fps, and a value of < 16 to try to run at 60fps. Of course, the real FPS\n * depends on the time it takes for the renderer to draw the frame.\n */\nconst WRITE_TIMEOUT_MS = 12;\n\n/**\n * Threshold of max held chunks in the write buffer, that were already processed.\n * This is a tradeoff between extensive write buffer shifts (bad runtime) and high\n * memory consumption by data thats not used anymore.\n */\nconst WRITE_BUFFER_LENGTH_THRESHOLD = 50;\n\nexport class WriteBuffer extends Disposable {\n  private _writeBuffer: (string | Uint8Array)[] = [];\n  private _callbacks: ((() => void) | undefined)[] = [];\n  private _pendingData = 0;\n  private _bufferOffset = 0;\n  private _isSyncWriting = false;\n  private _syncCalls = 0;\n  private _didUserInput = false;\n\n  private readonly _onWriteParsed = this.register(new EventEmitter<void>());\n  public readonly onWriteParsed = this._onWriteParsed.event;\n\n  constructor(private _action: (data: string | Uint8Array, promiseResult?: boolean) => void | Promise<boolean>) {\n    super();\n  }\n\n  public handleUserInput(): void {\n    this._didUserInput = true;\n  }\n\n  /**\n   * @deprecated Unreliable, to be removed soon.\n   */\n  public writeSync(data: string | Uint8Array, maxSubsequentCalls?: number): void {\n    // stop writeSync recursions with maxSubsequentCalls argument\n    // This is dangerous to use as it will lose the current data chunk\n    // and return immediately.\n    if (maxSubsequentCalls !== undefined && this._syncCalls > maxSubsequentCalls) {\n      // comment next line if a whole loop block should only contain x `writeSync` calls\n      // (total flat vs. deep nested limit)\n      this._syncCalls = 0;\n      return;\n    }\n    // append chunk to buffer\n    this._pendingData += data.length;\n    this._writeBuffer.push(data);\n    this._callbacks.push(undefined);\n\n    // increase recursion counter\n    this._syncCalls++;\n    // exit early if another writeSync loop is active\n    if (this._isSyncWriting) {\n      return;\n    }\n    this._isSyncWriting = true;\n\n    // force sync processing on pending data chunks to avoid in-band data scrambling\n    // does the same as innerWrite but without event loop\n    // we have to do it here as single loop steps to not corrupt loop subject\n    // by another writeSync call triggered from _action\n    let chunk: string | Uint8Array | undefined;\n    while (chunk = this._writeBuffer.shift()) {\n      this._action(chunk);\n      const cb = this._callbacks.shift();\n      if (cb) cb();\n    }\n    // reset to avoid reprocessing of chunks with scheduled innerWrite call\n    // stopping scheduled innerWrite by offset > length condition\n    this._pendingData = 0;\n    this._bufferOffset = 0x7FFFFFFF;\n\n    // allow another writeSync to loop\n    this._isSyncWriting = false;\n    this._syncCalls = 0;\n  }\n\n  public write(data: string | Uint8Array, callback?: () => void): void {\n    if (this._pendingData > DISCARD_WATERMARK) {\n      throw new Error('write data discarded, use flow control to avoid losing data');\n    }\n\n    // schedule chunk processing for next event loop run\n    if (!this._writeBuffer.length) {\n      this._bufferOffset = 0;\n\n      // If this is the first write call after the user has done some input,\n      // parse it immediately to minimize input latency,\n      // otherwise schedule for the next event\n      if (this._didUserInput) {\n        this._didUserInput = false;\n        this._pendingData += data.length;\n        this._writeBuffer.push(data);\n        this._callbacks.push(callback);\n        this._innerWrite();\n        return;\n      }\n\n      setTimeout(() => this._innerWrite());\n    }\n\n    this._pendingData += data.length;\n    this._writeBuffer.push(data);\n    this._callbacks.push(callback);\n  }\n\n  /**\n   * Inner write call, that enters the sliced chunk processing by timing.\n   *\n   * `lastTime` indicates, when the last _innerWrite call had started.\n   * It is used to aggregate async handler execution under a timeout constraint\n   * effectively lowering the redrawing needs, schematically:\n   *\n   *   macroTask _innerWrite:\n   *     if (Date.now() - (lastTime | 0) < WRITE_TIMEOUT_MS):\n   *        schedule microTask _innerWrite(lastTime)\n   *     else:\n   *        schedule macroTask _innerWrite(0)\n   *\n   *   overall execution order on task queues:\n   *\n   *   macrotasks:  [...]  -->  _innerWrite(0)  -->  [...]  -->  screenUpdate  -->  [...]\n   *         m  t:                    |\n   *         i  a:                  [...]\n   *         c  s:                    |\n   *         r  k:              while < timeout:\n   *         o  s:                _innerWrite(timeout)\n   *\n   * `promiseResult` depicts the promise resolve value of an async handler.\n   * This value gets carried forward through all saved stack states of the\n   * paused parser for proper continuation.\n   *\n   * Note, for pure sync code `lastTime` and `promiseResult` have no meaning.\n   */\n  protected _innerWrite(lastTime: number = 0, promiseResult: boolean = true): void {\n    const startTime = lastTime || Date.now();\n    while (this._writeBuffer.length > this._bufferOffset) {\n      const data = this._writeBuffer[this._bufferOffset];\n      const result = this._action(data, promiseResult);\n      if (result) {\n        /**\n         * If we get a promise as return value, we re-schedule the continuation\n         * as thenable on the promise and exit right away.\n         *\n         * The exit here means, that we block input processing at the current active chunk,\n         * the exact execution position within the chunk is preserved by the saved\n         * stack content in InputHandler and EscapeSequenceParser.\n         *\n         * Resuming happens automatically from that saved stack state.\n         * Also the resolved promise value is passed along the callstack to\n         * `EscapeSequenceParser.parse` to correctly resume the stopped handler loop.\n         *\n         * Exceptions on async handlers will be logged to console async, but do not interrupt\n         * the input processing (continues with next handler at the current input position).\n         */\n\n        /**\n         * If a promise takes long to resolve, we should schedule continuation behind setTimeout.\n         * This might already be too late, if our .then enters really late (executor + prev thens took very long).\n         * This cannot be solved here for the handler itself (it is the handlers responsibility to slice hard work),\n         * but we can at least schedule a screen update as we gain control.\n         */\n        const continuation: (r: boolean) => void = (r: boolean) => Date.now() - startTime >= WRITE_TIMEOUT_MS\n          ? setTimeout(() => this._innerWrite(0, r))\n          : this._innerWrite(startTime, r);\n\n        /**\n         * Optimization considerations:\n         * The continuation above favors FPS over throughput by eval'ing `startTime` on resolve.\n         * This might schedule too many screen updates with bad throughput drops (in case a slow\n         * resolving handler sliced its work properly behind setTimeout calls). We cannot spot\n         * this condition here, also the renderer has no way to spot nonsense updates either.\n         * FIXME: A proper fix for this would track the FPS at the renderer entry level separately.\n         *\n         * If favoring of FPS shows bad throughtput impact, use the following instead. It favors\n         * throughput by eval'ing `startTime` upfront pulling at least one more chunk into the\n         * current microtask queue (executed before setTimeout).\n         */\n        // const continuation: (r: boolean) => void = Date.now() - startTime >= WRITE_TIMEOUT_MS\n        //   ? r => setTimeout(() => this._innerWrite(0, r))\n        //   : r => this._innerWrite(startTime, r);\n\n        // Handle exceptions synchronously to current band position, idea:\n        // 1. spawn a single microtask which we allow to throw hard\n        // 2. spawn a promise immediately resolving to `true`\n        // (executed on the same queue, thus properly aligned before continuation happens)\n        result.catch(err => {\n          queueMicrotask(() => {throw err;});\n          return Promise.resolve(false);\n        }).then(continuation);\n        return;\n      }\n\n      const cb = this._callbacks[this._bufferOffset];\n      if (cb) cb();\n      this._bufferOffset++;\n      this._pendingData -= data.length;\n\n      if (Date.now() - startTime >= WRITE_TIMEOUT_MS) {\n        break;\n      }\n    }\n    if (this._writeBuffer.length > this._bufferOffset) {\n      // Allow renderer to catch up before processing the next batch\n      // trim already processed chunks if we are above threshold\n      if (this._bufferOffset > WRITE_BUFFER_LENGTH_THRESHOLD) {\n        this._writeBuffer = this._writeBuffer.slice(this._bufferOffset);\n        this._callbacks = this._callbacks.slice(this._bufferOffset);\n        this._bufferOffset = 0;\n      }\n      setTimeout(() => this._innerWrite());\n    } else {\n      this._writeBuffer.length = 0;\n      this._callbacks.length = 0;\n      this._pendingData = 0;\n      this._bufferOffset = 0;\n    }\n    this._onWriteParsed.fire();\n  }\n}\n","/**\n * Copyright (c) 2021 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\n\n// 'rgb:' rule - matching: r/g/b | rr/gg/bb | rrr/ggg/bbb | rrrr/gggg/bbbb (hex digits)\nconst RGB_REX = /^([\\da-f])\\/([\\da-f])\\/([\\da-f])$|^([\\da-f]{2})\\/([\\da-f]{2})\\/([\\da-f]{2})$|^([\\da-f]{3})\\/([\\da-f]{3})\\/([\\da-f]{3})$|^([\\da-f]{4})\\/([\\da-f]{4})\\/([\\da-f]{4})$/;\n// '#...' rule - matching any hex digits\nconst HASH_REX = /^[\\da-f]+$/;\n\n/**\n * Parse color spec to RGB values (8 bit per channel).\n * See `man xparsecolor` for details about certain format specifications.\n *\n * Supported formats:\n * - rgb:<red>/<green>/<blue> with <red>, <green>, <blue> in h | hh | hhh | hhhh\n * - #RGB, #RRGGBB, #RRRGGGBBB, #RRRRGGGGBBBB\n *\n * All other formats like rgbi: or device-independent string specifications\n * with float numbering are not supported.\n */\nexport function parseColor(data: string): [number, number, number] | undefined {\n  if (!data) return;\n  // also handle uppercases\n  let low = data.toLowerCase();\n  if (low.indexOf('rgb:') === 0) {\n    // 'rgb:' specifier\n    low = low.slice(4);\n    const m = RGB_REX.exec(low);\n    if (m) {\n      const base = m[1] ? 15 : m[4] ? 255 : m[7] ? 4095 : 65535;\n      return [\n        Math.round(parseInt(m[1] || m[4] || m[7] || m[10], 16) / base * 255),\n        Math.round(parseInt(m[2] || m[5] || m[8] || m[11], 16) / base * 255),\n        Math.round(parseInt(m[3] || m[6] || m[9] || m[12], 16) / base * 255)\n      ];\n    }\n  } else if (low.indexOf('#') === 0) {\n    // '#' specifier\n    low = low.slice(1);\n    if (HASH_REX.exec(low) && [3, 6, 9, 12].includes(low.length)) {\n      const adv = low.length / 3;\n      const result: [number, number, number] = [0, 0, 0];\n      for (let i = 0; i < 3; ++i) {\n        const c = parseInt(low.slice(adv * i, adv * i + adv), 16);\n        result[i] = adv === 1 ? c << 4 : adv === 2 ? c : adv === 3 ? c >> 4 : c >> 8;\n      }\n      return result;\n    }\n  }\n\n  // Named colors are currently not supported due to the large addition to the xterm.js bundle size\n  // they would add. In order to support named colors, we would need some way of optionally loading\n  // additional payloads so startup/download time is not bloated (see #3530).\n}\n\n// pad hex output to requested bit width\nfunction pad(n: number, bits: number): string {\n  const s = n.toString(16);\n  const s2 = s.length < 2 ? '0' + s : s;\n  switch (bits) {\n    case 4:\n      return s[0];\n    case 8:\n      return s2;\n    case 12:\n      return (s2 + s2).slice(0, 3);\n    default:\n      return s2 + s2;\n  }\n}\n\n/**\n * Convert a given color to rgb:../../.. string of `bits` depth.\n */\nexport function toRgbString(color: [number, number, number], bits: number = 16): string {\n  const [r, g, b] = color;\n  return `rgb:${pad(r, bits)}/${pad(g, bits)}/${pad(b, bits)}`;\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\n/**\n * Internal states of EscapeSequenceParser.\n */\nexport const enum ParserState {\n  GROUND = 0,\n  ESCAPE = 1,\n  ESCAPE_INTERMEDIATE = 2,\n  CSI_ENTRY = 3,\n  CSI_PARAM = 4,\n  CSI_INTERMEDIATE = 5,\n  CSI_IGNORE = 6,\n  SOS_PM_APC_STRING = 7,\n  OSC_STRING = 8,\n  DCS_ENTRY = 9,\n  DCS_PARAM = 10,\n  DCS_IGNORE = 11,\n  DCS_INTERMEDIATE = 12,\n  DCS_PASSTHROUGH = 13\n}\n\n/**\n * Internal actions of EscapeSequenceParser.\n */\nexport const enum ParserAction {\n  IGNORE = 0,\n  ERROR = 1,\n  PRINT = 2,\n  EXECUTE = 3,\n  OSC_START = 4,\n  OSC_PUT = 5,\n  OSC_END = 6,\n  CSI_DISPATCH = 7,\n  PARAM = 8,\n  COLLECT = 9,\n  ESC_DISPATCH = 10,\n  CLEAR = 11,\n  DCS_HOOK = 12,\n  DCS_PUT = 13,\n  DCS_UNHOOK = 14\n}\n\n/**\n * Internal states of OscParser.\n */\nexport const enum OscState {\n  START = 0,\n  ID = 1,\n  PAYLOAD = 2,\n  ABORT = 3\n}\n\n// payload limit for OSC and DCS\nexport const PAYLOAD_LIMIT = 10000000;\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IDisposable } from 'common/Types';\nimport { IDcsHandler, IParams, IHandlerCollection, IDcsParser, DcsFallbackHandlerType, ISubParserStackState } from 'common/parser/Types';\nimport { utf32ToString } from 'common/input/TextDecoder';\nimport { Params } from 'common/parser/Params';\nimport { PAYLOAD_LIMIT } from 'common/parser/Constants';\n\nconst EMPTY_HANDLERS: IDcsHandler[] = [];\n\nexport class DcsParser implements IDcsParser {\n  private _handlers: IHandlerCollection<IDcsHandler> = Object.create(null);\n  private _active: IDcsHandler[] = EMPTY_HANDLERS;\n  private _ident: number = 0;\n  private _handlerFb: DcsFallbackHandlerType = () => { };\n  private _stack: ISubParserStackState = {\n    paused: false,\n    loopPosition: 0,\n    fallThrough: false\n  };\n\n  public dispose(): void {\n    this._handlers = Object.create(null);\n    this._handlerFb = () => { };\n    this._active = EMPTY_HANDLERS;\n  }\n\n  public registerHandler(ident: number, handler: IDcsHandler): IDisposable {\n    if (this._handlers[ident] === undefined) {\n      this._handlers[ident] = [];\n    }\n    const handlerList = this._handlers[ident];\n    handlerList.push(handler);\n    return {\n      dispose: () => {\n        const handlerIndex = handlerList.indexOf(handler);\n        if (handlerIndex !== -1) {\n          handlerList.splice(handlerIndex, 1);\n        }\n      }\n    };\n  }\n\n  public clearHandler(ident: number): void {\n    if (this._handlers[ident]) delete this._handlers[ident];\n  }\n\n  public setHandlerFallback(handler: DcsFallbackHandlerType): void {\n    this._handlerFb = handler;\n  }\n\n  public reset(): void {\n    // force cleanup leftover handlers\n    if (this._active.length) {\n      for (let j = this._stack.paused ? this._stack.loopPosition - 1 : this._active.length - 1; j >= 0; --j) {\n        this._active[j].unhook(false);\n      }\n    }\n    this._stack.paused = false;\n    this._active = EMPTY_HANDLERS;\n    this._ident = 0;\n  }\n\n  public hook(ident: number, params: IParams): void {\n    // always reset leftover handlers\n    this.reset();\n    this._ident = ident;\n    this._active = this._handlers[ident] || EMPTY_HANDLERS;\n    if (!this._active.length) {\n      this._handlerFb(this._ident, 'HOOK', params);\n    } else {\n      for (let j = this._active.length - 1; j >= 0; j--) {\n        this._active[j].hook(params);\n      }\n    }\n  }\n\n  public put(data: Uint32Array, start: number, end: number): void {\n    if (!this._active.length) {\n      this._handlerFb(this._ident, 'PUT', utf32ToString(data, start, end));\n    } else {\n      for (let j = this._active.length - 1; j >= 0; j--) {\n        this._active[j].put(data, start, end);\n      }\n    }\n  }\n\n  public unhook(success: boolean, promiseResult: boolean = true): void | Promise<boolean> {\n    if (!this._active.length) {\n      this._handlerFb(this._ident, 'UNHOOK', success);\n    } else {\n      let handlerResult: boolean | Promise<boolean> = false;\n      let j = this._active.length - 1;\n      let fallThrough = false;\n      if (this._stack.paused) {\n        j = this._stack.loopPosition - 1;\n        handlerResult = promiseResult;\n        fallThrough = this._stack.fallThrough;\n        this._stack.paused = false;\n      }\n      if (!fallThrough && handlerResult === false) {\n        for (; j >= 0; j--) {\n          handlerResult = this._active[j].unhook(success);\n          if (handlerResult === true) {\n            break;\n          } else if (handlerResult instanceof Promise) {\n            this._stack.paused = true;\n            this._stack.loopPosition = j;\n            this._stack.fallThrough = false;\n            return handlerResult;\n          }\n        }\n        j--;\n      }\n      // cleanup left over handlers (fallThrough for async)\n      for (; j >= 0; j--) {\n        handlerResult = this._active[j].unhook(false);\n        if (handlerResult instanceof Promise) {\n          this._stack.paused = true;\n          this._stack.loopPosition = j;\n          this._stack.fallThrough = true;\n          return handlerResult;\n        }\n      }\n    }\n    this._active = EMPTY_HANDLERS;\n    this._ident = 0;\n  }\n}\n\n// predefine empty params as [0] (ZDM)\nconst EMPTY_PARAMS = new Params();\nEMPTY_PARAMS.addParam(0);\n\n/**\n * Convenient class to create a DCS handler from a single callback function.\n * Note: The payload is currently limited to 50 MB (hardcoded).\n */\nexport class DcsHandler implements IDcsHandler {\n  private _data = '';\n  private _params: IParams = EMPTY_PARAMS;\n  private _hitLimit: boolean = false;\n\n  constructor(private _handler: (data: string, params: IParams) => boolean | Promise<boolean>) { }\n\n  public hook(params: IParams): void {\n    // since we need to preserve params until `unhook`, we have to clone it\n    // (only borrowed from parser and spans multiple parser states)\n    // perf optimization:\n    // clone only, if we have non empty params, otherwise stick with default\n    this._params = (params.length > 1 || params.params[0]) ? params.clone() : EMPTY_PARAMS;\n    this._data = '';\n    this._hitLimit = false;\n  }\n\n  public put(data: Uint32Array, start: number, end: number): void {\n    if (this._hitLimit) {\n      return;\n    }\n    this._data += utf32ToString(data, start, end);\n    if (this._data.length > PAYLOAD_LIMIT) {\n      this._data = '';\n      this._hitLimit = true;\n    }\n  }\n\n  public unhook(success: boolean): boolean | Promise<boolean> {\n    let ret: boolean | Promise<boolean> = false;\n    if (this._hitLimit) {\n      ret = false;\n    } else if (success) {\n      ret = this._handler(this._data, this._params);\n      if (ret instanceof Promise) {\n        // need to hold data and params until `ret` got resolved\n        // dont care for errors, data will be freed anyway on next start\n        return ret.then(res => {\n          this._params = EMPTY_PARAMS;\n          this._data = '';\n          this._hitLimit = false;\n          return res;\n        });\n      }\n    }\n    this._params = EMPTY_PARAMS;\n    this._data = '';\n    this._hitLimit = false;\n    return ret;\n  }\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IParsingState, IDcsHandler, IEscapeSequenceParser, IParams, IOscHandler, IHandlerCollection, CsiHandlerType, OscFallbackHandlerType, IOscParser, EscHandlerType, IDcsParser, DcsFallbackHandlerType, IFunctionIdentifier, ExecuteFallbackHandlerType, CsiFallbackHandlerType, EscFallbackHandlerType, PrintHandlerType, PrintFallbackHandlerType, ExecuteHandlerType, IParserStackState, ParserStackType, ResumableHandlersType } from 'common/parser/Types';\nimport { ParserState, ParserAction } from 'common/parser/Constants';\nimport { Disposable, toDisposable } from 'common/Lifecycle';\nimport { IDisposable } from 'common/Types';\nimport { Params } from 'common/parser/Params';\nimport { OscParser } from 'common/parser/OscParser';\nimport { DcsParser } from 'common/parser/DcsParser';\n\n/**\n * Table values are generated like this:\n *    index:  currentState << TableValue.INDEX_STATE_SHIFT | charCode\n *    value:  action << TableValue.TRANSITION_ACTION_SHIFT | nextState\n */\nconst enum TableAccess {\n  TRANSITION_ACTION_SHIFT = 4,\n  TRANSITION_STATE_MASK = 15,\n  INDEX_STATE_SHIFT = 8\n}\n\n/**\n * Transition table for EscapeSequenceParser.\n */\nexport class TransitionTable {\n  public table: Uint8Array;\n\n  constructor(length: number) {\n    this.table = new Uint8Array(length);\n  }\n\n  /**\n   * Set default transition.\n   * @param action default action\n   * @param next default next state\n   */\n  public setDefault(action: ParserAction, next: ParserState): void {\n    this.table.fill(action << TableAccess.TRANSITION_ACTION_SHIFT | next);\n  }\n\n  /**\n   * Add a transition to the transition table.\n   * @param code input character code\n   * @param state current parser state\n   * @param action parser action to be done\n   * @param next next parser state\n   */\n  public add(code: number, state: ParserState, action: ParserAction, next: ParserState): void {\n    this.table[state << TableAccess.INDEX_STATE_SHIFT | code] = action << TableAccess.TRANSITION_ACTION_SHIFT | next;\n  }\n\n  /**\n   * Add transitions for multiple input character codes.\n   * @param codes input character code array\n   * @param state current parser state\n   * @param action parser action to be done\n   * @param next next parser state\n   */\n  public addMany(codes: number[], state: ParserState, action: ParserAction, next: ParserState): void {\n    for (let i = 0; i < codes.length; i++) {\n      this.table[state << TableAccess.INDEX_STATE_SHIFT | codes[i]] = action << TableAccess.TRANSITION_ACTION_SHIFT | next;\n    }\n  }\n}\n\n\n// Pseudo-character placeholder for printable non-ascii characters (unicode).\nconst NON_ASCII_PRINTABLE = 0xA0;\n\n\n/**\n * VT500 compatible transition table.\n * Taken from https://vt100.net/emu/dec_ansi_parser.\n */\nexport const VT500_TRANSITION_TABLE = (function (): TransitionTable {\n  const table: TransitionTable = new TransitionTable(4095);\n\n  // range macro for byte\n  const BYTE_VALUES = 256;\n  const blueprint = Array.apply(null, Array(BYTE_VALUES)).map((unused: any, i: number) => i);\n  const r = (start: number, end: number): number[] => blueprint.slice(start, end);\n\n  // Default definitions.\n  const PRINTABLES = r(0x20, 0x7f); // 0x20 (SP) included, 0x7F (DEL) excluded\n  const EXECUTABLES = r(0x00, 0x18);\n  EXECUTABLES.push(0x19);\n  EXECUTABLES.push.apply(EXECUTABLES, r(0x1c, 0x20));\n\n  const states: number[] = r(ParserState.GROUND, ParserState.DCS_PASSTHROUGH + 1);\n  let state: any;\n\n  // set default transition\n  table.setDefault(ParserAction.ERROR, ParserState.GROUND);\n  // printables\n  table.addMany(PRINTABLES, ParserState.GROUND, ParserAction.PRINT, ParserState.GROUND);\n  // global anywhere rules\n  for (state in states) {\n    table.addMany([0x18, 0x1a, 0x99, 0x9a], state, ParserAction.EXECUTE, ParserState.GROUND);\n    table.addMany(r(0x80, 0x90), state, ParserAction.EXECUTE, ParserState.GROUND);\n    table.addMany(r(0x90, 0x98), state, ParserAction.EXECUTE, ParserState.GROUND);\n    table.add(0x9c, state, ParserAction.IGNORE, ParserState.GROUND); // ST as terminator\n    table.add(0x1b, state, ParserAction.CLEAR, ParserState.ESCAPE);  // ESC\n    table.add(0x9d, state, ParserAction.OSC_START, ParserState.OSC_STRING);  // OSC\n    table.addMany([0x98, 0x9e, 0x9f], state, ParserAction.IGNORE, ParserState.SOS_PM_APC_STRING);\n    table.add(0x9b, state, ParserAction.CLEAR, ParserState.CSI_ENTRY);  // CSI\n    table.add(0x90, state, ParserAction.CLEAR, ParserState.DCS_ENTRY);  // DCS\n  }\n  // rules for executables and 7f\n  table.addMany(EXECUTABLES, ParserState.GROUND, ParserAction.EXECUTE, ParserState.GROUND);\n  table.addMany(EXECUTABLES, ParserState.ESCAPE, ParserAction.EXECUTE, ParserState.ESCAPE);\n  table.add(0x7f, ParserState.ESCAPE, ParserAction.IGNORE, ParserState.ESCAPE);\n  table.addMany(EXECUTABLES, ParserState.OSC_STRING, ParserAction.IGNORE, ParserState.OSC_STRING);\n  table.addMany(EXECUTABLES, ParserState.CSI_ENTRY, ParserAction.EXECUTE, ParserState.CSI_ENTRY);\n  table.add(0x7f, ParserState.CSI_ENTRY, ParserAction.IGNORE, ParserState.CSI_ENTRY);\n  table.addMany(EXECUTABLES, ParserState.CSI_PARAM, ParserAction.EXECUTE, ParserState.CSI_PARAM);\n  table.add(0x7f, ParserState.CSI_PARAM, ParserAction.IGNORE, ParserState.CSI_PARAM);\n  table.addMany(EXECUTABLES, ParserState.CSI_IGNORE, ParserAction.EXECUTE, ParserState.CSI_IGNORE);\n  table.addMany(EXECUTABLES, ParserState.CSI_INTERMEDIATE, ParserAction.EXECUTE, ParserState.CSI_INTERMEDIATE);\n  table.add(0x7f, ParserState.CSI_INTERMEDIATE, ParserAction.IGNORE, ParserState.CSI_INTERMEDIATE);\n  table.addMany(EXECUTABLES, ParserState.ESCAPE_INTERMEDIATE, ParserAction.EXECUTE, ParserState.ESCAPE_INTERMEDIATE);\n  table.add(0x7f, ParserState.ESCAPE_INTERMEDIATE, ParserAction.IGNORE, ParserState.ESCAPE_INTERMEDIATE);\n  // osc\n  table.add(0x5d, ParserState.ESCAPE, ParserAction.OSC_START, ParserState.OSC_STRING);\n  table.addMany(PRINTABLES, ParserState.OSC_STRING, ParserAction.OSC_PUT, ParserState.OSC_STRING);\n  table.add(0x7f, ParserState.OSC_STRING, ParserAction.OSC_PUT, ParserState.OSC_STRING);\n  table.addMany([0x9c, 0x1b, 0x18, 0x1a, 0x07], ParserState.OSC_STRING, ParserAction.OSC_END, ParserState.GROUND);\n  table.addMany(r(0x1c, 0x20), ParserState.OSC_STRING, ParserAction.IGNORE, ParserState.OSC_STRING);\n  // sos/pm/apc does nothing\n  table.addMany([0x58, 0x5e, 0x5f], ParserState.ESCAPE, ParserAction.IGNORE, ParserState.SOS_PM_APC_STRING);\n  table.addMany(PRINTABLES, ParserState.SOS_PM_APC_STRING, ParserAction.IGNORE, ParserState.SOS_PM_APC_STRING);\n  table.addMany(EXECUTABLES, ParserState.SOS_PM_APC_STRING, ParserAction.IGNORE, ParserState.SOS_PM_APC_STRING);\n  table.add(0x9c, ParserState.SOS_PM_APC_STRING, ParserAction.IGNORE, ParserState.GROUND);\n  table.add(0x7f, ParserState.SOS_PM_APC_STRING, ParserAction.IGNORE, ParserState.SOS_PM_APC_STRING);\n  // csi entries\n  table.add(0x5b, ParserState.ESCAPE, ParserAction.CLEAR, ParserState.CSI_ENTRY);\n  table.addMany(r(0x40, 0x7f), ParserState.CSI_ENTRY, ParserAction.CSI_DISPATCH, ParserState.GROUND);\n  table.addMany(r(0x30, 0x3c), ParserState.CSI_ENTRY, ParserAction.PARAM, ParserState.CSI_PARAM);\n  table.addMany([0x3c, 0x3d, 0x3e, 0x3f], ParserState.CSI_ENTRY, ParserAction.COLLECT, ParserState.CSI_PARAM);\n  table.addMany(r(0x30, 0x3c), ParserState.CSI_PARAM, ParserAction.PARAM, ParserState.CSI_PARAM);\n  table.addMany(r(0x40, 0x7f), ParserState.CSI_PARAM, ParserAction.CSI_DISPATCH, ParserState.GROUND);\n  table.addMany([0x3c, 0x3d, 0x3e, 0x3f], ParserState.CSI_PARAM, ParserAction.IGNORE, ParserState.CSI_IGNORE);\n  table.addMany(r(0x20, 0x40), ParserState.CSI_IGNORE, ParserAction.IGNORE, ParserState.CSI_IGNORE);\n  table.add(0x7f, ParserState.CSI_IGNORE, ParserAction.IGNORE, ParserState.CSI_IGNORE);\n  table.addMany(r(0x40, 0x7f), ParserState.CSI_IGNORE, ParserAction.IGNORE, ParserState.GROUND);\n  table.addMany(r(0x20, 0x30), ParserState.CSI_ENTRY, ParserAction.COLLECT, ParserState.CSI_INTERMEDIATE);\n  table.addMany(r(0x20, 0x30), ParserState.CSI_INTERMEDIATE, ParserAction.COLLECT, ParserState.CSI_INTERMEDIATE);\n  table.addMany(r(0x30, 0x40), ParserState.CSI_INTERMEDIATE, ParserAction.IGNORE, ParserState.CSI_IGNORE);\n  table.addMany(r(0x40, 0x7f), ParserState.CSI_INTERMEDIATE, ParserAction.CSI_DISPATCH, ParserState.GROUND);\n  table.addMany(r(0x20, 0x30), ParserState.CSI_PARAM, ParserAction.COLLECT, ParserState.CSI_INTERMEDIATE);\n  // esc_intermediate\n  table.addMany(r(0x20, 0x30), ParserState.ESCAPE, ParserAction.COLLECT, ParserState.ESCAPE_INTERMEDIATE);\n  table.addMany(r(0x20, 0x30), ParserState.ESCAPE_INTERMEDIATE, ParserAction.COLLECT, ParserState.ESCAPE_INTERMEDIATE);\n  table.addMany(r(0x30, 0x7f), ParserState.ESCAPE_INTERMEDIATE, ParserAction.ESC_DISPATCH, ParserState.GROUND);\n  table.addMany(r(0x30, 0x50), ParserState.ESCAPE, ParserAction.ESC_DISPATCH, ParserState.GROUND);\n  table.addMany(r(0x51, 0x58), ParserState.ESCAPE, ParserAction.ESC_DISPATCH, ParserState.GROUND);\n  table.addMany([0x59, 0x5a, 0x5c], ParserState.ESCAPE, ParserAction.ESC_DISPATCH, ParserState.GROUND);\n  table.addMany(r(0x60, 0x7f), ParserState.ESCAPE, ParserAction.ESC_DISPATCH, ParserState.GROUND);\n  // dcs entry\n  table.add(0x50, ParserState.ESCAPE, ParserAction.CLEAR, ParserState.DCS_ENTRY);\n  table.addMany(EXECUTABLES, ParserState.DCS_ENTRY, ParserAction.IGNORE, ParserState.DCS_ENTRY);\n  table.add(0x7f, ParserState.DCS_ENTRY, ParserAction.IGNORE, ParserState.DCS_ENTRY);\n  table.addMany(r(0x1c, 0x20), ParserState.DCS_ENTRY, ParserAction.IGNORE, ParserState.DCS_ENTRY);\n  table.addMany(r(0x20, 0x30), ParserState.DCS_ENTRY, ParserAction.COLLECT, ParserState.DCS_INTERMEDIATE);\n  table.addMany(r(0x30, 0x3c), ParserState.DCS_ENTRY, ParserAction.PARAM, ParserState.DCS_PARAM);\n  table.addMany([0x3c, 0x3d, 0x3e, 0x3f], ParserState.DCS_ENTRY, ParserAction.COLLECT, ParserState.DCS_PARAM);\n  table.addMany(EXECUTABLES, ParserState.DCS_IGNORE, ParserAction.IGNORE, ParserState.DCS_IGNORE);\n  table.addMany(r(0x20, 0x80), ParserState.DCS_IGNORE, ParserAction.IGNORE, ParserState.DCS_IGNORE);\n  table.addMany(r(0x1c, 0x20), ParserState.DCS_IGNORE, ParserAction.IGNORE, ParserState.DCS_IGNORE);\n  table.addMany(EXECUTABLES, ParserState.DCS_PARAM, ParserAction.IGNORE, ParserState.DCS_PARAM);\n  table.add(0x7f, ParserState.DCS_PARAM, ParserAction.IGNORE, ParserState.DCS_PARAM);\n  table.addMany(r(0x1c, 0x20), ParserState.DCS_PARAM, ParserAction.IGNORE, ParserState.DCS_PARAM);\n  table.addMany(r(0x30, 0x3c), ParserState.DCS_PARAM, ParserAction.PARAM, ParserState.DCS_PARAM);\n  table.addMany([0x3c, 0x3d, 0x3e, 0x3f], ParserState.DCS_PARAM, ParserAction.IGNORE, ParserState.DCS_IGNORE);\n  table.addMany(r(0x20, 0x30), ParserState.DCS_PARAM, ParserAction.COLLECT, ParserState.DCS_INTERMEDIATE);\n  table.addMany(EXECUTABLES, ParserState.DCS_INTERMEDIATE, ParserAction.IGNORE, ParserState.DCS_INTERMEDIATE);\n  table.add(0x7f, ParserState.DCS_INTERMEDIATE, ParserAction.IGNORE, ParserState.DCS_INTERMEDIATE);\n  table.addMany(r(0x1c, 0x20), ParserState.DCS_INTERMEDIATE, ParserAction.IGNORE, ParserState.DCS_INTERMEDIATE);\n  table.addMany(r(0x20, 0x30), ParserState.DCS_INTERMEDIATE, ParserAction.COLLECT, ParserState.DCS_INTERMEDIATE);\n  table.addMany(r(0x30, 0x40), ParserState.DCS_INTERMEDIATE, ParserAction.IGNORE, ParserState.DCS_IGNORE);\n  table.addMany(r(0x40, 0x7f), ParserState.DCS_INTERMEDIATE, ParserAction.DCS_HOOK, ParserState.DCS_PASSTHROUGH);\n  table.addMany(r(0x40, 0x7f), ParserState.DCS_PARAM, ParserAction.DCS_HOOK, ParserState.DCS_PASSTHROUGH);\n  table.addMany(r(0x40, 0x7f), ParserState.DCS_ENTRY, ParserAction.DCS_HOOK, ParserState.DCS_PASSTHROUGH);\n  table.addMany(EXECUTABLES, ParserState.DCS_PASSTHROUGH, ParserAction.DCS_PUT, ParserState.DCS_PASSTHROUGH);\n  table.addMany(PRINTABLES, ParserState.DCS_PASSTHROUGH, ParserAction.DCS_PUT, ParserState.DCS_PASSTHROUGH);\n  table.add(0x7f, ParserState.DCS_PASSTHROUGH, ParserAction.IGNORE, ParserState.DCS_PASSTHROUGH);\n  table.addMany([0x1b, 0x9c, 0x18, 0x1a], ParserState.DCS_PASSTHROUGH, ParserAction.DCS_UNHOOK, ParserState.GROUND);\n  // special handling of unicode chars\n  table.add(NON_ASCII_PRINTABLE, ParserState.GROUND, ParserAction.PRINT, ParserState.GROUND);\n  table.add(NON_ASCII_PRINTABLE, ParserState.OSC_STRING, ParserAction.OSC_PUT, ParserState.OSC_STRING);\n  table.add(NON_ASCII_PRINTABLE, ParserState.CSI_IGNORE, ParserAction.IGNORE, ParserState.CSI_IGNORE);\n  table.add(NON_ASCII_PRINTABLE, ParserState.DCS_IGNORE, ParserAction.IGNORE, ParserState.DCS_IGNORE);\n  table.add(NON_ASCII_PRINTABLE, ParserState.DCS_PASSTHROUGH, ParserAction.DCS_PUT, ParserState.DCS_PASSTHROUGH);\n  return table;\n})();\n\n\n/**\n * EscapeSequenceParser.\n * This class implements the ANSI/DEC compatible parser described by\n * Paul Williams (https://vt100.net/emu/dec_ansi_parser).\n *\n * To implement custom ANSI compliant escape sequences it is not needed to\n * alter this parser, instead consider registering a custom handler.\n * For non ANSI compliant sequences change the transition table with\n * the optional `transitions` constructor argument and\n * reimplement the `parse` method.\n *\n * This parser is currently hardcoded to operate in ZDM (Zero Default Mode)\n * as suggested by the original parser, thus empty parameters are set to 0.\n * This this is not in line with the latest ECMA-48 specification\n * (ZDM was part of the early specs and got completely removed later on).\n *\n * Other than the original parser from vt100.net this parser supports\n * sub parameters in digital parameters separated by colons. Empty sub parameters\n * are set to -1 (no ZDM for sub parameters).\n *\n * About prefix and intermediate bytes:\n * This parser follows the assumptions of the vt100.net parser with these restrictions:\n * - only one prefix byte is allowed as first parameter byte, byte range 0x3c .. 0x3f\n * - max. two intermediates are respected, byte range 0x20 .. 0x2f\n * Note that this is not in line with ECMA-48 which does not limit either of those.\n * Furthermore ECMA-48 allows the prefix byte range at any param byte position. Currently\n * there are no known sequences that follow the broader definition of the specification.\n *\n * TODO: implement error recovery hook via error handler return values\n */\nexport class EscapeSequenceParser extends Disposable implements IEscapeSequenceParser {\n  public initialState: number;\n  public currentState: number;\n  public precedingCodepoint: number;\n\n  // buffers over several parse calls\n  protected _params: Params;\n  protected _collect: number;\n\n  // handler lookup containers\n  protected _printHandler: PrintHandlerType;\n  protected _executeHandlers: { [flag: number]: ExecuteHandlerType };\n  protected _csiHandlers: IHandlerCollection<CsiHandlerType>;\n  protected _escHandlers: IHandlerCollection<EscHandlerType>;\n  protected readonly _oscParser: IOscParser;\n  protected readonly _dcsParser: IDcsParser;\n  protected _errorHandler: (state: IParsingState) => IParsingState;\n\n  // fallback handlers\n  protected _printHandlerFb: PrintFallbackHandlerType;\n  protected _executeHandlerFb: ExecuteFallbackHandlerType;\n  protected _csiHandlerFb: CsiFallbackHandlerType;\n  protected _escHandlerFb: EscFallbackHandlerType;\n  protected _errorHandlerFb: (state: IParsingState) => IParsingState;\n\n  // parser stack save for async handler support\n  protected _parseStack: IParserStackState = {\n    state: ParserStackType.NONE,\n    handlers: [],\n    handlerPos: 0,\n    transition: 0,\n    chunkPos: 0\n  };\n\n  constructor(\n    protected readonly _transitions: TransitionTable = VT500_TRANSITION_TABLE\n  ) {\n    super();\n\n    this.initialState = ParserState.GROUND;\n    this.currentState = this.initialState;\n    this._params = new Params(); // defaults to 32 storable params/subparams\n    this._params.addParam(0);    // ZDM\n    this._collect = 0;\n    this.precedingCodepoint = 0;\n\n    // set default fallback handlers and handler lookup containers\n    this._printHandlerFb = (data, start, end): void => { };\n    this._executeHandlerFb = (code: number): void => { };\n    this._csiHandlerFb = (ident: number, params: IParams): void => { };\n    this._escHandlerFb = (ident: number): void => { };\n    this._errorHandlerFb = (state: IParsingState): IParsingState => state;\n    this._printHandler = this._printHandlerFb;\n    this._executeHandlers = Object.create(null);\n    this._csiHandlers = Object.create(null);\n    this._escHandlers = Object.create(null);\n    this.register(toDisposable(() => {\n      this._csiHandlers = Object.create(null);\n      this._executeHandlers = Object.create(null);\n      this._escHandlers = Object.create(null);\n    }));\n    this._oscParser = this.register(new OscParser());\n    this._dcsParser = this.register(new DcsParser());\n    this._errorHandler = this._errorHandlerFb;\n\n    // swallow 7bit ST (ESC+\\)\n    this.registerEscHandler({ final: '\\\\' }, () => true);\n  }\n\n  protected _identifier(id: IFunctionIdentifier, finalRange: number[] = [0x40, 0x7e]): number {\n    let res = 0;\n    if (id.prefix) {\n      if (id.prefix.length > 1) {\n        throw new Error('only one byte as prefix supported');\n      }\n      res = id.prefix.charCodeAt(0);\n      if (res && 0x3c > res || res > 0x3f) {\n        throw new Error('prefix must be in range 0x3c .. 0x3f');\n      }\n    }\n    if (id.intermediates) {\n      if (id.intermediates.length > 2) {\n        throw new Error('only two bytes as intermediates are supported');\n      }\n      for (let i = 0; i < id.intermediates.length; ++i) {\n        const intermediate = id.intermediates.charCodeAt(i);\n        if (0x20 > intermediate || intermediate > 0x2f) {\n          throw new Error('intermediate must be in range 0x20 .. 0x2f');\n        }\n        res <<= 8;\n        res |= intermediate;\n      }\n    }\n    if (id.final.length !== 1) {\n      throw new Error('final must be a single byte');\n    }\n    const finalCode = id.final.charCodeAt(0);\n    if (finalRange[0] > finalCode || finalCode > finalRange[1]) {\n      throw new Error(`final must be in range ${finalRange[0]} .. ${finalRange[1]}`);\n    }\n    res <<= 8;\n    res |= finalCode;\n\n    return res;\n  }\n\n  public identToString(ident: number): string {\n    const res: string[] = [];\n    while (ident) {\n      res.push(String.fromCharCode(ident & 0xFF));\n      ident >>= 8;\n    }\n    return res.reverse().join('');\n  }\n\n  public setPrintHandler(handler: PrintHandlerType): void {\n    this._printHandler = handler;\n  }\n  public clearPrintHandler(): void {\n    this._printHandler = this._printHandlerFb;\n  }\n\n  public registerEscHandler(id: IFunctionIdentifier, handler: EscHandlerType): IDisposable {\n    const ident = this._identifier(id, [0x30, 0x7e]);\n    if (this._escHandlers[ident] === undefined) {\n      this._escHandlers[ident] = [];\n    }\n    const handlerList = this._escHandlers[ident];\n    handlerList.push(handler);\n    return {\n      dispose: () => {\n        const handlerIndex = handlerList.indexOf(handler);\n        if (handlerIndex !== -1) {\n          handlerList.splice(handlerIndex, 1);\n        }\n      }\n    };\n  }\n  public clearEscHandler(id: IFunctionIdentifier): void {\n    if (this._escHandlers[this._identifier(id, [0x30, 0x7e])]) delete this._escHandlers[this._identifier(id, [0x30, 0x7e])];\n  }\n  public setEscHandlerFallback(handler: EscFallbackHandlerType): void {\n    this._escHandlerFb = handler;\n  }\n\n  public setExecuteHandler(flag: string, handler: ExecuteHandlerType): void {\n    this._executeHandlers[flag.charCodeAt(0)] = handler;\n  }\n  public clearExecuteHandler(flag: string): void {\n    if (this._executeHandlers[flag.charCodeAt(0)]) delete this._executeHandlers[flag.charCodeAt(0)];\n  }\n  public setExecuteHandlerFallback(handler: ExecuteFallbackHandlerType): void {\n    this._executeHandlerFb = handler;\n  }\n\n  public registerCsiHandler(id: IFunctionIdentifier, handler: CsiHandlerType): IDisposable {\n    const ident = this._identifier(id);\n    if (this._csiHandlers[ident] === undefined) {\n      this._csiHandlers[ident] = [];\n    }\n    const handlerList = this._csiHandlers[ident];\n    handlerList.push(handler);\n    return {\n      dispose: () => {\n        const handlerIndex = handlerList.indexOf(handler);\n        if (handlerIndex !== -1) {\n          handlerList.splice(handlerIndex, 1);\n        }\n      }\n    };\n  }\n  public clearCsiHandler(id: IFunctionIdentifier): void {\n    if (this._csiHandlers[this._identifier(id)]) delete this._csiHandlers[this._identifier(id)];\n  }\n  public setCsiHandlerFallback(callback: (ident: number, params: IParams) => void): void {\n    this._csiHandlerFb = callback;\n  }\n\n  public registerDcsHandler(id: IFunctionIdentifier, handler: IDcsHandler): IDisposable {\n    return this._dcsParser.registerHandler(this._identifier(id), handler);\n  }\n  public clearDcsHandler(id: IFunctionIdentifier): void {\n    this._dcsParser.clearHandler(this._identifier(id));\n  }\n  public setDcsHandlerFallback(handler: DcsFallbackHandlerType): void {\n    this._dcsParser.setHandlerFallback(handler);\n  }\n\n  public registerOscHandler(ident: number, handler: IOscHandler): IDisposable {\n    return this._oscParser.registerHandler(ident, handler);\n  }\n  public clearOscHandler(ident: number): void {\n    this._oscParser.clearHandler(ident);\n  }\n  public setOscHandlerFallback(handler: OscFallbackHandlerType): void {\n    this._oscParser.setHandlerFallback(handler);\n  }\n\n  public setErrorHandler(callback: (state: IParsingState) => IParsingState): void {\n    this._errorHandler = callback;\n  }\n  public clearErrorHandler(): void {\n    this._errorHandler = this._errorHandlerFb;\n  }\n\n  /**\n   * Reset parser to initial values.\n   *\n   * This can also be used to lift the improper continuation error condition\n   * when dealing with async handlers. Use this only as a last resort to silence\n   * that error when the terminal has no pending data to be processed. Note that\n   * the interrupted async handler might continue its work in the future messing\n   * up the terminal state even further.\n   */\n  public reset(): void {\n    this.currentState = this.initialState;\n    this._oscParser.reset();\n    this._dcsParser.reset();\n    this._params.reset();\n    this._params.addParam(0); // ZDM\n    this._collect = 0;\n    this.precedingCodepoint = 0;\n    // abort pending continuation from async handler\n    // Here the RESET type indicates, that the next parse call will\n    // ignore any saved stack, instead continues sync with next codepoint from GROUND\n    if (this._parseStack.state !== ParserStackType.NONE) {\n      this._parseStack.state = ParserStackType.RESET;\n      this._parseStack.handlers = []; // also release handlers ref\n    }\n  }\n\n  /**\n   * Async parse support.\n   */\n  protected _preserveStack(\n    state: ParserStackType,\n    handlers: ResumableHandlersType,\n    handlerPos: number,\n    transition: number,\n    chunkPos: number\n  ): void {\n    this._parseStack.state = state;\n    this._parseStack.handlers = handlers;\n    this._parseStack.handlerPos = handlerPos;\n    this._parseStack.transition = transition;\n    this._parseStack.chunkPos = chunkPos;\n  }\n\n  /**\n   * Parse UTF32 codepoints in `data` up to `length`.\n   *\n   * Note: For several actions with high data load the parsing is optimized\n   * by using local read ahead loops with hardcoded conditions to\n   * avoid costly table lookups. Make sure that any change of table values\n   * will be reflected in the loop conditions as well and vice versa.\n   * Affected states/actions:\n   * - GROUND:PRINT\n   * - CSI_PARAM:PARAM\n   * - DCS_PARAM:PARAM\n   * - OSC_STRING:OSC_PUT\n   * - DCS_PASSTHROUGH:DCS_PUT\n   *\n   * Note on asynchronous handler support:\n   * Any handler returning a promise will be treated as asynchronous.\n   * To keep the in-band blocking working for async handlers, `parse` pauses execution,\n   * creates a stack save and returns the promise to the caller.\n   * For proper continuation of the paused state it is important\n   * to await the promise resolving. On resolve the parse must be repeated\n   * with the same chunk of data and the resolved value in `promiseResult`\n   * until no promise is returned.\n   *\n   * Important: With only sync handlers defined, parsing is completely synchronous as well.\n   * As soon as an async handler is involved, synchronous parsing is not possible anymore.\n   *\n   * Boilerplate for proper parsing of multiple chunks with async handlers:\n   *\n   * ```typescript\n   * async function parseMultipleChunks(chunks: Uint32Array[]): Promise<void> {\n   *   for (const chunk of chunks) {\n   *     let result: void | Promise<boolean>;\n   *     let prev: boolean | undefined;\n   *     while (result = parser.parse(chunk, chunk.length, prev)) {\n   *       prev = await result;\n   *     }\n   *   }\n   *   // finished parsing all chunks...\n   * }\n   * ```\n   */\n  public parse(data: Uint32Array, length: number, promiseResult?: boolean): void | Promise<boolean> {\n    let code = 0;\n    let transition = 0;\n    let start = 0;\n    let handlerResult: void | boolean | Promise<boolean>;\n\n    // resume from async handler\n    if (this._parseStack.state) {\n      // allow sync parser reset even in continuation mode\n      // Note: can be used to recover parser from improper continuation error below\n      if (this._parseStack.state === ParserStackType.RESET) {\n        this._parseStack.state = ParserStackType.NONE;\n        start = this._parseStack.chunkPos + 1; // continue with next codepoint in GROUND\n      } else {\n        if (promiseResult === undefined || this._parseStack.state === ParserStackType.FAIL) {\n          /**\n           * Reject further parsing on improper continuation after pausing.\n           * This is a really bad condition with screwed up execution order and prolly messed up\n           * terminal state, therefore we exit hard with an exception and reject any further parsing.\n           *\n           * Note: With `Terminal.write` usage this exception should never occur, as the top level\n           * calls are guaranteed to handle async conditions properly. If you ever encounter this\n           * exception in your terminal integration it indicates, that you injected data chunks to\n           * `InputHandler.parse` or `EscapeSequenceParser.parse` synchronously without waiting for\n           * continuation of a running async handler.\n           *\n           * It is possible to get rid of this error by calling `reset`. But dont rely on that,\n           * as the pending async handler still might mess up the terminal later. Instead fix the faulty\n           * async handling, so this error will not be thrown anymore.\n           */\n          this._parseStack.state = ParserStackType.FAIL;\n          throw new Error('improper continuation due to previous async handler, giving up parsing');\n        }\n\n        // we have to resume the old handler loop if:\n        // - return value of the promise was `false`\n        // - handlers are not exhausted yet\n        const handlers = this._parseStack.handlers;\n        let handlerPos = this._parseStack.handlerPos - 1;\n        switch (this._parseStack.state) {\n          case ParserStackType.CSI:\n            if (promiseResult === false && handlerPos > -1) {\n              for (; handlerPos >= 0; handlerPos--) {\n                handlerResult = (handlers as CsiHandlerType[])[handlerPos](this._params);\n                if (handlerResult === true) {\n                  break;\n                } else if (handlerResult instanceof Promise) {\n                  this._parseStack.handlerPos = handlerPos;\n                  return handlerResult;\n                }\n              }\n            }\n            this._parseStack.handlers = [];\n            break;\n          case ParserStackType.ESC:\n            if (promiseResult === false && handlerPos > -1) {\n              for (; handlerPos >= 0; handlerPos--) {\n                handlerResult = (handlers as EscHandlerType[])[handlerPos]();\n                if (handlerResult === true) {\n                  break;\n                } else if (handlerResult instanceof Promise) {\n                  this._parseStack.handlerPos = handlerPos;\n                  return handlerResult;\n                }\n              }\n            }\n            this._parseStack.handlers = [];\n            break;\n          case ParserStackType.DCS:\n            code = data[this._parseStack.chunkPos];\n            handlerResult = this._dcsParser.unhook(code !== 0x18 && code !== 0x1a, promiseResult);\n            if (handlerResult) {\n              return handlerResult;\n            }\n            if (code === 0x1b) this._parseStack.transition |= ParserState.ESCAPE;\n            this._params.reset();\n            this._params.addParam(0); // ZDM\n            this._collect = 0;\n            break;\n          case ParserStackType.OSC:\n            code = data[this._parseStack.chunkPos];\n            handlerResult = this._oscParser.end(code !== 0x18 && code !== 0x1a, promiseResult);\n            if (handlerResult) {\n              return handlerResult;\n            }\n            if (code === 0x1b) this._parseStack.transition |= ParserState.ESCAPE;\n            this._params.reset();\n            this._params.addParam(0); // ZDM\n            this._collect = 0;\n            break;\n        }\n        // cleanup before continuing with the main sync loop\n        this._parseStack.state = ParserStackType.NONE;\n        start = this._parseStack.chunkPos + 1;\n        this.precedingCodepoint = 0;\n        this.currentState = this._parseStack.transition & TableAccess.TRANSITION_STATE_MASK;\n      }\n    }\n\n    // continue with main sync loop\n\n    // process input string\n    for (let i = start; i < length; ++i) {\n      code = data[i];\n\n      // normal transition & action lookup\n      transition = this._transitions.table[this.currentState << TableAccess.INDEX_STATE_SHIFT | (code < 0xa0 ? code : NON_ASCII_PRINTABLE)];\n      switch (transition >> TableAccess.TRANSITION_ACTION_SHIFT) {\n        case ParserAction.PRINT:\n          // read ahead with loop unrolling\n          // Note: 0x20 (SP) is included, 0x7F (DEL) is excluded\n          for (let j = i + 1; ; ++j) {\n            if (j >= length || (code = data[j]) < 0x20 || (code > 0x7e && code < NON_ASCII_PRINTABLE)) {\n              this._printHandler(data, i, j);\n              i = j - 1;\n              break;\n            }\n            if (++j >= length || (code = data[j]) < 0x20 || (code > 0x7e && code < NON_ASCII_PRINTABLE)) {\n              this._printHandler(data, i, j);\n              i = j - 1;\n              break;\n            }\n            if (++j >= length || (code = data[j]) < 0x20 || (code > 0x7e && code < NON_ASCII_PRINTABLE)) {\n              this._printHandler(data, i, j);\n              i = j - 1;\n              break;\n            }\n            if (++j >= length || (code = data[j]) < 0x20 || (code > 0x7e && code < NON_ASCII_PRINTABLE)) {\n              this._printHandler(data, i, j);\n              i = j - 1;\n              break;\n            }\n          }\n          break;\n        case ParserAction.EXECUTE:\n          if (this._executeHandlers[code]) this._executeHandlers[code]();\n          else this._executeHandlerFb(code);\n          this.precedingCodepoint = 0;\n          break;\n        case ParserAction.IGNORE:\n          break;\n        case ParserAction.ERROR:\n          const inject: IParsingState = this._errorHandler(\n            {\n              position: i,\n              code,\n              currentState: this.currentState,\n              collect: this._collect,\n              params: this._params,\n              abort: false\n            });\n          if (inject.abort) return;\n          // inject values: currently not implemented\n          break;\n        case ParserAction.CSI_DISPATCH:\n          // Trigger CSI Handler\n          const handlers = this._csiHandlers[this._collect << 8 | code];\n          let j = handlers ? handlers.length - 1 : -1;\n          for (; j >= 0; j--) {\n            // true means success and to stop bubbling\n            // a promise indicates an async handler that needs to finish before progressing\n            handlerResult = handlers[j](this._params);\n            if (handlerResult === true) {\n              break;\n            } else if (handlerResult instanceof Promise) {\n              this._preserveStack(ParserStackType.CSI, handlers, j, transition, i);\n              return handlerResult;\n            }\n          }\n          if (j < 0) {\n            this._csiHandlerFb(this._collect << 8 | code, this._params);\n          }\n          this.precedingCodepoint = 0;\n          break;\n        case ParserAction.PARAM:\n          // inner loop: digits (0x30 - 0x39) and ; (0x3b) and : (0x3a)\n          do {\n            switch (code) {\n              case 0x3b:\n                this._params.addParam(0);  // ZDM\n                break;\n              case 0x3a:\n                this._params.addSubParam(-1);\n                break;\n              default:  // 0x30 - 0x39\n                this._params.addDigit(code - 48);\n            }\n          } while (++i < length && (code = data[i]) > 0x2f && code < 0x3c);\n          i--;\n          break;\n        case ParserAction.COLLECT:\n          this._collect <<= 8;\n          this._collect |= code;\n          break;\n        case ParserAction.ESC_DISPATCH:\n          const handlersEsc = this._escHandlers[this._collect << 8 | code];\n          let jj = handlersEsc ? handlersEsc.length - 1 : -1;\n          for (; jj >= 0; jj--) {\n            // true means success and to stop bubbling\n            // a promise indicates an async handler that needs to finish before progressing\n            handlerResult = handlersEsc[jj]();\n            if (handlerResult === true) {\n              break;\n            } else if (handlerResult instanceof Promise) {\n              this._preserveStack(ParserStackType.ESC, handlersEsc, jj, transition, i);\n              return handlerResult;\n            }\n          }\n          if (jj < 0) {\n            this._escHandlerFb(this._collect << 8 | code);\n          }\n          this.precedingCodepoint = 0;\n          break;\n        case ParserAction.CLEAR:\n          this._params.reset();\n          this._params.addParam(0); // ZDM\n          this._collect = 0;\n          break;\n        case ParserAction.DCS_HOOK:\n          this._dcsParser.hook(this._collect << 8 | code, this._params);\n          break;\n        case ParserAction.DCS_PUT:\n          // inner loop - exit DCS_PUT: 0x18, 0x1a, 0x1b, 0x7f, 0x80 - 0x9f\n          // unhook triggered by: 0x1b, 0x9c (success) and 0x18, 0x1a (abort)\n          for (let j = i + 1; ; ++j) {\n            if (j >= length || (code = data[j]) === 0x18 || code === 0x1a || code === 0x1b || (code > 0x7f && code < NON_ASCII_PRINTABLE)) {\n              this._dcsParser.put(data, i, j);\n              i = j - 1;\n              break;\n            }\n          }\n          break;\n        case ParserAction.DCS_UNHOOK:\n          handlerResult = this._dcsParser.unhook(code !== 0x18 && code !== 0x1a);\n          if (handlerResult) {\n            this._preserveStack(ParserStackType.DCS, [], 0, transition, i);\n            return handlerResult;\n          }\n          if (code === 0x1b) transition |= ParserState.ESCAPE;\n          this._params.reset();\n          this._params.addParam(0); // ZDM\n          this._collect = 0;\n          this.precedingCodepoint = 0;\n          break;\n        case ParserAction.OSC_START:\n          this._oscParser.start();\n          break;\n        case ParserAction.OSC_PUT:\n          // inner loop: 0x20 (SP) included, 0x7F (DEL) included\n          for (let j = i + 1; ; j++) {\n            if (j >= length || (code = data[j]) < 0x20 || (code > 0x7f && code < NON_ASCII_PRINTABLE)) {\n              this._oscParser.put(data, i, j);\n              i = j - 1;\n              break;\n            }\n          }\n          break;\n        case ParserAction.OSC_END:\n          handlerResult = this._oscParser.end(code !== 0x18 && code !== 0x1a);\n          if (handlerResult) {\n            this._preserveStack(ParserStackType.OSC, [], 0, transition, i);\n            return handlerResult;\n          }\n          if (code === 0x1b) transition |= ParserState.ESCAPE;\n          this._params.reset();\n          this._params.addParam(0); // ZDM\n          this._collect = 0;\n          this.precedingCodepoint = 0;\n          break;\n      }\n      this.currentState = transition & TableAccess.TRANSITION_STATE_MASK;\n    }\n  }\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IOscHandler, IHandlerCollection, OscFallbackHandlerType, IOscParser, ISubParserStackState } from 'common/parser/Types';\nimport { OscState, PAYLOAD_LIMIT } from 'common/parser/Constants';\nimport { utf32ToString } from 'common/input/TextDecoder';\nimport { IDisposable } from 'common/Types';\n\nconst EMPTY_HANDLERS: IOscHandler[] = [];\n\nexport class OscParser implements IOscParser {\n  private _state = OscState.START;\n  private _active = EMPTY_HANDLERS;\n  private _id = -1;\n  private _handlers: IHandlerCollection<IOscHandler> = Object.create(null);\n  private _handlerFb: OscFallbackHandlerType = () => { };\n  private _stack: ISubParserStackState = {\n    paused: false,\n    loopPosition: 0,\n    fallThrough: false\n  };\n\n  public registerHandler(ident: number, handler: IOscHandler): IDisposable {\n    if (this._handlers[ident] === undefined) {\n      this._handlers[ident] = [];\n    }\n    const handlerList = this._handlers[ident];\n    handlerList.push(handler);\n    return {\n      dispose: () => {\n        const handlerIndex = handlerList.indexOf(handler);\n        if (handlerIndex !== -1) {\n          handlerList.splice(handlerIndex, 1);\n        }\n      }\n    };\n  }\n  public clearHandler(ident: number): void {\n    if (this._handlers[ident]) delete this._handlers[ident];\n  }\n  public setHandlerFallback(handler: OscFallbackHandlerType): void {\n    this._handlerFb = handler;\n  }\n\n  public dispose(): void {\n    this._handlers = Object.create(null);\n    this._handlerFb = () => { };\n    this._active = EMPTY_HANDLERS;\n  }\n\n  public reset(): void {\n    // force cleanup handlers if payload was already sent\n    if (this._state === OscState.PAYLOAD) {\n      for (let j = this._stack.paused ? this._stack.loopPosition - 1 : this._active.length - 1; j >= 0; --j) {\n        this._active[j].end(false);\n      }\n    }\n    this._stack.paused = false;\n    this._active = EMPTY_HANDLERS;\n    this._id = -1;\n    this._state = OscState.START;\n  }\n\n  private _start(): void {\n    this._active = this._handlers[this._id] || EMPTY_HANDLERS;\n    if (!this._active.length) {\n      this._handlerFb(this._id, 'START');\n    } else {\n      for (let j = this._active.length - 1; j >= 0; j--) {\n        this._active[j].start();\n      }\n    }\n  }\n\n  private _put(data: Uint32Array, start: number, end: number): void {\n    if (!this._active.length) {\n      this._handlerFb(this._id, 'PUT', utf32ToString(data, start, end));\n    } else {\n      for (let j = this._active.length - 1; j >= 0; j--) {\n        this._active[j].put(data, start, end);\n      }\n    }\n  }\n\n  public start(): void {\n    // always reset leftover handlers\n    this.reset();\n    this._state = OscState.ID;\n  }\n\n  /**\n   * Put data to current OSC command.\n   * Expects the identifier of the OSC command in the form\n   * OSC id ; payload ST/BEL\n   * Payload chunks are not further processed and get\n   * directly passed to the handlers.\n   */\n  public put(data: Uint32Array, start: number, end: number): void {\n    if (this._state === OscState.ABORT) {\n      return;\n    }\n    if (this._state === OscState.ID) {\n      while (start < end) {\n        const code = data[start++];\n        if (code === 0x3b) {\n          this._state = OscState.PAYLOAD;\n          this._start();\n          break;\n        }\n        if (code < 0x30 || 0x39 < code) {\n          this._state = OscState.ABORT;\n          return;\n        }\n        if (this._id === -1) {\n          this._id = 0;\n        }\n        this._id = this._id * 10 + code - 48;\n      }\n    }\n    if (this._state === OscState.PAYLOAD && end - start > 0) {\n      this._put(data, start, end);\n    }\n  }\n\n  /**\n   * Indicates end of an OSC command.\n   * Whether the OSC got aborted or finished normally\n   * is indicated by `success`.\n   */\n  public end(success: boolean, promiseResult: boolean = true): void | Promise<boolean> {\n    if (this._state === OscState.START) {\n      return;\n    }\n    // do nothing if command was faulty\n    if (this._state !== OscState.ABORT) {\n      // if we are still in ID state and get an early end\n      // means that the command has no payload thus we still have\n      // to announce START and send END right after\n      if (this._state === OscState.ID) {\n        this._start();\n      }\n\n      if (!this._active.length) {\n        this._handlerFb(this._id, 'END', success);\n      } else {\n        let handlerResult: boolean | Promise<boolean> = false;\n        let j = this._active.length - 1;\n        let fallThrough = false;\n        if (this._stack.paused) {\n          j = this._stack.loopPosition - 1;\n          handlerResult = promiseResult;\n          fallThrough = this._stack.fallThrough;\n          this._stack.paused = false;\n        }\n        if (!fallThrough && handlerResult === false) {\n          for (; j >= 0; j--) {\n            handlerResult = this._active[j].end(success);\n            if (handlerResult === true) {\n              break;\n            } else if (handlerResult instanceof Promise) {\n              this._stack.paused = true;\n              this._stack.loopPosition = j;\n              this._stack.fallThrough = false;\n              return handlerResult;\n            }\n          }\n          j--;\n        }\n        // cleanup left over handlers\n        // we always have to call .end for proper cleanup,\n        // here we use `success` to indicate whether a handler should execute\n        for (; j >= 0; j--) {\n          handlerResult = this._active[j].end(false);\n          if (handlerResult instanceof Promise) {\n            this._stack.paused = true;\n            this._stack.loopPosition = j;\n            this._stack.fallThrough = true;\n            return handlerResult;\n          }\n        }\n      }\n\n    }\n    this._active = EMPTY_HANDLERS;\n    this._id = -1;\n    this._state = OscState.START;\n  }\n}\n\n/**\n * Convenient class to allow attaching string based handler functions\n * as OSC handlers.\n */\nexport class OscHandler implements IOscHandler {\n  private _data = '';\n  private _hitLimit: boolean = false;\n\n  constructor(private _handler: (data: string) => boolean | Promise<boolean>) { }\n\n  public start(): void {\n    this._data = '';\n    this._hitLimit = false;\n  }\n\n  public put(data: Uint32Array, start: number, end: number): void {\n    if (this._hitLimit) {\n      return;\n    }\n    this._data += utf32ToString(data, start, end);\n    if (this._data.length > PAYLOAD_LIMIT) {\n      this._data = '';\n      this._hitLimit = true;\n    }\n  }\n\n  public end(success: boolean): boolean | Promise<boolean> {\n    let ret: boolean | Promise<boolean> = false;\n    if (this._hitLimit) {\n      ret = false;\n    } else if (success) {\n      ret = this._handler(this._data);\n      if (ret instanceof Promise) {\n        // need to hold data until `ret` got resolved\n        // dont care for errors, data will be freed anyway on next start\n        return ret.then(res => {\n          this._data = '';\n          this._hitLimit = false;\n          return res;\n        });\n      }\n    }\n    this._data = '';\n    this._hitLimit = false;\n    return ret;\n  }\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\nimport { IParams, ParamsArray } from 'common/parser/Types';\n\n// max value supported for a single param/subparam (clamped to positive int32 range)\nconst MAX_VALUE = 0x7FFFFFFF;\n// max allowed subparams for a single sequence (hardcoded limitation)\nconst MAX_SUBPARAMS = 256;\n\n/**\n * Params storage class.\n * This type is used by the parser to accumulate sequence parameters and sub parameters\n * and transmit them to the input handler actions.\n *\n * NOTES:\n *  - params object for action handlers is borrowed, use `.toArray` or `.clone` to get a copy\n *  - never read beyond `params.length - 1` (likely to contain arbitrary data)\n *  - `.getSubParams` returns a borrowed typed array, use `.getSubParamsAll` for cloned sub params\n *  - hardcoded limitations:\n *    - max. value for a single (sub) param is 2^31 - 1 (greater values are clamped to that)\n *    - max. 256 sub params possible\n *    - negative values are not allowed beside -1 (placeholder for default value)\n *\n * About ZDM (Zero Default Mode):\n * ZDM is not orchestrated by this class. If the parser is in ZDM,\n * it should add 0 for empty params, otherwise -1. This does not apply\n * to subparams, empty subparams should always be added with -1.\n */\nexport class Params implements IParams {\n  // params store and length\n  public params: Int32Array;\n  public length: number;\n\n  // sub params store and length\n  protected _subParams: Int32Array;\n  protected _subParamsLength: number;\n\n  // sub params offsets from param: param idx --> [start, end] offset\n  private _subParamsIdx: Uint16Array;\n  private _rejectDigits: boolean;\n  private _rejectSubDigits: boolean;\n  private _digitIsSub: boolean;\n\n  /**\n   * Create a `Params` type from JS array representation.\n   */\n  public static fromArray(values: ParamsArray): Params {\n    const params = new Params();\n    if (!values.length) {\n      return params;\n    }\n    // skip leading sub params\n    for (let i = (Array.isArray(values[0])) ? 1 : 0; i < values.length; ++i) {\n      const value = values[i];\n      if (Array.isArray(value)) {\n        for (let k = 0; k < value.length; ++k) {\n          params.addSubParam(value[k]);\n        }\n      } else {\n        params.addParam(value);\n      }\n    }\n    return params;\n  }\n\n  /**\n   * @param maxLength max length of storable parameters\n   * @param maxSubParamsLength max length of storable sub parameters\n   */\n  constructor(public maxLength: number = 32, public maxSubParamsLength: number = 32) {\n    if (maxSubParamsLength > MAX_SUBPARAMS) {\n      throw new Error('maxSubParamsLength must not be greater than 256');\n    }\n    this.params = new Int32Array(maxLength);\n    this.length = 0;\n    this._subParams = new Int32Array(maxSubParamsLength);\n    this._subParamsLength = 0;\n    this._subParamsIdx = new Uint16Array(maxLength);\n    this._rejectDigits = false;\n    this._rejectSubDigits = false;\n    this._digitIsSub = false;\n  }\n\n  /**\n   * Clone object.\n   */\n  public clone(): Params {\n    const newParams = new Params(this.maxLength, this.maxSubParamsLength);\n    newParams.params.set(this.params);\n    newParams.length = this.length;\n    newParams._subParams.set(this._subParams);\n    newParams._subParamsLength = this._subParamsLength;\n    newParams._subParamsIdx.set(this._subParamsIdx);\n    newParams._rejectDigits = this._rejectDigits;\n    newParams._rejectSubDigits = this._rejectSubDigits;\n    newParams._digitIsSub = this._digitIsSub;\n    return newParams;\n  }\n\n  /**\n   * Get a JS array representation of the current parameters and sub parameters.\n   * The array is structured as follows:\n   *    sequence: \"1;2:3:4;5::6\"\n   *    array   : [1, 2, [3, 4], 5, [-1, 6]]\n   */\n  public toArray(): ParamsArray {\n    const res: ParamsArray = [];\n    for (let i = 0; i < this.length; ++i) {\n      res.push(this.params[i]);\n      const start = this._subParamsIdx[i] >> 8;\n      const end = this._subParamsIdx[i] & 0xFF;\n      if (end - start > 0) {\n        res.push(Array.prototype.slice.call(this._subParams, start, end));\n      }\n    }\n    return res;\n  }\n\n  /**\n   * Reset to initial empty state.\n   */\n  public reset(): void {\n    this.length = 0;\n    this._subParamsLength = 0;\n    this._rejectDigits = false;\n    this._rejectSubDigits = false;\n    this._digitIsSub = false;\n  }\n\n  /**\n   * Add a parameter value.\n   * `Params` only stores up to `maxLength` parameters, any later\n   * parameter will be ignored.\n   * Note: VT devices only stored up to 16 values, xterm seems to\n   * store up to 30.\n   */\n  public addParam(value: number): void {\n    this._digitIsSub = false;\n    if (this.length >= this.maxLength) {\n      this._rejectDigits = true;\n      return;\n    }\n    if (value < -1) {\n      throw new Error('values lesser than -1 are not allowed');\n    }\n    this._subParamsIdx[this.length] = this._subParamsLength << 8 | this._subParamsLength;\n    this.params[this.length++] = value > MAX_VALUE ? MAX_VALUE : value;\n  }\n\n  /**\n   * Add a sub parameter value.\n   * The sub parameter is automatically associated with the last parameter value.\n   * Thus it is not possible to add a subparameter without any parameter added yet.\n   * `Params` only stores up to `subParamsLength` sub parameters, any later\n   * sub parameter will be ignored.\n   */\n  public addSubParam(value: number): void {\n    this._digitIsSub = true;\n    if (!this.length) {\n      return;\n    }\n    if (this._rejectDigits || this._subParamsLength >= this.maxSubParamsLength) {\n      this._rejectSubDigits = true;\n      return;\n    }\n    if (value < -1) {\n      throw new Error('values lesser than -1 are not allowed');\n    }\n    this._subParams[this._subParamsLength++] = value > MAX_VALUE ? MAX_VALUE : value;\n    this._subParamsIdx[this.length - 1]++;\n  }\n\n  /**\n   * Whether parameter at index `idx` has sub parameters.\n   */\n  public hasSubParams(idx: number): boolean {\n    return ((this._subParamsIdx[idx] & 0xFF) - (this._subParamsIdx[idx] >> 8) > 0);\n  }\n\n  /**\n   * Return sub parameters for parameter at index `idx`.\n   * Note: The values are borrowed, thus you need to copy\n   * the values if you need to hold them in nonlocal scope.\n   */\n  public getSubParams(idx: number): Int32Array | null {\n    const start = this._subParamsIdx[idx] >> 8;\n    const end = this._subParamsIdx[idx] & 0xFF;\n    if (end - start > 0) {\n      return this._subParams.subarray(start, end);\n    }\n    return null;\n  }\n\n  /**\n   * Return all sub parameters as {idx: subparams} mapping.\n   * Note: The values are not borrowed.\n   */\n  public getSubParamsAll(): {[idx: number]: Int32Array} {\n    const result: {[idx: number]: Int32Array} = {};\n    for (let i = 0; i < this.length; ++i) {\n      const start = this._subParamsIdx[i] >> 8;\n      const end = this._subParamsIdx[i] & 0xFF;\n      if (end - start > 0) {\n        result[i] = this._subParams.slice(start, end);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Add a single digit value to current parameter.\n   * This is used by the parser to account digits on a char by char basis.\n   */\n  public addDigit(value: number): void {\n    let length;\n    if (this._rejectDigits\n      || !(length = this._digitIsSub ? this._subParamsLength : this.length)\n      || (this._digitIsSub && this._rejectSubDigits)\n    ) {\n      return;\n    }\n\n    const store = this._digitIsSub ? this._subParams : this.params;\n    const cur = store[length - 1];\n    store[length - 1] = ~cur ? Math.min(cur * 10 + value, MAX_VALUE) : value;\n  }\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ITerminalAddon, IDisposable, Terminal } from 'xterm';\n\nexport interface ILoadedAddon {\n  instance: ITerminalAddon;\n  dispose: () => void;\n  isDisposed: boolean;\n}\n\nexport class AddonManager implements IDisposable {\n  protected _addons: ILoadedAddon[] = [];\n\n  constructor() {\n  }\n\n  public dispose(): void {\n    for (let i = this._addons.length - 1; i >= 0; i--) {\n      this._addons[i].instance.dispose();\n    }\n  }\n\n  public loadAddon(terminal: Terminal, instance: ITerminalAddon): void {\n    const loadedAddon: ILoadedAddon = {\n      instance,\n      dispose: instance.dispose,\n      isDisposed: false\n    };\n    this._addons.push(loadedAddon);\n    instance.dispose = () => this._wrappedAddonDispose(loadedAddon);\n    instance.activate(terminal as any);\n  }\n\n  private _wrappedAddonDispose(loadedAddon: ILoadedAddon): void {\n    if (loadedAddon.isDisposed) {\n      // Do nothing if already disposed\n      return;\n    }\n    let index = -1;\n    for (let i = 0; i < this._addons.length; i++) {\n      if (this._addons[i] === loadedAddon) {\n        index = i;\n        break;\n      }\n    }\n    if (index === -1) {\n      throw new Error('Could not dispose an addon that has not been loaded');\n    }\n    loadedAddon.isDisposed = true;\n    loadedAddon.dispose.apply(loadedAddon.instance);\n    this._addons.splice(index, 1);\n  }\n}\n","/**\n * Copyright (c) 2021 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IBuffer as IBufferApi, IBufferLine as IBufferLineApi, IBufferCell as IBufferCellApi } from 'xterm';\nimport { IBuffer } from 'common/buffer/Types';\nimport { BufferLineApiView } from 'common/public/BufferLineApiView';\nimport { CellData } from 'common/buffer/CellData';\n\nexport class BufferApiView implements IBufferApi {\n  constructor(\n    private _buffer: IBuffer,\n    public readonly type: 'normal' | 'alternate'\n  ) { }\n\n  public init(buffer: IBuffer): BufferApiView {\n    this._buffer = buffer;\n    return this;\n  }\n\n  public get cursorY(): number { return this._buffer.y; }\n  public get cursorX(): number { return this._buffer.x; }\n  public get viewportY(): number { return this._buffer.ydisp; }\n  public get baseY(): number { return this._buffer.ybase; }\n  public get length(): number { return this._buffer.lines.length; }\n  public getLine(y: number): IBufferLineApi | undefined {\n    const line = this._buffer.lines.get(y);\n    if (!line) {\n      return undefined;\n    }\n    return new BufferLineApiView(line);\n  }\n  public getNullCell(): IBufferCellApi { return new CellData(); }\n}\n","/**\n * Copyright (c) 2021 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { CellData } from 'common/buffer/CellData';\nimport { IBufferLine, ICellData } from 'common/Types';\nimport { IBufferCell as IBufferCellApi, IBufferLine as IBufferLineApi } from 'xterm';\n\nexport class BufferLineApiView implements IBufferLineApi {\n  constructor(private _line: IBufferLine) { }\n\n  public get isWrapped(): boolean { return this._line.isWrapped; }\n  public get length(): number { return this._line.length; }\n  public getCell(x: number, cell?: IBufferCellApi): IBufferCellApi | undefined {\n    if (x < 0 || x >= this._line.length) {\n      return undefined;\n    }\n\n    if (cell) {\n      this._line.loadCell(x, cell as ICellData);\n      return cell;\n    }\n    return this._line.loadCell(x, new CellData());\n  }\n  public translateToString(trimRight?: boolean, startColumn?: number, endColumn?: number): string {\n    return this._line.translateToString(trimRight, startColumn, endColumn);\n  }\n}\n","/**\n * Copyright (c) 2021 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IBuffer as IBufferApi, IBufferNamespace as IBufferNamespaceApi } from 'xterm';\nimport { BufferApiView } from 'common/public/BufferApiView';\nimport { EventEmitter } from 'common/EventEmitter';\nimport { ICoreTerminal } from 'common/Types';\n\nexport class BufferNamespaceApi implements IBufferNamespaceApi {\n  private _normal: BufferApiView;\n  private _alternate: BufferApiView;\n\n  private readonly _onBufferChange = new EventEmitter<IBufferApi>();\n  public readonly onBufferChange = this._onBufferChange.event;\n\n  constructor(private _core: ICoreTerminal) {\n    this._normal = new BufferApiView(this._core.buffers.normal, 'normal');\n    this._alternate = new BufferApiView(this._core.buffers.alt, 'alternate');\n    this._core.buffers.onBufferActivate(() => this._onBufferChange.fire(this.active));\n  }\n  public get active(): IBufferApi {\n    if (this._core.buffers.active === this._core.buffers.normal) { return this.normal; }\n    if (this._core.buffers.active === this._core.buffers.alt) { return this.alternate; }\n    throw new Error('Active buffer is neither normal nor alternate');\n  }\n  public get normal(): IBufferApi {\n    return this._normal.init(this._core.buffers.normal);\n  }\n  public get alternate(): IBufferApi {\n    return this._alternate.init(this._core.buffers.alt);\n  }\n}\n","/**\n * Copyright (c) 2021 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IParams } from 'common/parser/Types';\nimport { IDisposable, IFunctionIdentifier, IParser } from 'xterm';\nimport { ICoreTerminal } from 'common/Types';\n\nexport class ParserApi implements IParser {\n  constructor(private _core: ICoreTerminal) { }\n\n  public registerCsiHandler(id: IFunctionIdentifier, callback: (params: (number | number[])[]) => boolean | Promise<boolean>): IDisposable {\n    return this._core.registerCsiHandler(id, (params: IParams) => callback(params.toArray()));\n  }\n  public addCsiHandler(id: IFunctionIdentifier, callback: (params: (number | number[])[]) => boolean | Promise<boolean>): IDisposable {\n    return this.registerCsiHandler(id, callback);\n  }\n  public registerDcsHandler(id: IFunctionIdentifier, callback: (data: string, param: (number | number[])[]) => boolean | Promise<boolean>): IDisposable {\n    return this._core.registerDcsHandler(id, (data: string, params: IParams) => callback(data, params.toArray()));\n  }\n  public addDcsHandler(id: IFunctionIdentifier, callback: (data: string, param: (number | number[])[]) => boolean | Promise<boolean>): IDisposable {\n    return this.registerDcsHandler(id, callback);\n  }\n  public registerEscHandler(id: IFunctionIdentifier, handler: () => boolean | Promise<boolean>): IDisposable {\n    return this._core.registerEscHandler(id, handler);\n  }\n  public addEscHandler(id: IFunctionIdentifier, handler: () => boolean | Promise<boolean>): IDisposable {\n    return this.registerEscHandler(id, handler);\n  }\n  public registerOscHandler(ident: number, callback: (data: string) => boolean | Promise<boolean>): IDisposable {\n    return this._core.registerOscHandler(ident, callback);\n  }\n  public addOscHandler(ident: number, callback: (data: string) => boolean | Promise<boolean>): IDisposable {\n    return this.registerOscHandler(ident, callback);\n  }\n}\n","/**\n * Copyright (c) 2021 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICoreTerminal } from 'common/Types';\nimport { IUnicodeHandling, IUnicodeVersionProvider } from 'xterm';\n\nexport class UnicodeApi implements IUnicodeHandling {\n  constructor(private _core: ICoreTerminal) { }\n\n  public register(provider: IUnicodeVersionProvider): void {\n    this._core.unicodeService.register(provider);\n  }\n\n  public get versions(): string[] {\n    return this._core.unicodeService.versions;\n  }\n\n  public get activeVersion(): string {\n    return this._core.unicodeService.activeVersion;\n  }\n\n  public set activeVersion(version: string) {\n    this._core.unicodeService.activeVersion = version;\n  }\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IBufferService, IOptionsService } from 'common/services/Services';\nimport { BufferSet } from 'common/buffer/BufferSet';\nimport { IBufferSet, IBuffer } from 'common/buffer/Types';\nimport { EventEmitter, IEventEmitter, IEvent } from 'common/EventEmitter';\nimport { Disposable } from 'common/Lifecycle';\nimport { IAttributeData, IBufferLine, ScrollSource } from 'common/Types';\n\nexport const MINIMUM_COLS = 2; // Less than 2 can mess with wide chars\nexport const MINIMUM_ROWS = 1;\n\nexport class BufferService extends Disposable implements IBufferService {\n  public serviceBrand: any;\n\n  public cols: number;\n  public rows: number;\n  public buffers: IBufferSet;\n  /** Whether the user is scrolling (locks the scroll position) */\n  public isUserScrolling: boolean = false;\n\n  private readonly _onResize = this.register(new EventEmitter<{ cols: number, rows: number }>());\n  public readonly onResize = this._onResize.event;\n  private readonly _onScroll = this.register(new EventEmitter<number>());\n  public readonly onScroll = this._onScroll.event;\n\n  public get buffer(): IBuffer { return this.buffers.active; }\n\n  /** An IBufferline to clone/copy from for new blank lines */\n  private _cachedBlankLine: IBufferLine | undefined;\n\n  constructor(@IOptionsService optionsService: IOptionsService) {\n    super();\n    this.cols = Math.max(optionsService.rawOptions.cols || 0, MINIMUM_COLS);\n    this.rows = Math.max(optionsService.rawOptions.rows || 0, MINIMUM_ROWS);\n    this.buffers = this.register(new BufferSet(optionsService, this));\n  }\n\n  public resize(cols: number, rows: number): void {\n    this.cols = cols;\n    this.rows = rows;\n    this.buffers.resize(cols, rows);\n    // TODO: This doesn't fire when scrollback changes - add a resize event to BufferSet and forward event\n    this._onResize.fire({ cols, rows });\n  }\n\n  public reset(): void {\n    this.buffers.reset();\n    this.isUserScrolling = false;\n  }\n\n  /**\n   * Scroll the terminal down 1 row, creating a blank line.\n   * @param eraseAttr The attribute data to use the for blank line.\n   * @param isWrapped Whether the new line is wrapped from the previous line.\n   */\n  public scroll(eraseAttr: IAttributeData, isWrapped: boolean = false): void {\n    const buffer = this.buffer;\n\n    let newLine: IBufferLine | undefined;\n    newLine = this._cachedBlankLine;\n    if (!newLine || newLine.length !== this.cols || newLine.getFg(0) !== eraseAttr.fg || newLine.getBg(0) !== eraseAttr.bg) {\n      newLine = buffer.getBlankLine(eraseAttr, isWrapped);\n      this._cachedBlankLine = newLine;\n    }\n    newLine.isWrapped = isWrapped;\n\n    const topRow = buffer.ybase + buffer.scrollTop;\n    const bottomRow = buffer.ybase + buffer.scrollBottom;\n\n    if (buffer.scrollTop === 0) {\n      // Determine whether the buffer is going to be trimmed after insertion.\n      const willBufferBeTrimmed = buffer.lines.isFull;\n\n      // Insert the line using the fastest method\n      if (bottomRow === buffer.lines.length - 1) {\n        if (willBufferBeTrimmed) {\n          buffer.lines.recycle().copyFrom(newLine);\n        } else {\n          buffer.lines.push(newLine.clone());\n        }\n      } else {\n        buffer.lines.splice(bottomRow + 1, 0, newLine.clone());\n      }\n\n      // Only adjust ybase and ydisp when the buffer is not trimmed\n      if (!willBufferBeTrimmed) {\n        buffer.ybase++;\n        // Only scroll the ydisp with ybase if the user has not scrolled up\n        if (!this.isUserScrolling) {\n          buffer.ydisp++;\n        }\n      } else {\n        // When the buffer is full and the user has scrolled up, keep the text\n        // stable unless ydisp is right at the top\n        if (this.isUserScrolling) {\n          buffer.ydisp = Math.max(buffer.ydisp - 1, 0);\n        }\n      }\n    } else {\n      // scrollTop is non-zero which means no line will be going to the\n      // scrollback, instead we can just shift them in-place.\n      const scrollRegionHeight = bottomRow - topRow + 1 /* as it's zero-based */;\n      buffer.lines.shiftElements(topRow + 1, scrollRegionHeight - 1, -1);\n      buffer.lines.set(bottomRow, newLine.clone());\n    }\n\n    // Move the viewport to the bottom of the buffer unless the user is\n    // scrolling.\n    if (!this.isUserScrolling) {\n      buffer.ydisp = buffer.ybase;\n    }\n\n    this._onScroll.fire(buffer.ydisp);\n  }\n\n  /**\n   * Scroll the display of the terminal\n   * @param disp The number of lines to scroll down (negative scroll up).\n   * @param suppressScrollEvent Don't emit the scroll event as scrollLines. This is used\n   * to avoid unwanted events being handled by the viewport when the event was triggered from the\n   * viewport originally.\n   */\n  public scrollLines(disp: number, suppressScrollEvent?: boolean, source?: ScrollSource): void {\n    const buffer = this.buffer;\n    if (disp < 0) {\n      if (buffer.ydisp === 0) {\n        return;\n      }\n      this.isUserScrolling = true;\n    } else if (disp + buffer.ydisp >= buffer.ybase) {\n      this.isUserScrolling = false;\n    }\n\n    const oldYdisp = buffer.ydisp;\n    buffer.ydisp = Math.max(Math.min(buffer.ydisp + disp, buffer.ybase), 0);\n\n    // No change occurred, don't trigger scroll/refresh\n    if (oldYdisp === buffer.ydisp) {\n      return;\n    }\n\n    if (!suppressScrollEvent) {\n      this._onScroll.fire(buffer.ydisp);\n    }\n  }\n\n  /**\n   * Scroll the display of the terminal by a number of pages.\n   * @param pageCount The number of pages to scroll (negative scrolls up).\n   */\n  public scrollPages(pageCount: number): void {\n    this.scrollLines(pageCount * (this.rows - 1));\n  }\n\n  /**\n   * Scrolls the display of the terminal to the top.\n   */\n  public scrollToTop(): void {\n    this.scrollLines(-this.buffer.ydisp);\n  }\n\n  /**\n   * Scrolls the display of the terminal to the bottom.\n   */\n  public scrollToBottom(): void {\n    this.scrollLines(this.buffer.ybase - this.buffer.ydisp);\n  }\n\n  public scrollToLine(line: number): void {\n    const scrollAmount = line - this.buffer.ydisp;\n    if (scrollAmount !== 0) {\n      this.scrollLines(scrollAmount);\n    }\n  }\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICharsetService } from 'common/services/Services';\nimport { ICharset } from 'common/Types';\n\nexport class CharsetService implements ICharsetService {\n  public serviceBrand: any;\n\n  public charset: ICharset | undefined;\n  public glevel: number = 0;\n\n  private _charsets: (ICharset | undefined)[] = [];\n\n  public reset(): void {\n    this.charset = undefined;\n    this._charsets = [];\n    this.glevel = 0;\n  }\n\n  public setgLevel(g: number): void {\n    this.glevel = g;\n    this.charset = this._charsets[g];\n  }\n\n  public setgCharset(g: number, charset: ICharset | undefined): void {\n    this._charsets[g] = charset;\n    if (this.glevel === g) {\n      this.charset = charset;\n    }\n  }\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\nimport { IBufferService, ICoreService, ICoreMouseService } from 'common/services/Services';\nimport { EventEmitter, IEvent } from 'common/EventEmitter';\nimport { ICoreMouseProtocol, ICoreMouseEvent, CoreMouseEncoding, CoreMouseEventType, CoreMouseButton, CoreMouseAction } from 'common/Types';\nimport { Disposable } from 'common/Lifecycle';\n\n/**\n * Supported default protocols.\n */\nconst DEFAULT_PROTOCOLS: { [key: string]: ICoreMouseProtocol } = {\n  /**\n   * NONE\n   * Events: none\n   * Modifiers: none\n   */\n  NONE: {\n    events: CoreMouseEventType.NONE,\n    restrict: () => false\n  },\n  /**\n   * X10\n   * Events: mousedown\n   * Modifiers: none\n   */\n  X10: {\n    events: CoreMouseEventType.DOWN,\n    restrict: (e: ICoreMouseEvent) => {\n      // no wheel, no move, no up\n      if (e.button === CoreMouseButton.WHEEL || e.action !== CoreMouseAction.DOWN) {\n        return false;\n      }\n      // no modifiers\n      e.ctrl = false;\n      e.alt = false;\n      e.shift = false;\n      return true;\n    }\n  },\n  /**\n   * VT200\n   * Events: mousedown / mouseup / wheel\n   * Modifiers: all\n   */\n  VT200: {\n    events: CoreMouseEventType.DOWN | CoreMouseEventType.UP | CoreMouseEventType.WHEEL,\n    restrict: (e: ICoreMouseEvent) => {\n      // no move\n      if (e.action === CoreMouseAction.MOVE) {\n        return false;\n      }\n      return true;\n    }\n  },\n  /**\n   * DRAG\n   * Events: mousedown / mouseup / wheel / mousedrag\n   * Modifiers: all\n   */\n  DRAG: {\n    events: CoreMouseEventType.DOWN | CoreMouseEventType.UP | CoreMouseEventType.WHEEL | CoreMouseEventType.DRAG,\n    restrict: (e: ICoreMouseEvent) => {\n      // no move without button\n      if (e.action === CoreMouseAction.MOVE && e.button === CoreMouseButton.NONE) {\n        return false;\n      }\n      return true;\n    }\n  },\n  /**\n   * ANY\n   * Events: all mouse related events\n   * Modifiers: all\n   */\n  ANY: {\n    events:\n      CoreMouseEventType.DOWN | CoreMouseEventType.UP | CoreMouseEventType.WHEEL\n      | CoreMouseEventType.DRAG | CoreMouseEventType.MOVE,\n    restrict: (e: ICoreMouseEvent) => true\n  }\n};\n\nconst enum Modifiers {\n  SHIFT = 4,\n  ALT = 8,\n  CTRL = 16\n}\n\n// helper for default encoders to generate the event code.\nfunction eventCode(e: ICoreMouseEvent, isSGR: boolean): number {\n  let code = (e.ctrl ? Modifiers.CTRL : 0) | (e.shift ? Modifiers.SHIFT : 0) | (e.alt ? Modifiers.ALT : 0);\n  if (e.button === CoreMouseButton.WHEEL) {\n    code |= 64;\n    code |= e.action;\n  } else {\n    code |= e.button & 3;\n    if (e.button & 4) {\n      code |= 64;\n    }\n    if (e.button & 8) {\n      code |= 128;\n    }\n    if (e.action === CoreMouseAction.MOVE) {\n      code |= CoreMouseAction.MOVE;\n    } else if (e.action === CoreMouseAction.UP && !isSGR) {\n      // special case - only SGR can report button on release\n      // all others have to go with NONE\n      code |= CoreMouseButton.NONE;\n    }\n  }\n  return code;\n}\n\nconst S = String.fromCharCode;\n\n/**\n * Supported default encodings.\n */\nconst DEFAULT_ENCODINGS: { [key: string]: CoreMouseEncoding } = {\n  /**\n   * DEFAULT - CSI M Pb Px Py\n   * Single byte encoding for coords and event code.\n   * Can encode values up to 223 (1-based).\n   */\n  DEFAULT: (e: ICoreMouseEvent) => {\n    const params = [eventCode(e, false) + 32, e.col + 32, e.row + 32];\n    // supress mouse report if we exceed addressible range\n    // Note this is handled differently by emulators\n    // - xterm:         sends 0;0 coords instead\n    // - vte, konsole:  no report\n    if (params[0] > 255 || params[1] > 255 || params[2] > 255) {\n      return '';\n    }\n    return `\\x1b[M${S(params[0])}${S(params[1])}${S(params[2])}`;\n  },\n  /**\n   * SGR - CSI < Pb ; Px ; Py M|m\n   * No encoding limitation.\n   * Can report button on release and works with a well formed sequence.\n   */\n  SGR: (e: ICoreMouseEvent) => {\n    const final = (e.action === CoreMouseAction.UP && e.button !== CoreMouseButton.WHEEL) ? 'm' : 'M';\n    return `\\x1b[<${eventCode(e, true)};${e.col};${e.row}${final}`;\n  },\n  SGR_PIXELS: (e: ICoreMouseEvent) => {\n    const final = (e.action === CoreMouseAction.UP && e.button !== CoreMouseButton.WHEEL) ? 'm' : 'M';\n    return `\\x1b[<${eventCode(e, true)};${e.x};${e.y}${final}`;\n  }\n};\n\n/**\n * CoreMouseService\n *\n * Provides mouse tracking reports with different protocols and encodings.\n *  - protocols: NONE (default), X10, VT200, DRAG, ANY\n *  - encodings: DEFAULT, SGR (UTF8, URXVT removed in #2507)\n *\n * Custom protocols/encodings can be added by `addProtocol` / `addEncoding`.\n * To activate a protocol/encoding, set `activeProtocol` / `activeEncoding`.\n * Switching a protocol will send a notification event `onProtocolChange`\n * with a list of needed events to track.\n *\n * The service handles the mouse tracking state and decides whether to send\n * a tracking report to the backend based on protocol and encoding limitations.\n * To send a mouse event call `triggerMouseEvent`.\n */\nexport class CoreMouseService extends Disposable implements ICoreMouseService {\n  private _protocols: { [name: string]: ICoreMouseProtocol } = {};\n  private _encodings: { [name: string]: CoreMouseEncoding } = {};\n  private _activeProtocol: string = '';\n  private _activeEncoding: string = '';\n  private _lastEvent: ICoreMouseEvent | null = null;\n\n  private readonly _onProtocolChange = this.register(new EventEmitter<CoreMouseEventType>());\n  public readonly onProtocolChange =  this._onProtocolChange.event;\n\n  constructor(\n    @IBufferService private readonly _bufferService: IBufferService,\n    @ICoreService private readonly _coreService: ICoreService\n  ) {\n    super();\n    // register default protocols and encodings\n    for (const name of Object.keys(DEFAULT_PROTOCOLS)) this.addProtocol(name, DEFAULT_PROTOCOLS[name]);\n    for (const name of Object.keys(DEFAULT_ENCODINGS)) this.addEncoding(name, DEFAULT_ENCODINGS[name]);\n    // call reset to set defaults\n    this.reset();\n  }\n\n  public addProtocol(name: string, protocol: ICoreMouseProtocol): void {\n    this._protocols[name] = protocol;\n  }\n\n  public addEncoding(name: string, encoding: CoreMouseEncoding): void {\n    this._encodings[name] = encoding;\n  }\n\n  public get activeProtocol(): string {\n    return this._activeProtocol;\n  }\n\n  public get areMouseEventsActive(): boolean {\n    return this._protocols[this._activeProtocol].events !== 0;\n  }\n\n  public set activeProtocol(name: string) {\n    if (!this._protocols[name]) {\n      throw new Error(`unknown protocol \"${name}\"`);\n    }\n    this._activeProtocol = name;\n    this._onProtocolChange.fire(this._protocols[name].events);\n  }\n\n  public get activeEncoding(): string {\n    return this._activeEncoding;\n  }\n\n  public set activeEncoding(name: string) {\n    if (!this._encodings[name]) {\n      throw new Error(`unknown encoding \"${name}\"`);\n    }\n    this._activeEncoding = name;\n  }\n\n  public reset(): void {\n    this.activeProtocol = 'NONE';\n    this.activeEncoding = 'DEFAULT';\n    this._lastEvent = null;\n  }\n\n  /**\n   * Triggers a mouse event to be sent.\n   *\n   * Returns true if the event passed all protocol restrictions and a report\n   * was sent, otherwise false. The return value may be used to decide whether\n   * the default event action in the bowser component should be omitted.\n   *\n   * Note: The method will change values of the given event object\n   * to fullfill protocol and encoding restrictions.\n   */\n  public triggerMouseEvent(e: ICoreMouseEvent): boolean {\n    // range check for col/row\n    if (e.col < 0 || e.col >= this._bufferService.cols\n      || e.row < 0 || e.row >= this._bufferService.rows) {\n      return false;\n    }\n\n    // filter nonsense combinations of button + action\n    if (e.button === CoreMouseButton.WHEEL && e.action === CoreMouseAction.MOVE) {\n      return false;\n    }\n    if (e.button === CoreMouseButton.NONE && e.action !== CoreMouseAction.MOVE) {\n      return false;\n    }\n    if (e.button !== CoreMouseButton.WHEEL && (e.action === CoreMouseAction.LEFT || e.action === CoreMouseAction.RIGHT)) {\n      return false;\n    }\n\n    // report 1-based coords\n    e.col++;\n    e.row++;\n\n    // debounce move events at grid or pixel level\n    if (e.action === CoreMouseAction.MOVE\n      && this._lastEvent\n      && this._equalEvents(this._lastEvent, e, this._activeEncoding === 'SGR_PIXELS')\n    ) {\n      return false;\n    }\n\n    // apply protocol restrictions\n    if (!this._protocols[this._activeProtocol].restrict(e)) {\n      return false;\n    }\n\n    // encode report and send\n    const report = this._encodings[this._activeEncoding](e);\n    if (report) {\n      // always send DEFAULT as binary data\n      if (this._activeEncoding === 'DEFAULT') {\n        this._coreService.triggerBinaryEvent(report);\n      } else {\n        this._coreService.triggerDataEvent(report, true);\n      }\n    }\n\n    this._lastEvent = e;\n\n    return true;\n  }\n\n  public explainEvents(events: CoreMouseEventType): { [event: string]: boolean } {\n    return {\n      down: !!(events & CoreMouseEventType.DOWN),\n      up: !!(events & CoreMouseEventType.UP),\n      drag: !!(events & CoreMouseEventType.DRAG),\n      move: !!(events & CoreMouseEventType.MOVE),\n      wheel: !!(events & CoreMouseEventType.WHEEL)\n    };\n  }\n\n  private _equalEvents(e1: ICoreMouseEvent, e2: ICoreMouseEvent, pixels: boolean): boolean {\n    if (pixels) {\n      if (e1.x !== e2.x) return false;\n      if (e1.y !== e2.y) return false;\n    } else {\n      if (e1.col !== e2.col) return false;\n      if (e1.row !== e2.row) return false;\n    }\n    if (e1.button !== e2.button) return false;\n    if (e1.action !== e2.action) return false;\n    if (e1.ctrl !== e2.ctrl) return false;\n    if (e1.alt !== e2.alt) return false;\n    if (e1.shift !== e2.shift) return false;\n    return true;\n  }\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICoreService, ILogService, IOptionsService, IBufferService } from 'common/services/Services';\nimport { EventEmitter, IEvent } from 'common/EventEmitter';\nimport { IDecPrivateModes, IModes } from 'common/Types';\nimport { clone } from 'common/Clone';\nimport { Disposable } from 'common/Lifecycle';\n\nconst DEFAULT_MODES: IModes = Object.freeze({\n  insertMode: false\n});\n\nconst DEFAULT_DEC_PRIVATE_MODES: IDecPrivateModes = Object.freeze({\n  applicationCursorKeys: false,\n  applicationKeypad: false,\n  bracketedPasteMode: false,\n  origin: false,\n  reverseWraparound: false,\n  sendFocus: false,\n  wraparound: true // defaults: xterm - true, vt100 - false\n});\n\nexport class CoreService extends Disposable implements ICoreService {\n  public serviceBrand: any;\n\n  public isCursorInitialized: boolean = false;\n  public isCursorHidden: boolean = false;\n  public modes: IModes;\n  public decPrivateModes: IDecPrivateModes;\n\n  private readonly _onData = this.register(new EventEmitter<string>());\n  public readonly onData = this._onData.event;\n  private readonly _onUserInput = this.register(new EventEmitter<void>());\n  public readonly onUserInput = this._onUserInput.event;\n  private readonly _onBinary = this.register(new EventEmitter<string>());\n  public readonly onBinary = this._onBinary.event;\n  private readonly _onRequestScrollToBottom = this.register(new EventEmitter<void>());\n  public readonly onRequestScrollToBottom = this._onRequestScrollToBottom.event;\n\n  constructor(\n    @IBufferService private readonly _bufferService: IBufferService,\n    @ILogService private readonly _logService: ILogService,\n    @IOptionsService private readonly _optionsService: IOptionsService\n  ) {\n    super();\n    this.modes = clone(DEFAULT_MODES);\n    this.decPrivateModes = clone(DEFAULT_DEC_PRIVATE_MODES);\n  }\n\n  public reset(): void {\n    this.modes = clone(DEFAULT_MODES);\n    this.decPrivateModes = clone(DEFAULT_DEC_PRIVATE_MODES);\n  }\n\n  public triggerDataEvent(data: string, wasUserInput: boolean = false): void {\n    // Prevents all events to pty process if stdin is disabled\n    if (this._optionsService.rawOptions.disableStdin) {\n      return;\n    }\n\n    // Input is being sent to the terminal, the terminal should focus the prompt.\n    const buffer = this._bufferService.buffer;\n    if (wasUserInput && this._optionsService.rawOptions.scrollOnUserInput && buffer.ybase !== buffer.ydisp) {\n      this._onRequestScrollToBottom.fire();\n    }\n\n    // Fire onUserInput so listeners can react as well (eg. clear selection)\n    if (wasUserInput) {\n      this._onUserInput.fire();\n    }\n\n    // Fire onData API\n    this._logService.debug(`sending data \"${data}\"`, () => data.split('').map(e => e.charCodeAt(0)));\n    this._onData.fire(data);\n  }\n\n  public triggerBinaryEvent(data: string): void {\n    if (this._optionsService.rawOptions.disableStdin) {\n      return;\n    }\n    this._logService.debug(`sending binary \"${data}\"`, () => data.split('').map(e => e.charCodeAt(0)));\n    this._onBinary.fire(data);\n  }\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n *\n * This was heavily inspired from microsoft/vscode's dependency injection system (MIT).\n */\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IInstantiationService, IServiceIdentifier } from 'common/services/Services';\nimport { getServiceDependencies } from 'common/services/ServiceRegistry';\n\nexport class ServiceCollection {\n\n  private _entries = new Map<IServiceIdentifier<any>, any>();\n\n  constructor(...entries: [IServiceIdentifier<any>, any][]) {\n    for (const [id, service] of entries) {\n      this.set(id, service);\n    }\n  }\n\n  public set<T>(id: IServiceIdentifier<T>, instance: T): T {\n    const result = this._entries.get(id);\n    this._entries.set(id, instance);\n    return result;\n  }\n\n  public forEach(callback: (id: IServiceIdentifier<any>, instance: any) => any): void {\n    for (const [key, value] of this._entries.entries()) {\n      callback(key, value);\n    }\n  }\n\n  public has(id: IServiceIdentifier<any>): boolean {\n    return this._entries.has(id);\n  }\n\n  public get<T>(id: IServiceIdentifier<T>): T | undefined {\n    return this._entries.get(id);\n  }\n}\n\nexport class InstantiationService implements IInstantiationService {\n  public serviceBrand: undefined;\n\n  private readonly _services: ServiceCollection = new ServiceCollection();\n\n  constructor() {\n    this._services.set(IInstantiationService, this);\n  }\n\n  public setService<T>(id: IServiceIdentifier<T>, instance: T): void {\n    this._services.set(id, instance);\n  }\n\n  public getService<T>(id: IServiceIdentifier<T>): T | undefined {\n    return this._services.get(id);\n  }\n\n  public createInstance<T>(ctor: any, ...args: any[]): T {\n    const serviceDependencies = getServiceDependencies(ctor).sort((a, b) => a.index - b.index);\n\n    const serviceArgs: any[] = [];\n    for (const dependency of serviceDependencies) {\n      const service = this._services.get(dependency.id);\n      if (!service) {\n        throw new Error(`[createInstance] ${ctor.name} depends on UNKNOWN service ${dependency.id}.`);\n      }\n      serviceArgs.push(service);\n    }\n\n    const firstServiceArgPos = serviceDependencies.length > 0 ? serviceDependencies[0].index : args.length;\n\n    // check for argument mismatches, adjust static args if needed\n    if (args.length !== firstServiceArgPos) {\n      throw new Error(`[createInstance] First service dependency of ${ctor.name} at position ${firstServiceArgPos + 1} conflicts with ${args.length} static arguments`);\n    }\n\n    // now create the instance\n    return new ctor(...[...args, ...serviceArgs]);\n  }\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { Disposable } from 'common/Lifecycle';\nimport { ILogService, IOptionsService, LogLevelEnum } from 'common/services/Services';\n\ntype LogType = (message?: any, ...optionalParams: any[]) => void;\n\ninterface IConsole {\n  log: LogType;\n  error: LogType;\n  info: LogType;\n  trace: LogType;\n  warn: LogType;\n}\n\n// console is available on both node.js and browser contexts but the common\n// module doesn't depend on them so we need to explicitly declare it.\ndeclare const console: IConsole;\n\nconst optionsKeyToLogLevel: { [key: string]: LogLevelEnum } = {\n  debug: LogLevelEnum.DEBUG,\n  info: LogLevelEnum.INFO,\n  warn: LogLevelEnum.WARN,\n  error: LogLevelEnum.ERROR,\n  off: LogLevelEnum.OFF\n};\n\nconst LOG_PREFIX = 'xterm.js: ';\n\nexport class LogService extends Disposable implements ILogService {\n  public serviceBrand: any;\n\n  public logLevel: LogLevelEnum = LogLevelEnum.OFF;\n\n  constructor(\n    @IOptionsService private readonly _optionsService: IOptionsService\n  ) {\n    super();\n    this._updateLogLevel();\n    this.register(this._optionsService.onSpecificOptionChange('logLevel', () => this._updateLogLevel()));\n  }\n\n  private _updateLogLevel(): void {\n    this.logLevel = optionsKeyToLogLevel[this._optionsService.rawOptions.logLevel];\n  }\n\n  private _evalLazyOptionalParams(optionalParams: any[]): void {\n    for (let i = 0; i < optionalParams.length; i++) {\n      if (typeof optionalParams[i] === 'function') {\n        optionalParams[i] = optionalParams[i]();\n      }\n    }\n  }\n\n  private _log(type: LogType, message: string, optionalParams: any[]): void {\n    this._evalLazyOptionalParams(optionalParams);\n    type.call(console, LOG_PREFIX + message, ...optionalParams);\n  }\n\n  public debug(message: string, ...optionalParams: any[]): void {\n    if (this.logLevel <= LogLevelEnum.DEBUG) {\n      this._log(console.log, message, optionalParams);\n    }\n  }\n\n  public info(message: string, ...optionalParams: any[]): void {\n    if (this.logLevel <= LogLevelEnum.INFO) {\n      this._log(console.info, message, optionalParams);\n    }\n  }\n\n  public warn(message: string, ...optionalParams: any[]): void {\n    if (this.logLevel <= LogLevelEnum.WARN) {\n      this._log(console.warn, message, optionalParams);\n    }\n  }\n\n  public error(message: string, ...optionalParams: any[]): void {\n    if (this.logLevel <= LogLevelEnum.ERROR) {\n      this._log(console.error, message, optionalParams);\n    }\n  }\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IOptionsService, ITerminalOptions, FontWeight } from 'common/services/Services';\nimport { EventEmitter, IEvent } from 'common/EventEmitter';\nimport { isMac } from 'common/Platform';\nimport { CursorStyle, IDisposable } from 'common/Types';\nimport { Disposable } from 'common/Lifecycle';\n\nexport const DEFAULT_OPTIONS: Readonly<Required<ITerminalOptions>> = {\n  cols: 80,\n  rows: 24,\n  cursorBlink: false,\n  cursorStyle: 'block',\n  cursorWidth: 1,\n  customGlyphs: true,\n  drawBoldTextInBrightColors: true,\n  fastScrollModifier: 'alt',\n  fastScrollSensitivity: 5,\n  fontFamily: 'courier-new, courier, monospace',\n  fontSize: 15,\n  fontWeight: 'normal',\n  fontWeightBold: 'bold',\n  lineHeight: 1.0,\n  letterSpacing: 0,\n  linkHandler: null,\n  logLevel: 'info',\n  scrollback: 1000,\n  scrollOnUserInput: true,\n  scrollSensitivity: 1,\n  screenReaderMode: false,\n  smoothScrollDuration: 0,\n  macOptionIsMeta: false,\n  macOptionClickForcesSelection: false,\n  minimumContrastRatio: 1,\n  disableStdin: false,\n  allowProposedApi: false,\n  allowTransparency: false,\n  tabStopWidth: 8,\n  theme: {},\n  rightClickSelectsWord: isMac,\n  windowOptions: {},\n  windowsMode: false,\n  wordSeparator: ' ()[]{}\\',\"`',\n  altClickMovesCursor: true,\n  convertEol: false,\n  termName: 'xterm',\n  cancelEvents: false,\n  overviewRulerWidth: 0\n};\n\nconst FONT_WEIGHT_OPTIONS: Extract<FontWeight, string>[] = ['normal', 'bold', '100', '200', '300', '400', '500', '600', '700', '800', '900'];\n\nexport class OptionsService extends Disposable implements IOptionsService {\n  public serviceBrand: any;\n\n  public readonly rawOptions: Required<ITerminalOptions>;\n  public options: Required<ITerminalOptions>;\n\n  private readonly _onOptionChange = this.register(new EventEmitter<keyof ITerminalOptions>());\n  public readonly onOptionChange = this._onOptionChange.event;\n\n  constructor(options: Partial<ITerminalOptions>) {\n    super();\n    // set the default value of each option\n    const defaultOptions = { ...DEFAULT_OPTIONS };\n    for (const key in options) {\n      if (key in defaultOptions) {\n        try {\n          const newValue = options[key];\n          defaultOptions[key] = this._sanitizeAndValidateOption(key, newValue);\n        } catch (e) {\n          console.error(e);\n        }\n      }\n    }\n\n    // set up getters and setters for each option\n    this.rawOptions = defaultOptions;\n    this.options = { ... defaultOptions };\n    this._setupOptions();\n  }\n\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  public onSpecificOptionChange<T extends keyof ITerminalOptions>(key: T, listener: (value: ITerminalOptions[T]) => any): IDisposable {\n    return this.onOptionChange(eventKey => {\n      if (eventKey === key) {\n        listener(this.rawOptions[key]);\n      }\n    });\n  }\n\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  public onMultipleOptionChange(keys: (keyof ITerminalOptions)[], listener: () => any): IDisposable {\n    return this.onOptionChange(eventKey => {\n      if (keys.indexOf(eventKey) !== -1) {\n        listener();\n      }\n    });\n  }\n\n  private _setupOptions(): void {\n    const getter = (propName: string): any => {\n      if (!(propName in DEFAULT_OPTIONS)) {\n        throw new Error(`No option with key \"${propName}\"`);\n      }\n      return this.rawOptions[propName];\n    };\n\n    const setter = (propName: string, value: any): void => {\n      if (!(propName in DEFAULT_OPTIONS)) {\n        throw new Error(`No option with key \"${propName}\"`);\n      }\n\n      value = this._sanitizeAndValidateOption(propName, value);\n      // Don't fire an option change event if they didn't change\n      if (this.rawOptions[propName] !== value) {\n        this.rawOptions[propName] = value;\n        this._onOptionChange.fire(propName);\n      }\n    };\n\n    for (const propName in this.rawOptions) {\n      const desc = {\n        get: getter.bind(this, propName),\n        set: setter.bind(this, propName)\n      };\n      Object.defineProperty(this.options, propName, desc);\n    }\n  }\n\n  private _sanitizeAndValidateOption(key: string, value: any): any {\n    switch (key) {\n      case 'cursorStyle':\n        if (!value) {\n          value = DEFAULT_OPTIONS[key];\n        }\n        if (!isCursorStyle(value)) {\n          throw new Error(`\"${value}\" is not a valid value for ${key}`);\n        }\n        break;\n      case 'wordSeparator':\n        if (!value) {\n          value = DEFAULT_OPTIONS[key];\n        }\n        break;\n      case 'fontWeight':\n      case 'fontWeightBold':\n        if (typeof value === 'number' && 1 <= value && value <= 1000) {\n          // already valid numeric value\n          break;\n        }\n        value = FONT_WEIGHT_OPTIONS.includes(value) ? value : DEFAULT_OPTIONS[key];\n        break;\n      case 'cursorWidth':\n        value = Math.floor(value);\n        // Fall through for bounds check\n      case 'lineHeight':\n      case 'tabStopWidth':\n        if (value < 1) {\n          throw new Error(`${key} cannot be less than 1, value: ${value}`);\n        }\n        break;\n      case 'minimumContrastRatio':\n        value = Math.max(1, Math.min(21, Math.round(value * 10) / 10));\n        break;\n      case 'scrollback':\n        value = Math.min(value, 4294967295);\n        if (value < 0) {\n          throw new Error(`${key} cannot be less than 0, value: ${value}`);\n        }\n        break;\n      case 'fastScrollSensitivity':\n      case 'scrollSensitivity':\n        if (value <= 0) {\n          throw new Error(`${key} cannot be less than or equal to 0, value: ${value}`);\n        }\n      case 'rows':\n      case 'cols':\n        if (!value && value !== 0) {\n          throw new Error(`${key} must be numeric, value: ${value}`);\n        }\n        break;\n    }\n    return value;\n  }\n}\n\nfunction isCursorStyle(value: unknown): value is CursorStyle {\n  return value === 'block' || value === 'underline' || value === 'bar';\n}\n","/**\n * Copyright (c) 2022 The xterm.js authors. All rights reserved.\n * @license MIT\n */\nimport { IBufferService, IOscLinkService } from 'common/services/Services';\nimport { IMarker, IOscLinkData } from 'common/Types';\n\nexport class OscLinkService implements IOscLinkService {\n  public serviceBrand: any;\n\n  private _nextId = 1;\n\n  /**\n   * A map of the link key to link entry. This is used to add additional lines to links with ids.\n   */\n  private _entriesWithId: Map<string, IOscLinkEntryWithId> = new Map();\n\n  /**\n   * A map of the link id to the link entry. The \"link id\" (number) which is the numberic\n   * representation of a unique link should not be confused with \"id\" (string) which comes in with\n   * `id=` in the OSC link's properties.\n   */\n  private _dataByLinkId: Map<number, IOscLinkEntryNoId | IOscLinkEntryWithId> = new Map();\n\n  constructor(\n    @IBufferService private readonly _bufferService: IBufferService\n  ) {\n  }\n\n  public registerLink(data: IOscLinkData): number {\n    const buffer = this._bufferService.buffer;\n\n    // Links with no id will only ever be registered a single time\n    if (data.id === undefined) {\n      const marker = buffer.addMarker(buffer.ybase + buffer.y);\n      const entry: IOscLinkEntryNoId = {\n        data,\n        id: this._nextId++,\n        lines: [marker]\n      };\n      marker.onDispose(() => this._removeMarkerFromLink(entry, marker));\n      this._dataByLinkId.set(entry.id, entry);\n      return entry.id;\n    }\n\n    // Add the line to the link if it already exists\n    const castData = data as Required<IOscLinkData>;\n    const key = this._getEntryIdKey(castData);\n    const match = this._entriesWithId.get(key);\n    if (match) {\n      this.addLineToLink(match.id, buffer.ybase + buffer.y);\n      return match.id;\n    }\n\n    // Create the link\n    const marker = buffer.addMarker(buffer.ybase + buffer.y);\n    const entry: IOscLinkEntryWithId = {\n      id: this._nextId++,\n      key: this._getEntryIdKey(castData),\n      data: castData,\n      lines: [marker]\n    };\n    marker.onDispose(() => this._removeMarkerFromLink(entry, marker));\n    this._entriesWithId.set(entry.key, entry);\n    this._dataByLinkId.set(entry.id, entry);\n    return entry.id;\n  }\n\n  public addLineToLink(linkId: number, y: number): void {\n    const entry = this._dataByLinkId.get(linkId);\n    if (!entry) {\n      return;\n    }\n    if (entry.lines.every(e => e.line !== y)) {\n      const marker = this._bufferService.buffer.addMarker(y);\n      entry.lines.push(marker);\n      marker.onDispose(() => this._removeMarkerFromLink(entry, marker));\n    }\n  }\n\n  public getLinkData(linkId: number): IOscLinkData | undefined {\n    return this._dataByLinkId.get(linkId)?.data;\n  }\n\n  private _getEntryIdKey(linkData: Required<IOscLinkData>): string {\n    return `${linkData.id};;${linkData.uri}`;\n  }\n\n  private _removeMarkerFromLink(entry: IOscLinkEntryNoId | IOscLinkEntryWithId, marker: IMarker): void {\n    const index = entry.lines.indexOf(marker);\n    if (index === -1) {\n      return;\n    }\n    entry.lines.splice(index, 1);\n    if (entry.lines.length === 0) {\n      if (entry.data.id !== undefined) {\n        this._entriesWithId.delete((entry as IOscLinkEntryWithId).key);\n      }\n      this._dataByLinkId.delete(entry.id);\n    }\n  }\n}\n\ninterface IOscLinkEntry<T extends IOscLinkData> {\n  data: T;\n  id: number;\n  lines: IMarker[];\n}\n\ninterface IOscLinkEntryNoId extends IOscLinkEntry<IOscLinkData> {\n}\n\ninterface IOscLinkEntryWithId extends IOscLinkEntry<Required<IOscLinkData>> {\n  key: string;\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n *\n * This was heavily inspired from microsoft/vscode's dependency injection system (MIT).\n */\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IServiceIdentifier } from 'common/services/Services';\n\nconst DI_TARGET = 'di$target';\nconst DI_DEPENDENCIES = 'di$dependencies';\n\nexport const serviceRegistry: Map<string, IServiceIdentifier<any>> = new Map();\n\nexport function getServiceDependencies(ctor: any): { id: IServiceIdentifier<any>, index: number, optional: boolean }[] {\n  return ctor[DI_DEPENDENCIES] || [];\n}\n\nexport function createDecorator<T>(id: string): IServiceIdentifier<T> {\n  if (serviceRegistry.has(id)) {\n    return serviceRegistry.get(id)!;\n  }\n\n  const decorator: any = function (target: Function, key: string, index: number): any {\n    if (arguments.length !== 3) {\n      throw new Error('@IServiceName-decorator can only be used to decorate a parameter');\n    }\n\n    storeServiceDependency(decorator, target, index);\n  };\n\n  decorator.toString = () => id;\n\n  serviceRegistry.set(id, decorator);\n  return decorator;\n}\n\nfunction storeServiceDependency(id: Function, target: Function, index: number): void {\n  if ((target as any)[DI_TARGET] === target) {\n    (target as any)[DI_DEPENDENCIES].push({ id, index });\n  } else {\n    (target as any)[DI_DEPENDENCIES] = [{ id, index }];\n    (target as any)[DI_TARGET] = target;\n  }\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IEvent, IEventEmitter } from 'common/EventEmitter';\nimport { IBuffer, IBufferSet } from 'common/buffer/Types';\nimport { IDecPrivateModes, ICoreMouseEvent, CoreMouseEncoding, ICoreMouseProtocol, CoreMouseEventType, ICharset, IWindowOptions, IModes, IAttributeData, ScrollSource, IDisposable, IColor, CursorStyle, IOscLinkData } from 'common/Types';\nimport { createDecorator } from 'common/services/ServiceRegistry';\nimport { IDecorationOptions, IDecoration, ILinkHandler } from 'xterm';\n\nexport const IBufferService = createDecorator<IBufferService>('BufferService');\nexport interface IBufferService {\n  serviceBrand: undefined;\n\n  readonly cols: number;\n  readonly rows: number;\n  readonly buffer: IBuffer;\n  readonly buffers: IBufferSet;\n  isUserScrolling: boolean;\n  onResize: IEvent<{ cols: number, rows: number }>;\n  onScroll: IEvent<number>;\n  scroll(eraseAttr: IAttributeData, isWrapped?: boolean): void;\n  scrollToBottom(): void;\n  scrollToTop(): void;\n  scrollToLine(line: number): void;\n  scrollLines(disp: number, suppressScrollEvent?: boolean, source?: ScrollSource): void;\n  scrollPages(pageCount: number): void;\n  resize(cols: number, rows: number): void;\n  reset(): void;\n}\n\nexport const ICoreMouseService = createDecorator<ICoreMouseService>('CoreMouseService');\nexport interface ICoreMouseService {\n  activeProtocol: string;\n  activeEncoding: string;\n  areMouseEventsActive: boolean;\n  addProtocol(name: string, protocol: ICoreMouseProtocol): void;\n  addEncoding(name: string, encoding: CoreMouseEncoding): void;\n  reset(): void;\n\n  /**\n   * Triggers a mouse event to be sent.\n   *\n   * Returns true if the event passed all protocol restrictions and a report\n   * was sent, otherwise false. The return value may be used to decide whether\n   * the default event action in the bowser component should be omitted.\n   *\n   * Note: The method will change values of the given event object\n   * to fullfill protocol and encoding restrictions.\n   */\n  triggerMouseEvent(event: ICoreMouseEvent): boolean;\n\n  /**\n   * Event to announce changes in mouse tracking.\n   */\n  onProtocolChange: IEvent<CoreMouseEventType>;\n\n  /**\n   * Human readable version of mouse events.\n   */\n  explainEvents(events: CoreMouseEventType): { [event: string]: boolean };\n}\n\nexport const ICoreService = createDecorator<ICoreService>('CoreService');\nexport interface ICoreService {\n  serviceBrand: undefined;\n\n  /**\n   * Initially the cursor will not be visible until the first time the terminal\n   * is focused.\n   */\n  isCursorInitialized: boolean;\n  isCursorHidden: boolean;\n\n  readonly modes: IModes;\n  readonly decPrivateModes: IDecPrivateModes;\n\n  readonly onData: IEvent<string>;\n  readonly onUserInput: IEvent<void>;\n  readonly onBinary: IEvent<string>;\n  readonly onRequestScrollToBottom: IEvent<void>;\n\n  reset(): void;\n\n  /**\n   * Triggers the onData event in the public API.\n   * @param data The data that is being emitted.\n   * @param wasUserInput Whether the data originated from the user (as opposed to\n   * resulting from parsing incoming data). When true this will also:\n   * - Scroll to the bottom of the buffer if option scrollOnUserInput is true.\n   * - Fire the `onUserInput` event (so selection can be cleared).\n   */\n  triggerDataEvent(data: string, wasUserInput?: boolean): void;\n\n  /**\n   * Triggers the onBinary event in the public API.\n   * @param data The data that is being emitted.\n   */\n  triggerBinaryEvent(data: string): void;\n}\n\nexport const ICharsetService = createDecorator<ICharsetService>('CharsetService');\nexport interface ICharsetService {\n  serviceBrand: undefined;\n\n  charset: ICharset | undefined;\n  readonly glevel: number;\n\n  reset(): void;\n\n  /**\n   * Set the G level of the terminal.\n   * @param g\n   */\n  setgLevel(g: number): void;\n\n  /**\n   * Set the charset for the given G level of the terminal.\n   * @param g\n   * @param charset\n   */\n  setgCharset(g: number, charset: ICharset | undefined): void;\n}\n\nexport interface IServiceIdentifier<T> {\n  (...args: any[]): void;\n  type: T;\n}\n\nexport interface IBrandedService {\n  serviceBrand: undefined;\n}\n\ntype GetLeadingNonServiceArgs<Args> =\n  Args extends [...IBrandedService[]] ? []\n    : Args extends [infer A1, ...IBrandedService[]] ? [A1]\n      : Args extends [infer A1, infer A2, ...IBrandedService[]] ? [A1, A2]\n        : Args extends [infer A1, infer A2, infer A3, ...IBrandedService[]] ? [A1, A2, A3]\n          : Args extends [infer A1, infer A2, infer A3, infer A4, ...IBrandedService[]] ? [A1, A2, A3, A4]\n            : Args extends [infer A1, infer A2, infer A3, infer A4, infer A5, ...IBrandedService[]] ? [A1, A2, A3, A4, A5]\n              : Args extends [infer A1, infer A2, infer A3, infer A4, infer A5, infer A6, ...IBrandedService[]] ? [A1, A2, A3, A4, A5, A6]\n                : Args extends [infer A1, infer A2, infer A3, infer A4, infer A5, infer A6, infer A7, ...IBrandedService[]] ? [A1, A2, A3, A4, A5, A6, A7]\n                  : Args extends [infer A1, infer A2, infer A3, infer A4, infer A5, infer A6, infer A7, infer A8, ...IBrandedService[]] ? [A1, A2, A3, A4, A5, A6, A7, A8]\n                    : never;\n\nexport const IInstantiationService = createDecorator<IInstantiationService>('InstantiationService');\nexport interface IInstantiationService {\n  serviceBrand: undefined;\n\n  setService<T>(id: IServiceIdentifier<T>, instance: T): void;\n  getService<T>(id: IServiceIdentifier<T>): T | undefined;\n  createInstance<Ctor extends new (...args: any[]) => any, R extends InstanceType<Ctor>>(t: Ctor, ...args: GetLeadingNonServiceArgs<ConstructorParameters<Ctor>>): R;\n}\n\nexport enum LogLevelEnum {\n  DEBUG = 0,\n  INFO = 1,\n  WARN = 2,\n  ERROR = 3,\n  OFF = 4\n}\n\nexport const ILogService = createDecorator<ILogService>('LogService');\nexport interface ILogService {\n  serviceBrand: undefined;\n\n  logLevel: LogLevelEnum;\n\n  debug(message: any, ...optionalParams: any[]): void;\n  info(message: any, ...optionalParams: any[]): void;\n  warn(message: any, ...optionalParams: any[]): void;\n  error(message: any, ...optionalParams: any[]): void;\n}\n\nexport const IOptionsService = createDecorator<IOptionsService>('OptionsService');\nexport interface IOptionsService {\n  serviceBrand: undefined;\n\n  /**\n   * Read only access to the raw options object, this is an internal-only fast path for accessing\n   * single options without any validation as we trust TypeScript to enforce correct usage\n   * internally.\n   */\n  readonly rawOptions: Required<ITerminalOptions>;\n\n  /**\n   * Options as exposed through the public API, this property uses getters and setters with\n   * validation which makes it safer but slower. {@link rawOptions} should be used for pretty much\n   * all internal usage for performance reasons.\n   */\n  readonly options: Required<ITerminalOptions>;\n\n  /**\n   * Adds an event listener for when any option changes.\n   */\n  readonly onOptionChange: IEvent<keyof ITerminalOptions>;\n\n  /**\n   * Adds an event listener for when a specific option changes, this is a convenience method that is\n   * preferred over {@link onOptionChange} when only a single option is being listened to.\n   */\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  onSpecificOptionChange<T extends keyof ITerminalOptions>(key: T, listener: (arg1: Required<ITerminalOptions>[T]) => any): IDisposable;\n\n  /**\n   * Adds an event listener for when a set of specific options change, this is a convenience method\n   * that is preferred over {@link onOptionChange} when multiple options are being listened to and\n   * handled the same way.\n   */\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  onMultipleOptionChange(keys: (keyof ITerminalOptions)[], listener: () => any): IDisposable;\n}\n\nexport type FontWeight = 'normal' | 'bold' | '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | number;\nexport type LogLevel = 'debug' | 'info' | 'warn' | 'error' | 'off';\n\nexport interface ITerminalOptions {\n  allowProposedApi?: boolean;\n  allowTransparency?: boolean;\n  altClickMovesCursor?: boolean;\n  cols?: number;\n  convertEol?: boolean;\n  cursorBlink?: boolean;\n  cursorStyle?: CursorStyle;\n  cursorWidth?: number;\n  customGlyphs?: boolean;\n  disableStdin?: boolean;\n  drawBoldTextInBrightColors?: boolean;\n  fastScrollModifier?: 'none' | 'alt' | 'ctrl' | 'shift';\n  fastScrollSensitivity?: number;\n  fontSize?: number;\n  fontFamily?: string;\n  fontWeight?: FontWeight;\n  fontWeightBold?: FontWeight;\n  letterSpacing?: number;\n  lineHeight?: number;\n  linkHandler?: ILinkHandler | null;\n  logLevel?: LogLevel;\n  macOptionIsMeta?: boolean;\n  macOptionClickForcesSelection?: boolean;\n  minimumContrastRatio?: number;\n  rightClickSelectsWord?: boolean;\n  rows?: number;\n  screenReaderMode?: boolean;\n  scrollback?: number;\n  scrollOnUserInput?: boolean;\n  scrollSensitivity?: number;\n  smoothScrollDuration?: number;\n  tabStopWidth?: number;\n  theme?: ITheme;\n  windowsMode?: boolean;\n  windowOptions?: IWindowOptions;\n  wordSeparator?: string;\n  overviewRulerWidth?: number;\n\n  [key: string]: any;\n  cancelEvents: boolean;\n  termName: string;\n}\n\nexport interface ITheme {\n  foreground?: string;\n  background?: string;\n  cursor?: string;\n  cursorAccent?: string;\n  selectionForeground?: string;\n  selectionBackground?: string;\n  selectionInactiveBackground?: string;\n  black?: string;\n  red?: string;\n  green?: string;\n  yellow?: string;\n  blue?: string;\n  magenta?: string;\n  cyan?: string;\n  white?: string;\n  brightBlack?: string;\n  brightRed?: string;\n  brightGreen?: string;\n  brightYellow?: string;\n  brightBlue?: string;\n  brightMagenta?: string;\n  brightCyan?: string;\n  brightWhite?: string;\n  extendedAnsi?: string[];\n}\n\nexport const IOscLinkService = createDecorator<IOscLinkService>('OscLinkService');\nexport interface IOscLinkService {\n  serviceBrand: undefined;\n  /**\n   * Registers a link to the service, returning the link ID. The link data is managed by this\n   * service and will be freed when this current cursor position is trimmed off the buffer.\n   */\n  registerLink(linkData: IOscLinkData): number;\n  /**\n   * Adds a line to a link if needed.\n   */\n  addLineToLink(linkId: number, y: number): void;\n  /** Get the link data associated with a link ID. */\n  getLinkData(linkId: number): IOscLinkData | undefined;\n}\n\nexport const IUnicodeService = createDecorator<IUnicodeService>('UnicodeService');\nexport interface IUnicodeService {\n  serviceBrand: undefined;\n  /** Register an Unicode version provider. */\n  register(provider: IUnicodeVersionProvider): void;\n  /** Registered Unicode versions. */\n  readonly versions: string[];\n  /** Currently active version. */\n  activeVersion: string;\n  /** Event triggered, when activate version changed. */\n  readonly onChange: IEvent<string>;\n\n  /**\n   * Unicode version dependent\n   */\n  wcwidth(codepoint: number): number;\n  getStringCellWidth(s: string): number;\n}\n\nexport interface IUnicodeVersionProvider {\n  readonly version: string;\n  wcwidth(ucs: number): 0 | 1 | 2;\n}\n\nexport const IDecorationService = createDecorator<IDecorationService>('DecorationService');\nexport interface IDecorationService extends IDisposable {\n  serviceBrand: undefined;\n  readonly decorations: IterableIterator<IInternalDecoration>;\n  readonly onDecorationRegistered: IEvent<IInternalDecoration>;\n  readonly onDecorationRemoved: IEvent<IInternalDecoration>;\n  registerDecoration(decorationOptions: IDecorationOptions): IDecoration | undefined;\n  reset(): void;\n  /**\n   * Trigger a callback over the decoration at a cell (in no particular order). This uses a callback\n   * instead of an iterator as it's typically used in hot code paths.\n   */\n  forEachDecorationAtCell(x: number, line: number, layer: 'bottom' | 'top' | undefined, callback: (decoration: IInternalDecoration) => void): void;\n}\nexport interface IInternalDecoration extends IDecoration {\n  readonly options: IDecorationOptions;\n  readonly backgroundColorRGB: IColor | undefined;\n  readonly foregroundColorRGB: IColor | undefined;\n  readonly onRenderEmitter: IEventEmitter<HTMLElement>;\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\nimport { IUnicodeService, IUnicodeVersionProvider } from 'common/services/Services';\nimport { EventEmitter, IEvent } from 'common/EventEmitter';\nimport { UnicodeV6 } from 'common/input/UnicodeV6';\n\nexport class UnicodeService implements IUnicodeService {\n  public serviceBrand: any;\n\n  private _providers: {[key: string]: IUnicodeVersionProvider} = Object.create(null);\n  private _active: string = '';\n  private _activeProvider: IUnicodeVersionProvider;\n\n  private readonly _onChange = new EventEmitter<string>();\n  public readonly onChange = this._onChange.event;\n\n  constructor() {\n    const defaultProvider = new UnicodeV6();\n    this.register(defaultProvider);\n    this._active = defaultProvider.version;\n    this._activeProvider = defaultProvider;\n  }\n\n  public dispose(): void {\n    this._onChange.dispose();\n  }\n\n  public get versions(): string[] {\n    return Object.keys(this._providers);\n  }\n\n  public get activeVersion(): string {\n    return this._active;\n  }\n\n  public set activeVersion(version: string) {\n    if (!this._providers[version]) {\n      throw new Error(`unknown Unicode version \"${version}\"`);\n    }\n    this._active = version;\n    this._activeProvider = this._providers[version];\n    this._onChange.fire(version);\n  }\n\n  public register(provider: IUnicodeVersionProvider): void {\n    this._providers[provider.version] = provider;\n  }\n\n  /**\n   * Unicode version dependent interface.\n   */\n  public wcwidth(num: number): number {\n    return this._activeProvider.wcwidth(num);\n  }\n\n  public getStringCellWidth(s: string): number {\n    let result = 0;\n    const length = s.length;\n    for (let i = 0; i < length; ++i) {\n      let code = s.charCodeAt(i);\n      // surrogate pair first\n      if (0xD800 <= code && code <= 0xDBFF) {\n        if (++i >= length) {\n          // this should not happen with strings retrieved from\n          // Buffer.translateToString as it converts from UTF-32\n          // and therefore always should contain the second part\n          // for any other string we still have to handle it somehow:\n          // simply treat the lonely surrogate first as a single char (UCS-2 behavior)\n          return result + this.wcwidth(code);\n        }\n        const second = s.charCodeAt(i);\n        // convert surrogate pair to high codepoint only for valid second part (UTF-16)\n        // otherwise treat them independently (UCS-2 behavior)\n        if (0xDC00 <= second && second <= 0xDFFF) {\n          code = (code - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n        } else {\n          result += this.wcwidth(second);\n        }\n      }\n      result += this.wcwidth(code);\n    }\n    return result;\n  }\n}\n","/**\n * Copyright (c) 2014 The xterm.js authors. All rights reserved.\n * Copyright (c) 2012-2013, Christopher Jeffrey (MIT License)\n * @license MIT\n *\n * Originally forked from (with the author's permission):\n *   Fabrice Bellard's javascript vt100 for jslinux:\n *   http://bellard.org/jslinux/\n *   Copyright (c) 2011 Fabrice Bellard\n *   The original design remains. The terminal itself\n *   has been extended to include xterm CSI codes, among\n *   other features.\n *\n * Terminal Emulation References:\n *   http://vt100.net/\n *   http://invisible-island.net/xterm/ctlseqs/ctlseqs.txt\n *   http://invisible-island.net/xterm/ctlseqs/ctlseqs.html\n *   http://invisible-island.net/vttest/\n *   http://www.inwap.com/pdp10/ansicode.txt\n *   http://linux.die.net/man/4/console_codes\n *   http://linux.die.net/man/7/urxvt\n */\n\nimport { DEFAULT_ATTR_DATA } from 'common/buffer/BufferLine';\nimport { IBuffer } from 'common/buffer/Types';\nimport { CoreTerminal } from 'common/CoreTerminal';\nimport { EventEmitter, forwardEvent, IEvent } from 'common/EventEmitter';\nimport { ITerminalOptions as IInitializedTerminalOptions } from 'common/services/Services';\nimport { IMarker, ITerminalOptions, ScrollSource } from 'common/Types';\n\nexport class Terminal extends CoreTerminal {\n  // TODO: We should remove options once components adopt optionsService\n  public get options(): Required<IInitializedTerminalOptions> { return this.optionsService.options; }\n\n  private readonly _onBell = this.register(new EventEmitter<void>());\n  public readonly onBell = this._onBell.event;\n  private readonly _onCursorMove = this.register(new EventEmitter<void>());\n  public readonly onCursorMove = this._onCursorMove.event;\n  private readonly _onTitleChange = this.register(new EventEmitter<string>());\n  public readonly onTitleChange = this._onTitleChange.event;\n  private readonly _onA11yCharEmitter = this.register(new EventEmitter<string>());\n  public readonly onA11yChar = this._onA11yCharEmitter.event;\n  private readonly _onA11yTabEmitter = this.register(new EventEmitter<number>());\n  public readonly onA11yTab = this._onA11yTabEmitter.event;\n\n  /**\n   * Creates a new `Terminal` object.\n   *\n   * @param options An object containing a set of options, the available options are:\n   *   - `cursorBlink` (boolean): Whether the terminal cursor blinks\n   *   - `cols` (number): The number of columns of the terminal (horizontal size)\n   *   - `rows` (number): The number of rows of the terminal (vertical size)\n   *\n   * @public\n   * @class Xterm Xterm\n   * @alias module:xterm/src/xterm\n   */\n  constructor(\n    options: ITerminalOptions = {}\n  ) {\n    super(options);\n\n    this._setup();\n\n    // Setup InputHandler listeners\n    this.register(this._inputHandler.onRequestBell(() => this.bell()));\n    this.register(this._inputHandler.onRequestReset(() => this.reset()));\n    this.register(forwardEvent(this._inputHandler.onCursorMove, this._onCursorMove));\n    this.register(forwardEvent(this._inputHandler.onTitleChange, this._onTitleChange));\n    this.register(forwardEvent(this._inputHandler.onA11yChar, this._onA11yCharEmitter));\n    this.register(forwardEvent(this._inputHandler.onA11yTab, this._onA11yTabEmitter));\n  }\n\n  /**\n   * Convenience property to active buffer.\n   */\n  public get buffer(): IBuffer {\n    return this.buffers.active;\n  }\n\n  // TODO: Support paste here?\n\n  public get markers(): IMarker[] {\n    return this.buffer.markers;\n  }\n\n  public addMarker(cursorYOffset: number): IMarker | undefined {\n    // Disallow markers on the alt buffer\n    if (this.buffer !== this.buffers.normal) {\n      return;\n    }\n\n    return this.buffer.addMarker(this.buffer.ybase + this.buffer.y + cursorYOffset);\n  }\n\n  public bell(): void {\n    this._onBell.fire();\n  }\n\n  /**\n   * Resizes the terminal.\n   *\n   * @param x The number of columns to resize to.\n   * @param y The number of rows to resize to.\n   */\n  public resize(x: number, y: number): void {\n    if (x === this.cols && y === this.rows) {\n      return;\n    }\n\n    super.resize(x, y);\n  }\n\n  /**\n   * Clear the entire buffer, making the prompt line the new first line.\n   */\n  public clear(): void {\n    if (this.buffer.ybase === 0 && this.buffer.y === 0) {\n      // Don't clear if it's already clear\n      return;\n    }\n    this.buffer.lines.set(0, this.buffer.lines.get(this.buffer.ybase + this.buffer.y)!);\n    this.buffer.lines.length = 1;\n    this.buffer.ydisp = 0;\n    this.buffer.ybase = 0;\n    this.buffer.y = 0;\n    for (let i = 1; i < this.rows; i++) {\n      this.buffer.lines.push(this.buffer.getBlankLine(DEFAULT_ATTR_DATA));\n    }\n    this._onScroll.fire({ position: this.buffer.ydisp, source: ScrollSource.TERMINAL });\n  }\n\n  /**\n   * Reset terminal.\n   * Note: Calling this directly from JS is synchronous but does not clear\n   * input buffers and does not reset the parser, thus the terminal will\n   * continue to apply pending input data.\n   * If you need in band reset (synchronous with input data) consider\n   * using DECSTR (soft reset, CSI ! p) or RIS instead (hard reset, ESC c).\n   */\n  public reset(): void {\n    /**\n     * Since _setup handles a full terminal creation, we have to carry forward\n     * a few things that should not reset.\n     */\n    this.options.rows = this.rows;\n    this.options.cols = this.cols;\n\n    this._setup();\n    super.reset();\n  }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IEvent } from 'common/EventEmitter';\nimport { BufferNamespaceApi } from 'common/public/BufferNamespaceApi';\nimport { ParserApi } from 'common/public/ParserApi';\nimport { UnicodeApi } from 'common/public/UnicodeApi';\nimport { IBufferNamespace as IBufferNamespaceApi, IMarker, IModes, IParser, ITerminalAddon, ITerminalInitOnlyOptions, IUnicodeHandling, Terminal as ITerminalApi } from 'xterm-headless';\nimport { Terminal as TerminalCore } from 'headless/Terminal';\nimport { AddonManager } from 'common/public/AddonManager';\nimport { ITerminalOptions } from 'common/Types';\n/**\n * The set of options that only have an effect when set in the Terminal constructor.\n */\nconst CONSTRUCTOR_ONLY_OPTIONS = ['cols', 'rows'];\n\nexport class Terminal implements ITerminalApi {\n  private _core: TerminalCore;\n  private _addonManager: AddonManager;\n  private _parser: IParser | undefined;\n  private _buffer: BufferNamespaceApi | undefined;\n  private _publicOptions: Required<ITerminalOptions>;\n\n  constructor(options?: ITerminalOptions & ITerminalInitOnlyOptions) {\n    this._core = new TerminalCore(options);\n    this._addonManager = new AddonManager();\n\n    this._publicOptions = { ... this._core.options };\n    const getter = (propName: string): any => {\n      return this._core.options[propName];\n    };\n    const setter = (propName: string, value: any): void => {\n      this._checkReadonlyOptions(propName);\n      this._core.options[propName] = value;\n    };\n\n    for (const propName in this._core.options) {\n      Object.defineProperty(this._publicOptions, propName, {\n        get: () => {\n          return this._core.options[propName];\n        },\n        set: (value: any) => {\n          this._checkReadonlyOptions(propName);\n          this._core.options[propName] = value;\n        }\n      });\n      const desc = {\n        get: getter.bind(this, propName),\n        set: setter.bind(this, propName)\n      };\n      Object.defineProperty(this._publicOptions, propName, desc);\n    }\n  }\n\n  private _checkReadonlyOptions(propName: string): void {\n    // Throw an error if any constructor only option is modified\n    // from terminal.options\n    // Modifications from anywhere else are allowed\n    if (CONSTRUCTOR_ONLY_OPTIONS.includes(propName)) {\n      throw new Error(`Option \"${propName}\" can only be set in the constructor`);\n    }\n  }\n\n  private _checkProposedApi(): void {\n    if (!this._core.optionsService.options.allowProposedApi) {\n      throw new Error('You must set the allowProposedApi option to true to use proposed API');\n    }\n  }\n\n  public get onBell(): IEvent<void> { return this._core.onBell; }\n  public get onBinary(): IEvent<string> { return this._core.onBinary; }\n  public get onCursorMove(): IEvent<void> { return this._core.onCursorMove; }\n  public get onData(): IEvent<string> { return this._core.onData; }\n  public get onLineFeed(): IEvent<void> { return this._core.onLineFeed; }\n  public get onResize(): IEvent<{ cols: number, rows: number }> { return this._core.onResize; }\n  public get onScroll(): IEvent<number> { return this._core.onScroll; }\n  public get onTitleChange(): IEvent<string> { return this._core.onTitleChange; }\n\n  public get parser(): IParser {\n    this._checkProposedApi();\n    if (!this._parser) {\n      this._parser = new ParserApi(this._core);\n    }\n    return this._parser;\n  }\n  public get unicode(): IUnicodeHandling {\n    this._checkProposedApi();\n    return new UnicodeApi(this._core);\n  }\n  public get rows(): number { return this._core.rows; }\n  public get cols(): number { return this._core.cols; }\n  public get buffer(): IBufferNamespaceApi {\n    this._checkProposedApi();\n    if (!this._buffer) {\n      this._buffer = new BufferNamespaceApi(this._core);\n    }\n    return this._buffer;\n  }\n  public get markers(): ReadonlyArray<IMarker> {\n    this._checkProposedApi();\n    return this._core.markers;\n  }\n  public get modes(): IModes {\n    const m = this._core.coreService.decPrivateModes;\n    let mouseTrackingMode: 'none' | 'x10' | 'vt200' | 'drag' | 'any' = 'none';\n    switch (this._core.coreMouseService.activeProtocol) {\n      case 'X10': mouseTrackingMode = 'x10'; break;\n      case 'VT200': mouseTrackingMode = 'vt200'; break;\n      case 'DRAG': mouseTrackingMode = 'drag'; break;\n      case 'ANY': mouseTrackingMode = 'any'; break;\n    }\n    return {\n      applicationCursorKeysMode: m.applicationCursorKeys,\n      applicationKeypadMode: m.applicationKeypad,\n      bracketedPasteMode: m.bracketedPasteMode,\n      insertMode: this._core.coreService.modes.insertMode,\n      mouseTrackingMode: mouseTrackingMode,\n      originMode: m.origin,\n      reverseWraparoundMode: m.reverseWraparound,\n      sendFocusMode: m.sendFocus,\n      wraparoundMode: m.wraparound\n    };\n  }\n  public get options(): Required<ITerminalOptions> {\n    return this._publicOptions;\n  }\n  public set options(options: ITerminalOptions) {\n    for (const propName in options) {\n      this._publicOptions[propName] = options[propName];\n    }\n  }\n  public resize(columns: number, rows: number): void {\n    this._verifyIntegers(columns, rows);\n    this._core.resize(columns, rows);\n  }\n  public registerMarker(cursorYOffset: number = 0): IMarker | undefined {\n    this._checkProposedApi();\n    this._verifyIntegers(cursorYOffset);\n    return this._core.addMarker(cursorYOffset);\n  }\n  public addMarker(cursorYOffset: number): IMarker | undefined {\n    return this.registerMarker(cursorYOffset);\n  }\n  public dispose(): void {\n    this._addonManager.dispose();\n    this._core.dispose();\n  }\n  public scrollLines(amount: number): void {\n    this._verifyIntegers(amount);\n    this._core.scrollLines(amount);\n  }\n  public scrollPages(pageCount: number): void {\n    this._verifyIntegers(pageCount);\n    this._core.scrollPages(pageCount);\n  }\n  public scrollToTop(): void {\n    this._core.scrollToTop();\n  }\n  public scrollToBottom(): void {\n    this._core.scrollToBottom();\n  }\n  public scrollToLine(line: number): void {\n    this._verifyIntegers(line);\n    this._core.scrollToLine(line);\n  }\n  public clear(): void {\n    this._core.clear();\n  }\n  public write(data: string | Uint8Array, callback?: () => void): void {\n    this._core.write(data, callback);\n  }\n  public writeln(data: string | Uint8Array, callback?: () => void): void {\n    this._core.write(data);\n    this._core.write('\\r\\n', callback);\n  }\n  public reset(): void {\n    this._core.reset();\n  }\n  public loadAddon(addon: ITerminalAddon): void {\n    // TODO: This could cause issues if the addon calls renderer apis\n    return this._addonManager.loadAddon(this as any, addon);\n  }\n\n  private _verifyIntegers(...values: number[]): void {\n    for (const value of values) {\n      if (value === Infinity || isNaN(value) || value % 1 !== 0) {\n        throw new Error('This API only accepts integers');\n      }\n    }\n  }\n}\n"],"names":["CircularList","Disposable","constructor","_maxLength","super","onDeleteEmitter","this","register","EventEmitter","onDelete","event","onInsertEmitter","onInsert","onTrimEmitter","onTrim","_array","Array","_startIndex","_length","maxLength","newMaxLength","newArray","i","Math","min","length","_getCyclicIndex","newLength","undefined","get","index","set","value","push","fire","recycle","Error","isFull","pop","splice","start","deleteCount","items","amount","countToTrim","trimStart","count","shiftElements","offset","expandListBy","clone","val","depth","clonedObject","isArray","key","hasWriteSyncWarnHappened","CoreTerminal","options","_onBinary","onBinary","_onData","onData","_onLineFeed","onLineFeed","_onResize","onResize","_onWriteParsed","onWriteParsed","_onScroll","_instantiationService","InstantiationService","optionsService","OptionsService","setService","IOptionsService","_bufferService","createInstance","BufferService","IBufferService","_logService","LogService","ILogService","coreService","CoreService","ICoreService","coreMouseService","CoreMouseService","ICoreMouseService","unicodeService","UnicodeService","IUnicodeService","_charsetService","CharsetService","ICharsetService","_oscLinkService","OscLinkService","IOscLinkService","_inputHandler","InputHandler","forwardEvent","onRequestScrollToBottom","scrollToBottom","onUserInput","_writeBuffer","handleUserInput","onSpecificOptionChange","e","_handleWindowsModeOptionChange","onScroll","position","buffer","ydisp","source","markRangeDirty","scrollTop","scrollBottom","WriteBuffer","data","promiseResult","parse","toDisposable","_windowsMode","dispose","_onScrollApi","ev","cols","rows","buffers","write","callback","writeSync","maxSubsequentCalls","logLevel","LogLevelEnum","WARN","warn","resize","x","y","isNaN","max","MINIMUM_COLS","MINIMUM_ROWS","scroll","eraseAttr","isWrapped","scrollLines","disp","suppressScrollEvent","scrollPages","pageCount","scrollToTop","scrollToLine","line","registerEscHandler","id","registerDcsHandler","registerCsiHandler","registerOscHandler","ident","_setup","rawOptions","windowsMode","_enableWindowsMode","reset","disposables","updateWindowsModeWrappedState","bind","final","d","_listeners","_disposed","_event","listener","disposable","arg1","arg2","queue","call","from","to","GLEVEL","MAX_PARSEBUFFER_LENGTH","paramToWindowOption","n","opts","setWinLines","restoreWin","minimizeWin","setWinPosition","setWinSizePixels","raiseWin","lowerWin","refreshWin","setWinSizeChars","maximizeWin","fullscreenWin","getWinState","getWinPosition","getWinSizePixels","getScreenSizePixels","getCellSizePixels","getWinSizeChars","getScreenSizeChars","getIconTitle","getWinTitle","pushTitle","popTitle","WindowsOptionsReportType","$temp","_coreService","_optionsService","_coreMouseService","_unicodeService","_parser","EscapeSequenceParser","_parseBuffer","Uint32Array","_stringDecoder","StringToUtf32","_utf8Decoder","Utf8ToUtf32","_workCell","CellData","_windowTitle","_iconName","_windowTitleStack","_iconNameStack","_curAttrData","DEFAULT_ATTR_DATA","_eraseAttrDataInternal","_onRequestBell","onRequestBell","_onRequestRefreshRows","onRequestRefreshRows","_onRequestReset","onRequestReset","_onRequestSendFocus","onRequestSendFocus","_onRequestSyncScrollBar","onRequestSyncScrollBar","_onRequestWindowsOptionsReport","onRequestWindowsOptionsReport","_onA11yChar","onA11yChar","_onA11yTab","onA11yTab","_onCursorMove","onCursorMove","_onTitleChange","onTitleChange","_onColor","onColor","_parseStack","paused","cursorStartX","cursorStartY","decodedLength","_specialColors","_dirtyRowTracker","DirtyRowTracker","_activeBuffer","onBufferActivate","activeBuffer","setCsiHandlerFallback","params","debug","identifier","identToString","toArray","setEscHandlerFallback","setExecuteHandlerFallback","code","setOscHandlerFallback","action","setDcsHandlerFallback","payload","setPrintHandler","end","print","insertChars","intermediates","scrollLeft","cursorUp","scrollRight","cursorDown","cursorForward","cursorBackward","cursorNextLine","cursorPrecedingLine","cursorCharAbsolute","cursorPosition","cursorForwardTab","eraseInDisplay","prefix","eraseInLine","insertLines","deleteLines","deleteChars","scrollUp","scrollDown","eraseChars","cursorBackwardTab","charPosAbsolute","hPositionRelative","repeatPrecedingCharacter","sendDeviceAttributesPrimary","sendDeviceAttributesSecondary","linePosAbsolute","vPositionRelative","hVPosition","tabClear","setMode","setModePrivate","resetMode","resetModePrivate","charAttributes","deviceStatus","deviceStatusPrivate","softReset","setCursorStyle","setScrollRegion","saveCursor","windowOptions","restoreCursor","insertColumns","deleteColumns","selectProtected","requestMode","setExecuteHandler","C0","BEL","bell","LF","lineFeed","VT","FF","CR","carriageReturn","BS","backspace","HT","tab","SO","shiftOut","SI","shiftIn","C1","IND","NEL","nextLine","HTS","tabSet","OscHandler","setTitle","setIconName","setOrReportIndexedColor","setHyperlink","setOrReportFgColor","setOrReportBgColor","setOrReportCursorColor","restoreIndexedColor","restoreFgColor","restoreBgColor","restoreCursorColor","reverseIndex","keypadApplicationMode","keypadNumericMode","fullReset","setgLevel","selectDefaultCharset","flag","CHARSETS","selectCharset","screenAlignmentPattern","setErrorHandler","state","error","DcsHandler","requestStatusString","getAttrData","_preserveStack","_logSlowResolvingAsync","p","Promise","race","res","rej","setTimeout","catch","err","console","_getCurrentLinkId","extended","urlId","result","wasPaused","DEBUG","prototype","map","String","fromCharCode","join","split","charCodeAt","clearRange","len","decode","substring","subarray","chWidth","charset","screenReaderMode","wraparoundMode","decPrivateModes","wraparound","insertMode","modes","curAttr","bufferRow","lines","ybase","markDirty","getWidth","setCellFromCodePoint","fg","bg","pos","wcwidth","ch","stringFromCodePoint","addLineToLink","_eraseAttrData","insertCells","getNullCell","NULL_CELL_CODE","NULL_CELL_WIDTH","addCodepointToCell","loadCell","getCode","precedingCodepoint","isCombined","getChars","content","hasContent","convertEol","reverseWraparound","_restrictCursor","hasWidth","originalX","nextStop","maxCol","origin","_setCursor","_moveCursor","diffToTop","diffToBottom","param","tabs","prevStop","_eraseInBufferLine","clearWrap","respectProtect","replaceCells","_resetBufferLine","fill","clearMarkers","j","scrollBackSize","row","scrollBottomRowsOffset","scrollBottomAbsolute","getBlankLine","deleteCells","_is","triggerDataEvent","ESC","term","termName","indexOf","applicationCursorKeys","setgCharset","DEFAULT_CHARSET","cursorBlink","applicationKeypad","activeProtocol","sendFocus","activeEncoding","isCursorHidden","activateAltBuffer","isCursorInitialized","bracketedPasteMode","activateNormalBuffer","ansi","dm","mouseProtocol","mouseEncoding","cs","active","alt","b2v","m","v","_updateAttrColor","color","mode","c1","c2","c3","AttributeData","fromColorRGB","_extractColor","attr","accu","cSpace","advance","hasSubParams","subparams","getSubParams","underlineColor","_processUnderline","style","underlineStyle","updateExtended","_processSGR0","l","savedX","savedY","savedCurAttrData","savedCharset","cursorStyle","isBlinking","top","bottom","second","GET_WIN_SIZE_PIXELS","GET_CELL_SIZE_PIXELS","shift","_savedCharset","slots","idx","spec","exec","parseInt","type","parseColor","args","_createHyperlink","_finishHyperlink","uri","parsedParams","idParamIndex","findIndex","startsWith","slice","registerLink","_setOrReportSpecialColor","collectAndFlag","scrollRegionHeight","level","cell","yOffset","markAllDirty","b","s","f","isProtected","y1","y2","disposeArray","_disposables","_isDisposed","unregister","array","isNode","navigator","userAgent","platform","isFirefox","includes","isLegacyEdge","isSafari","test","majorVersion","match","isMac","isIpad","isIphone","isWindows","isLinux","isChromeOS","TaskQueue","_tasks","_i","enqueue","task","_start","flush","clear","_idleCallback","_cancelCallback","_requestCallback","_process","deadline","taskDuration","longestTask","lastDeadlineRemaining","timeRemaining","deadlineRemaining","Date","now","abs","round","PriorityTaskQueue","_createDeadline","clearTimeout","duration","IdleTaskQueue","window","requestIdleCallback","cancelIdleCallback","_queue","bufferService","lastChar","CHAR_DATA_CODE_INDEX","WHITESPACE_CELL_CODE","ExtendedAttrs","static","newObj","isInverse","isBold","isUnderline","hasExtendedAttrs","isBlink","isInvisible","isItalic","isDim","isStrikethrough","getFgColorMode","getBgColorMode","isFgRGB","isBgRGB","isFgPalette","isBgPalette","isFgDefault","isBgDefault","isAttributeDefault","getFgColor","getBgColor","isEmpty","getUnderlineColor","getUnderlineColorMode","isUnderlineColorRGB","isUnderlineColorPalette","isUnderlineColorDefault","getUnderlineStyle","ext","_ext","_urlId","MAX_BUFFER_SIZE","_hasScrollback","markers","_nullCell","fromCharData","NULL_CELL_CHAR","_whitespaceCell","WHITESPACE_CELL_CHAR","WHITESPACE_CELL_WIDTH","_isClearing","_memoryCleanupQueue","_memoryCleanupPosition","_cols","_rows","_getCorrectBufferLength","setupTabStops","getWhitespaceCell","BufferLine","hasScrollback","isCursorInViewport","relativeY","correctBufferLength","scrollback","fillViewportRows","fillAttr","newCols","newRows","nullCell","dirtyMemoryLines","addToY","amountToTrim","_isReflowEnabled","_reflow","_batchedMemoryCleanup","normalRun","counted","cleanupMemory","_reflowLarger","_reflowSmaller","toRemove","reflowLargerGetLinesToRemove","newLayoutResult","reflowLargerCreateNewLayout","reflowLargerApplyNewLayout","layout","_reflowLargerAdjustViewport","countRemoved","viewportAdjustments","toInsert","countToInsert","getTrimmedLength","wrappedLines","unshift","absoluteY","lastLineLength","destLineLengths","reflowSmallerGetNewLineLengths","linesToAdd","trimmedLines","newLines","newLine","destLineIndex","destCol","srcLineIndex","srcCol","cellsToCopy","copyCellsFrom","wrappedLinesIndex","getWrappedLineTrimmedLength","setCell","insertEvents","originalLines","originalLinesLength","originalLineIndex","nextToInsertIndex","nextToInsert","countInsertedSoFar","nextI","insertCountEmitted","translateBufferLineToString","lineIndex","trimRight","startCol","endCol","translateToString","getWrappedRangeForLine","first","last","tabStopWidth","clearAllMarkers","addMarker","marker","Marker","onDispose","_removeMarker","Object","freeze","$startIndex","fillCellData","_combined","_extendedAttrs","_data","cp","CHAR_DATA_ATTR_INDEX","CHAR_DATA_CHAR_INDEX","CHAR_DATA_WIDTH_INDEX","getFg","getBg","getCodePoint","getString","combinedData","codePoint","width","eAttrs","byteLength","uint32Cells","keys","extKeys","copyFrom","el","src","applyInReverse","srcData","srcCombinedKeys","endsInNull","followingLineStartsWithWide","oldCols","bufferAbsoluteY","srcTrimmedTineLength","srcRemainingCells","destRemainingCells","countToRemove","nextToRemoveIndex","nextToRemoveStart","countRemovedSoFar","newLayout","newLayoutLines","newLineLengths","cellsNeeded","reduce","c","srcLine","cellsAvailable","oldTrimmedLength","endsWithWide","lineLength","BufferSet","_onBufferActivate","_normal","Buffer","_alt","inactiveBuffer","normal","obj","setFromCharData","combined","getAsCharData","DEFAULT_COLOR","DEFAULT_ATTR","DEFAULT_EXT","isDisposed","_id","_nextId","_onDispose","C","NUL","SOH","STX","ETX","EOT","ENQ","ACK","DLE","DC1","DC2","DC3","DC4","NAK","SYN","ETB","CAN","EM","SUB","FS","GS","RS","US","SP","DEL","PAD","HOP","BPH","NBH","SSA","ESA","HTJ","VTS","PLD","PLU","RI","SS2","SS3","DCS","PU1","PU2","STS","CCH","MW","SPA","EPA","SOS","SGCI","SCI","CSI","ST","OSC","PM","APC","C1_ESCAPED","codepoint","_interim","input","target","size","startPos","interim","Uint8Array","byte1","byte2","byte3","byte4","discardInterim","tmp","missing","fourStop","BMP_COMBINING","HIGH_COMBINING","table","version","r","num","ucs","mid","bisearch","_action","_callbacks","_pendingData","_bufferOffset","_isSyncWriting","_syncCalls","_didUserInput","chunk","cb","_innerWrite","lastTime","startTime","continuation","queueMicrotask","resolve","then","RGB_REX","HASH_REX","pad","bits","toString","s2","low","toLowerCase","base","adv","g","PAYLOAD_LIMIT","EMPTY_HANDLERS","_handlers","create","_active","_ident","_handlerFb","_stack","loopPosition","fallThrough","registerHandler","handler","handlerList","handlerIndex","clearHandler","setHandlerFallback","unhook","hook","put","utf32ToString","success","handlerResult","EMPTY_PARAMS","Params","addParam","_handler","_params","_hitLimit","ret","TransitionTable","setDefault","next","add","addMany","codes","NON_ASCII_PRINTABLE","VT500_TRANSITION_TABLE","blueprint","apply","unused","PRINTABLES","EXECUTABLES","states","_transitions","handlers","handlerPos","transition","chunkPos","initialState","currentState","_collect","_printHandlerFb","_executeHandlerFb","_csiHandlerFb","_escHandlerFb","_errorHandlerFb","_printHandler","_executeHandlers","_csiHandlers","_escHandlers","_oscParser","OscParser","_dcsParser","DcsParser","_errorHandler","_identifier","finalRange","intermediate","finalCode","reverse","clearPrintHandler","clearEscHandler","clearExecuteHandler","clearCsiHandler","clearDcsHandler","clearOscHandler","clearErrorHandler","collect","abort","addSubParam","addDigit","handlersEsc","jj","_state","_put","MAX_VALUE","maxSubParamsLength","Int32Array","_subParams","_subParamsLength","_subParamsIdx","Uint16Array","_rejectDigits","_rejectSubDigits","_digitIsSub","values","k","newParams","getSubParamsAll","store","cur","_addons","instance","loadAddon","terminal","loadedAddon","_wrappedAddonDispose","activate","_buffer","init","cursorY","cursorX","viewportY","baseY","getLine","BufferLineApiView","_line","getCell","startColumn","endColumn","_core","_onBufferChange","onBufferChange","BufferApiView","_alternate","alternate","addCsiHandler","addDcsHandler","addEscHandler","addOscHandler","provider","versions","activeVersion","isUserScrolling","_cachedBlankLine","topRow","bottomRow","willBufferBeTrimmed","oldYdisp","scrollAmount","glevel","_charsets","DEFAULT_PROTOCOLS","NONE","events","restrict","X10","button","ctrl","VT200","DRAG","ANY","eventCode","isSGR","S","DEFAULT_ENCODINGS","DEFAULT","col","SGR","SGR_PIXELS","_protocols","_encodings","_activeProtocol","_activeEncoding","_lastEvent","_onProtocolChange","onProtocolChange","name","addProtocol","addEncoding","protocol","encoding","areMouseEventsActive","triggerMouseEvent","_equalEvents","report","triggerBinaryEvent","explainEvents","down","up","drag","move","wheel","e1","e2","pixels","DEFAULT_MODES","DEFAULT_DEC_PRIVATE_MODES","_onUserInput","_onRequestScrollToBottom","wasUserInput","disableStdin","scrollOnUserInput","ServiceCollection","entries","_entries","Map","service","forEach","has","_services","IInstantiationService","getService","ctor","serviceDependencies","getServiceDependencies","sort","a","serviceArgs","dependency","firstServiceArgPos","optionsKeyToLogLevel","info","INFO","ERROR","off","OFF","_updateLogLevel","_evalLazyOptionalParams","optionalParams","_log","message","log","DEFAULT_OPTIONS","cursorWidth","customGlyphs","drawBoldTextInBrightColors","fastScrollModifier","fastScrollSensitivity","fontFamily","fontSize","fontWeight","fontWeightBold","lineHeight","letterSpacing","linkHandler","scrollSensitivity","smoothScrollDuration","macOptionIsMeta","macOptionClickForcesSelection","minimumContrastRatio","allowProposedApi","allowTransparency","theme","rightClickSelectsWord","wordSeparator","altClickMovesCursor","cancelEvents","overviewRulerWidth","FONT_WEIGHT_OPTIONS","_onOptionChange","onOptionChange","defaultOptions","newValue","_sanitizeAndValidateOption","_setupOptions","eventKey","onMultipleOptionChange","getter","propName","setter","desc","defineProperty","isCursorStyle","floor","_entriesWithId","_dataByLinkId","entry","_removeMarkerFromLink","castData","_getEntryIdKey","linkId","every","getLinkData","linkData","delete","storeServiceDependency","serviceRegistry","decorator","arguments","createDecorator","IDecorationService","_providers","_onChange","onChange","defaultProvider","UnicodeV6","_activeProvider","getStringCellWidth","Terminal","_onBell","onBell","_onA11yCharEmitter","_onA11yTabEmitter","cursorYOffset","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","CONSTRUCTOR_ONLY_OPTIONS","_addonManager","AddonManager","_publicOptions","_checkReadonlyOptions","_checkProposedApi","parser","ParserApi","unicode","UnicodeApi","BufferNamespaceApi","mouseTrackingMode","applicationCursorKeysMode","applicationKeypadMode","originMode","reverseWraparoundMode","sendFocusMode","columns","_verifyIntegers","registerMarker","writeln","addon","Infinity"],"sourceRoot":""}