{"version":3,"file":"xterm-addon-search.js","mappings":"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","sources":["webpack://SearchAddon/webpack/universalModuleDefinition","webpack://SearchAddon/../../src/common/EventEmitter.ts","webpack://SearchAddon/../../src/common/Lifecycle.ts","webpack://SearchAddon/webpack/bootstrap","webpack://SearchAddon/./src/SearchAddon.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SearchAddon\"] = factory();\n\telse\n\t\troot[\"SearchAddon\"] = factory();\n})(self, function() {\nreturn ","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IDisposable } from 'common/Types';\n\ninterface IListener<T, U = void> {\n  (arg1: T, arg2: U): void;\n}\n\nexport interface IEvent<T, U = void> {\n  (listener: (arg1: T, arg2: U) => any): IDisposable;\n}\n\nexport interface IEventEmitter<T, U = void> {\n  event: IEvent<T, U>;\n  fire(arg1: T, arg2: U): void;\n  dispose(): void;\n}\n\nexport class EventEmitter<T, U = void> implements IEventEmitter<T, U> {\n  private _listeners: IListener<T, U>[] = [];\n  private _event?: IEvent<T, U>;\n  private _disposed: boolean = false;\n\n  public get event(): IEvent<T, U> {\n    if (!this._event) {\n      this._event = (listener: (arg1: T, arg2: U) => any) => {\n        this._listeners.push(listener);\n        const disposable = {\n          dispose: () => {\n            if (!this._disposed) {\n              for (let i = 0; i < this._listeners.length; i++) {\n                if (this._listeners[i] === listener) {\n                  this._listeners.splice(i, 1);\n                  return;\n                }\n              }\n            }\n          }\n        };\n        return disposable;\n      };\n    }\n    return this._event;\n  }\n\n  public fire(arg1: T, arg2: U): void {\n    const queue: IListener<T, U>[] = [];\n    for (let i = 0; i < this._listeners.length; i++) {\n      queue.push(this._listeners[i]);\n    }\n    for (let i = 0; i < queue.length; i++) {\n      queue[i].call(undefined, arg1, arg2);\n    }\n  }\n\n  public dispose(): void {\n    if (this._listeners) {\n      this._listeners.length = 0;\n    }\n    this._disposed = true;\n  }\n}\n\nexport function forwardEvent<T>(from: IEvent<T>, to: IEventEmitter<T>): IDisposable {\n  return from(e => to.fire(e));\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IDisposable } from 'common/Types';\n\n/**\n * A base class that can be extended to provide convenience methods for managing the lifecycle of an\n * object and its components.\n */\nexport abstract class Disposable implements IDisposable {\n  protected _disposables: IDisposable[] = [];\n  protected _isDisposed: boolean = false;\n\n  constructor() {\n  }\n\n  /**\n   * Disposes the object, triggering the `dispose` method on all registered IDisposables.\n   */\n  public dispose(): void {\n    this._isDisposed = true;\n    for (const d of this._disposables) {\n      d.dispose();\n    }\n    this._disposables.length = 0;\n  }\n\n  /**\n   * Registers a disposable object.\n   * @param d The disposable to register.\n   * @returns The disposable.\n   */\n  public register<T extends IDisposable>(d: T): T {\n    this._disposables.push(d);\n    return d;\n  }\n\n  /**\n   * Unregisters a disposable object if it has been registered, if not do\n   * nothing.\n   * @param d The disposable to unregister.\n   */\n  public unregister<T extends IDisposable>(d: T): void {\n    const index = this._disposables.indexOf(d);\n    if (index !== -1) {\n      this._disposables.splice(index, 1);\n    }\n  }\n}\n\n/**\n * Wrap a function in a disposable.\n */\nexport function toDisposable(f: () => void): IDisposable {\n  return { dispose: f };\n}\n\n/**\n * Dispose of all disposables in an array and set its length to 0.\n */\nexport function disposeArray(disposables: IDisposable[]): void {\n  for (const d of disposables) {\n    d.dispose();\n  }\n  disposables.length = 0;\n}\n\n/**\n * Creates a disposable that will dispose of an array of disposables when disposed.\n */\nexport function getDisposeArrayDisposable(array: IDisposable[]): IDisposable {\n  return { dispose: () => disposeArray(array) };\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { Terminal, IDisposable, ITerminalAddon, IBufferRange, IDecoration } from 'xterm';\nimport { EventEmitter } from 'common/EventEmitter';\nimport { Disposable, toDisposable } from 'common/Lifecycle';\n\nexport interface ISearchOptions {\n  regex?: boolean;\n  wholeWord?: boolean;\n  caseSensitive?: boolean;\n  incremental?: boolean;\n  decorations?: ISearchDecorationOptions;\n  noScroll?: boolean;\n}\n\ninterface ISearchDecorationOptions {\n  matchBackground?: string;\n  matchBorder?: string;\n  matchOverviewRuler: string;\n  activeMatchBackground?: string;\n  activeMatchBorder?: string;\n  activeMatchColorOverviewRuler: string;\n}\n\nexport interface ISearchPosition {\n  startCol: number;\n  startRow: number;\n}\n\nexport interface ISearchResult {\n  term: string;\n  col: number;\n  row: number;\n  size: number;\n}\n\ntype LineCacheEntry = [\n  /**\n   * The string representation of a line (as opposed to the buffer cell representation).\n   */\n  lineAsString: string,\n  /**\n   * The offsets where each line starts when the entry describes a wrapped line.\n   */\n  lineOffsets: number[]\n];\n\nconst NON_WORD_CHARACTERS = ' ~!@#$%^&*()+`-=[]{}|\\\\;:\"\\',./<>?';\nconst LINES_CACHE_TIME_TO_LIVE = 15 * 1000; // 15 secs\n\nexport class SearchAddon extends Disposable implements ITerminalAddon {\n  private _terminal: Terminal | undefined;\n  private _cachedSearchTerm: string | undefined;\n  private _selectedDecoration: IDecoration | undefined;\n  private _resultDecorations: Map<number, IDecoration[]> | undefined;\n  private _searchResults: Map<string, ISearchResult> | undefined;\n  private _onDataDisposable: IDisposable | undefined;\n  private _onResizeDisposable: IDisposable | undefined;\n  private _lastSearchOptions: ISearchOptions | undefined;\n  private _highlightTimeout: number | undefined;\n  /**\n   * translateBufferLineToStringWithWrap is a fairly expensive call.\n   * We memoize the calls into an array that has a time based ttl.\n   * _linesCache is also invalidated when the terminal cursor moves.\n   */\n  private _linesCache: LineCacheEntry[] | undefined;\n  private _linesCacheTimeoutId = 0;\n  private _cursorMoveListener: IDisposable | undefined;\n  private _resizeListener: IDisposable | undefined;\n\n  private _resultIndex: number | undefined;\n\n  private readonly _onDidChangeResults = this.register(new EventEmitter<{ resultIndex: number, resultCount: number } | undefined>());\n  public readonly onDidChangeResults = this._onDidChangeResults.event;\n\n  public activate(terminal: Terminal): void {\n    this._terminal = terminal;\n    this._onDataDisposable = this.register(this._terminal.onWriteParsed(() => this._updateMatches()));\n    this._onResizeDisposable = this.register(this._terminal.onResize(() => this._updateMatches()));\n    this.register(toDisposable(() => {\n      this.clearDecorations();\n      this._onDataDisposable?.dispose();\n      this._onResizeDisposable?.dispose();\n    }));\n  }\n\n  private _updateMatches(): void {\n    if (this._highlightTimeout) {\n      window.clearTimeout(this._highlightTimeout);\n    }\n    if (this._cachedSearchTerm && this._lastSearchOptions?.decorations) {\n      this._highlightTimeout = setTimeout(() => {\n        this.findPrevious(this._cachedSearchTerm!, { ...this._lastSearchOptions, incremental: true, noScroll: true });\n        this._resultIndex = this._searchResults ? this._searchResults.size - 1 : -1;\n        this._onDidChangeResults.fire({ resultIndex: this._resultIndex, resultCount: this._searchResults?.size ?? -1 });\n      }, 200);\n    }\n  }\n\n  public clearDecorations(retainCachedSearchTerm?: boolean): void {\n    this._selectedDecoration?.dispose();\n    this._searchResults?.clear();\n    this._resultDecorations?.forEach(decorations => {\n      for (const d of decorations) {\n        d.dispose();\n      }\n    });\n    this._resultDecorations?.clear();\n    this._searchResults = undefined;\n    this._resultDecorations = undefined;\n    if (!retainCachedSearchTerm) {\n      this._cachedSearchTerm = undefined;\n    }\n  }\n\n  public clearActiveDecoration(): void {\n    this._selectedDecoration?.dispose();\n    this._selectedDecoration = undefined;\n  }\n\n  /**\n   * Find the next instance of the term, then scroll to and select it. If it\n   * doesn't exist, do nothing.\n   * @param term The search term.\n   * @param searchOptions Search options.\n   * @returns Whether a result was found.\n   */\n  public findNext(term: string, searchOptions?: ISearchOptions): boolean {\n    if (!this._terminal) {\n      throw new Error('Cannot use addon until it has been loaded');\n    }\n    this._lastSearchOptions = searchOptions;\n    if (searchOptions?.decorations) {\n      if (this._resultIndex !== undefined || this._cachedSearchTerm === undefined || term !== this._cachedSearchTerm) {\n        this._highlightAllMatches(term, searchOptions);\n      }\n    }\n    return this._fireResults(term, this._findNextAndSelect(term, searchOptions), searchOptions);\n  }\n\n  private _highlightAllMatches(term: string, searchOptions: ISearchOptions): void {\n    if (!this._terminal) {\n      throw new Error('Cannot use addon until it has been loaded');\n    }\n    if (!term || term.length === 0) {\n      this.clearDecorations();\n      return;\n    }\n    searchOptions = searchOptions || {};\n\n    // new search, clear out the old decorations\n    this.clearDecorations(true);\n    this._searchResults = new Map<string, ISearchResult>();\n    this._resultDecorations = new Map<number, IDecoration[]>();\n    const resultDecorations = this._resultDecorations;\n    let result = this._find(term, 0, 0, searchOptions);\n    while (result && !this._searchResults.get(`${result.row}-${result.col}`)) {\n      this._searchResults.set(`${result.row}-${result.col}`, result);\n      result = this._find(\n        term,\n        result.col + result.term.length >= this._terminal.cols ? result.row + 1 : result.row,\n        result.col + result.term.length >= this._terminal.cols ? 0 : result.col + 1,\n        searchOptions\n      );\n      if (this._searchResults.size > 1000) {\n        this.clearDecorations();\n        this._resultIndex = undefined;\n        return;\n      }\n    }\n    this._searchResults.forEach(result => {\n      const resultDecoration = this._createResultDecoration(result, searchOptions.decorations!);\n      if (resultDecoration) {\n        const decorationsForLine = resultDecorations.get(resultDecoration.marker.line) || [];\n        decorationsForLine.push(resultDecoration);\n        resultDecorations.set(resultDecoration.marker.line, decorationsForLine);\n      }\n    });\n  }\n\n  private _find(term: string, startRow: number, startCol: number, searchOptions?: ISearchOptions): ISearchResult | undefined {\n    if (!this._terminal || !term || term.length === 0) {\n      this._terminal?.clearSelection();\n      this.clearDecorations();\n      return undefined;\n    }\n    if (startCol > this._terminal.cols) {\n      throw new Error(`Invalid col: ${startCol} to search in terminal of ${this._terminal.cols} cols`);\n    }\n\n    let result: ISearchResult | undefined = undefined;\n\n    this._initLinesCache();\n\n    const searchPosition: ISearchPosition = {\n      startRow,\n      startCol\n    };\n\n    // Search startRow\n    result = this._findInLine(term, searchPosition, searchOptions);\n    // Search from startRow + 1 to end\n    if (!result) {\n\n      for (let y = startRow + 1; y < this._terminal.buffer.active.baseY + this._terminal.rows; y++) {\n        searchPosition.startRow = y;\n        searchPosition.startCol = 0;\n        // If the current line is wrapped line, increase index of column to ignore the previous scan\n        // Otherwise, reset beginning column index to zero with set new unwrapped line index\n        result = this._findInLine(term, searchPosition, searchOptions);\n        if (result) {\n          break;\n        }\n      }\n    }\n    return result;\n  }\n\n  private _findNextAndSelect(term: string, searchOptions?: ISearchOptions): boolean {\n    if (!this._terminal || !term || term.length === 0) {\n      this._terminal?.clearSelection();\n      this.clearDecorations();\n      this._cachedSearchTerm = undefined;\n      this._resultIndex = -1;\n      return false;\n    }\n\n    if (this._cachedSearchTerm !== term) {\n      this._resultIndex = undefined;\n      this._terminal.clearSelection();\n    }\n\n    let startCol = 0;\n    let startRow = 0;\n    let currentSelection: IBufferRange | undefined;\n    if (this._terminal.hasSelection()) {\n      const incremental = searchOptions ? searchOptions.incremental : false;\n      // Start from the selection end if there is a selection\n      // For incremental search, use existing row\n      currentSelection = this._terminal.getSelectionPosition()!;\n      startRow = incremental ? currentSelection.start.y : currentSelection.end.y;\n      startCol = incremental ? currentSelection.start.x : currentSelection.end.x;\n    }\n\n    this._initLinesCache();\n\n    const searchPosition: ISearchPosition = {\n      startRow,\n      startCol\n    };\n\n    // Search startRow\n    let result = this._findInLine(term, searchPosition, searchOptions);\n    // Search from startRow + 1 to end\n    if (!result) {\n\n      for (let y = startRow + 1; y < this._terminal.buffer.active.baseY + this._terminal.rows; y++) {\n        searchPosition.startRow = y;\n        searchPosition.startCol = 0;\n        // If the current line is wrapped line, increase index of column to ignore the previous scan\n        // Otherwise, reset beginning column index to zero with set new unwrapped line index\n        result = this._findInLine(term, searchPosition, searchOptions);\n        if (result) {\n          break;\n        }\n      }\n    }\n    // If we hit the bottom and didn't search from the very top wrap back up\n    if (!result && startRow !== 0) {\n      for (let y = 0; y < startRow; y++) {\n        searchPosition.startRow = y;\n        searchPosition.startCol = 0;\n        result = this._findInLine(term, searchPosition, searchOptions);\n        if (result) {\n          break;\n        }\n      }\n    }\n\n    // If there is only one result, wrap back and return selection if it exists.\n    if (!result && currentSelection) {\n      searchPosition.startRow = currentSelection.start.y;\n      searchPosition.startCol = 0;\n      result = this._findInLine(term, searchPosition, searchOptions);\n    }\n\n    if (this._searchResults) {\n      if (this._searchResults.size === 0) {\n        this._resultIndex = -1;\n      } else if (this._resultIndex === undefined) {\n        this._resultIndex = 0;\n      } else {\n        this._resultIndex++;\n        if (this._resultIndex >= this._searchResults.size) {\n          this._resultIndex = 0;\n        }\n      }\n    }\n    // Set selection and scroll if a result was found\n    return this._selectResult(result, searchOptions?.decorations, searchOptions?.noScroll);\n  }\n  /**\n   * Find the previous instance of the term, then scroll to and select it. If it\n   * doesn't exist, do nothing.\n   * @param term The search term.\n   * @param searchOptions Search options.\n   * @returns Whether a result was found.\n   */\n  public findPrevious(term: string, searchOptions?: ISearchOptions): boolean {\n    if (!this._terminal) {\n      throw new Error('Cannot use addon until it has been loaded');\n    }\n    this._lastSearchOptions = searchOptions;\n    if (searchOptions?.decorations) {\n      if (this._resultIndex !== undefined || this._cachedSearchTerm === undefined || term !== this._cachedSearchTerm) {\n        this._highlightAllMatches(term, searchOptions);\n      }\n    }\n    return this._fireResults(term, this._findPreviousAndSelect(term, searchOptions), searchOptions);\n  }\n\n  private _fireResults(term: string, found: boolean, searchOptions?: ISearchOptions): boolean {\n    if (searchOptions?.decorations) {\n      if (this._resultIndex !== undefined && this._searchResults?.size !== undefined) {\n        this._onDidChangeResults.fire({ resultIndex: this._resultIndex, resultCount: this._searchResults.size });\n      } else {\n        this._onDidChangeResults.fire(undefined);\n      }\n    }\n    this._cachedSearchTerm = term;\n    return found;\n  }\n\n  private _findPreviousAndSelect(term: string, searchOptions?: ISearchOptions): boolean {\n    if (!this._terminal) {\n      throw new Error('Cannot use addon until it has been loaded');\n    }\n    let result: ISearchResult | undefined;\n    if (!this._terminal || !term || term.length === 0) {\n      result = undefined;\n      this._terminal?.clearSelection();\n      this.clearDecorations();\n      this._resultIndex = -1;\n      return false;\n    }\n\n    if (this._cachedSearchTerm !== term) {\n      this._resultIndex = undefined;\n      this._terminal.clearSelection();\n    }\n\n    let startRow = this._terminal.buffer.active.baseY + this._terminal.rows;\n    let startCol = this._terminal.cols;\n    const isReverseSearch = true;\n\n    const incremental = searchOptions ? searchOptions.incremental : false;\n    let currentSelection: IBufferRange | undefined;\n    if (this._terminal.hasSelection()) {\n      currentSelection = this._terminal.getSelectionPosition()!;\n      // Start from selection start if there is a selection\n      startRow = currentSelection.start.y;\n      startCol = currentSelection.start.x;\n    }\n\n    this._initLinesCache();\n    const searchPosition: ISearchPosition = {\n      startRow,\n      startCol\n    };\n\n    if (incremental) {\n      // Try to expand selection to right first.\n      result = this._findInLine(term, searchPosition, searchOptions, false);\n      const isOldResultHighlighted = result && result.row === startRow && result.col === startCol;\n      if (!isOldResultHighlighted) {\n        // If selection was not able to be expanded to the right, then try reverse search\n        if (currentSelection) {\n          searchPosition.startRow = currentSelection.end.y;\n          searchPosition.startCol = currentSelection.end.x;\n        }\n        result = this._findInLine(term, searchPosition, searchOptions, true);\n      }\n    } else {\n      result = this._findInLine(term, searchPosition, searchOptions, isReverseSearch);\n    }\n\n    // Search from startRow - 1 to top\n    if (!result) {\n      searchPosition.startCol = Math.max(searchPosition.startCol, this._terminal.cols);\n      for (let y = startRow - 1; y >= 0; y--) {\n        searchPosition.startRow = y;\n        result = this._findInLine(term, searchPosition, searchOptions, isReverseSearch);\n        if (result) {\n          break;\n        }\n      }\n    }\n    // If we hit the top and didn't search from the very bottom wrap back down\n    if (!result && startRow !== (this._terminal.buffer.active.baseY + this._terminal.rows)) {\n      for (let y = (this._terminal.buffer.active.baseY + this._terminal.rows); y >= startRow; y--) {\n        searchPosition.startRow = y;\n        result = this._findInLine(term, searchPosition, searchOptions, isReverseSearch);\n        if (result) {\n          break;\n        }\n      }\n    }\n\n    if (this._searchResults) {\n      if (this._searchResults.size === 0) {\n        this._resultIndex = -1;\n      } else if (this._resultIndex === undefined || this._resultIndex < 0) {\n        this._resultIndex = this._searchResults.size - 1;\n      } else {\n        this._resultIndex--;\n        if (this._resultIndex === -1) {\n          this._resultIndex = this._searchResults.size - 1;\n        }\n      }\n    }\n\n    // If there is only one result, return true.\n    if (!result && currentSelection) return true;\n\n    // Set selection and scroll if a result was found\n    return this._selectResult(result, searchOptions?.decorations, searchOptions?.noScroll);\n  }\n\n  /**\n   * Sets up a line cache with a ttl\n   */\n  private _initLinesCache(): void {\n    const terminal = this._terminal!;\n    if (!this._linesCache) {\n      this._linesCache = new Array(terminal.buffer.active.length);\n      this._cursorMoveListener = terminal.onCursorMove(() => this._destroyLinesCache());\n      this._resizeListener = terminal.onResize(() => this._destroyLinesCache());\n    }\n\n    window.clearTimeout(this._linesCacheTimeoutId);\n    this._linesCacheTimeoutId = window.setTimeout(() => this._destroyLinesCache(), LINES_CACHE_TIME_TO_LIVE);\n  }\n\n  private _destroyLinesCache(): void {\n    this._linesCache = undefined;\n    if (this._cursorMoveListener) {\n      this._cursorMoveListener.dispose();\n      this._cursorMoveListener = undefined;\n    }\n    if (this._resizeListener) {\n      this._resizeListener.dispose();\n      this._resizeListener = undefined;\n    }\n    if (this._linesCacheTimeoutId) {\n      window.clearTimeout(this._linesCacheTimeoutId);\n      this._linesCacheTimeoutId = 0;\n    }\n  }\n\n  /**\n   * A found substring is a whole word if it doesn't have an alphanumeric character directly adjacent to it.\n   * @param searchIndex starting indext of the potential whole word substring\n   * @param line entire string in which the potential whole word was found\n   * @param term the substring that starts at searchIndex\n   */\n  private _isWholeWord(searchIndex: number, line: string, term: string): boolean {\n    return ((searchIndex === 0) || (NON_WORD_CHARACTERS.includes(line[searchIndex - 1]))) &&\n      (((searchIndex + term.length) === line.length) || (NON_WORD_CHARACTERS.includes(line[searchIndex + term.length])));\n  }\n\n  /**\n   * Searches a line for a search term. Takes the provided terminal line and searches the text line, which may contain\n   * subsequent terminal lines if the text is wrapped. If the provided line number is part of a wrapped text line that\n   * started on an earlier line then it is skipped since it will be properly searched when the terminal line that the\n   * text starts on is searched.\n   * @param term The search term.\n   * @param searchPosition The position to start the search.\n   * @param searchOptions Search options.\n   * @param isReverseSearch Whether the search should start from the right side of the terminal and search to the left.\n   * @returns The search result if it was found.\n   */\n  protected _findInLine(term: string, searchPosition: ISearchPosition, searchOptions: ISearchOptions = {}, isReverseSearch: boolean = false): ISearchResult | undefined {\n    const terminal = this._terminal!;\n    const row = searchPosition.startRow;\n    const col = searchPosition.startCol;\n\n    // Ignore wrapped lines, only consider on unwrapped line (first row of command string).\n    const firstLine = terminal.buffer.active.getLine(row);\n    if (firstLine?.isWrapped) {\n      if (isReverseSearch) {\n        searchPosition.startCol += terminal.cols;\n        return;\n      }\n\n      // This will iterate until we find the line start.\n      // When we find it, we will search using the calculated start column.\n      searchPosition.startRow--;\n      searchPosition.startCol += terminal.cols;\n      return this._findInLine(term, searchPosition, searchOptions);\n    }\n    let cache = this._linesCache?.[row];\n    if (!cache) {\n      cache = this._translateBufferLineToStringWithWrap(row, true);\n      if (this._linesCache) {\n        this._linesCache[row] = cache;\n      }\n    }\n    const [stringLine, offsets] = cache;\n\n    const offset = this._bufferColsToStringOffset(row, col);\n    const searchTerm = searchOptions.caseSensitive ? term : term.toLowerCase();\n    const searchStringLine = searchOptions.caseSensitive ? stringLine : stringLine.toLowerCase();\n\n    let resultIndex = -1;\n    if (searchOptions.regex) {\n      const searchRegex = RegExp(searchTerm, 'g');\n      let foundTerm: RegExpExecArray | null;\n      if (isReverseSearch) {\n        // This loop will get the resultIndex of the _last_ regex match in the range 0..offset\n        while (foundTerm = searchRegex.exec(searchStringLine.slice(0, offset))) {\n          resultIndex = searchRegex.lastIndex - foundTerm[0].length;\n          term = foundTerm[0];\n          searchRegex.lastIndex -= (term.length - 1);\n        }\n      } else {\n        foundTerm = searchRegex.exec(searchStringLine.slice(offset));\n        if (foundTerm && foundTerm[0].length > 0) {\n          resultIndex = offset + (searchRegex.lastIndex - foundTerm[0].length);\n          term = foundTerm[0];\n        }\n      }\n    } else {\n      if (isReverseSearch) {\n        if (offset - searchTerm.length >= 0) {\n          resultIndex = searchStringLine.lastIndexOf(searchTerm, offset - searchTerm.length);\n        }\n      } else {\n        resultIndex = searchStringLine.indexOf(searchTerm, offset);\n      }\n    }\n\n    if (resultIndex >= 0) {\n      if (searchOptions.wholeWord && !this._isWholeWord(resultIndex, searchStringLine, term)) {\n        return;\n      }\n\n      // Adjust the row number and search index if needed since a \"line\" of text can span multiple rows\n      let startRowOffset = 0;\n      while (startRowOffset < offsets.length - 1 && resultIndex >= offsets[startRowOffset + 1]) {\n        startRowOffset++;\n      }\n      let endRowOffset = startRowOffset;\n      while (endRowOffset < offsets.length - 1 && resultIndex + term.length >= offsets[endRowOffset + 1]) {\n        endRowOffset++;\n      }\n      const startColOffset = resultIndex - offsets[startRowOffset];\n      const endColOffset = resultIndex + term.length - offsets[endRowOffset];\n      const startColIndex = this._stringLengthToBufferSize(row + startRowOffset, startColOffset);\n      const endColIndex = this._stringLengthToBufferSize(row + endRowOffset, endColOffset);\n      const size = endColIndex - startColIndex + terminal.cols * (endRowOffset - startRowOffset);\n\n      return {\n        term,\n        col: startColIndex,\n        row: row + startRowOffset,\n        size\n      };\n    }\n  }\n\n  private _stringLengthToBufferSize(row: number, offset: number): number {\n    const line = this._terminal!.buffer.active.getLine(row);\n    if (!line) {\n      return 0;\n    }\n    for (let i = 0; i < offset; i++) {\n      const cell = line.getCell(i);\n      if (!cell) {\n        break;\n      }\n      // Adjust the searchIndex to normalize emoji into single chars\n      const char = cell.getChars();\n      if (char.length > 1) {\n        offset -= char.length - 1;\n      }\n      // Adjust the searchIndex for empty characters following wide unicode\n      // chars (eg. CJK)\n      const nextCell = line.getCell(i + 1);\n      if (nextCell && nextCell.getWidth() === 0) {\n        offset++;\n      }\n    }\n    return offset;\n  }\n\n  private _bufferColsToStringOffset(startRow: number, cols: number): number {\n    const terminal = this._terminal!;\n    let lineIndex = startRow;\n    let offset = 0;\n    let line = terminal.buffer.active.getLine(lineIndex);\n    while (cols > 0 && line) {\n      for (let i = 0; i < cols && i < terminal.cols; i++) {\n        const cell = line.getCell(i);\n        if (!cell) {\n          break;\n        }\n        if (cell.getWidth()) {\n          // Treat null characters as whitespace to align with the translateToString API\n          offset += cell.getCode() === 0 ? 1 : cell.getChars().length;\n        }\n      }\n      lineIndex++;\n      line = terminal.buffer.active.getLine(lineIndex);\n      if (line && !line.isWrapped) {\n        break;\n      }\n      cols -= terminal.cols;\n    }\n    return offset;\n  }\n\n  /**\n   * Translates a buffer line to a string, including subsequent lines if they are wraps.\n   * Wide characters will count as two columns in the resulting string. This\n   * function is useful for getting the actual text underneath the raw selection\n   * position.\n   * @param lineIndex The index of the line being translated.\n   * @param trimRight Whether to trim whitespace to the right.\n   */\n  private _translateBufferLineToStringWithWrap(lineIndex: number, trimRight: boolean): LineCacheEntry {\n    const terminal = this._terminal!;\n    const strings = [];\n    const lineOffsets = [0];\n    let line = terminal.buffer.active.getLine(lineIndex);\n    while (line) {\n      const nextLine = terminal.buffer.active.getLine(lineIndex + 1);\n      const lineWrapsToNext = nextLine ? nextLine.isWrapped : false;\n      let string = line.translateToString(!lineWrapsToNext && trimRight);\n      if (lineWrapsToNext && nextLine) {\n        const lastCell = line.getCell(line.length - 1);\n        const lastCellIsNull = lastCell && lastCell.getCode() === 0 && lastCell.getWidth() === 1;\n        // a wide character wrapped to the next line\n        if (lastCellIsNull && nextLine.getCell(0)?.getWidth() === 2) {\n          string = string.slice(0, -1);\n        }\n      }\n      strings.push(string);\n      if (lineWrapsToNext) {\n        lineOffsets.push(lineOffsets[lineOffsets.length - 1] + string.length);\n      } else {\n        break;\n      }\n      lineIndex++;\n      line = nextLine;\n    }\n    return [strings.join(''), lineOffsets];\n  }\n\n  /**\n   * Selects and scrolls to a result.\n   * @param result The result to select.\n   * @returns Whether a result was selected.\n   */\n  private _selectResult(result: ISearchResult | undefined, options?: ISearchDecorationOptions, noScroll?: boolean): boolean {\n    const terminal = this._terminal!;\n    this.clearActiveDecoration();\n    if (!result) {\n      terminal.clearSelection();\n      return false;\n    }\n    terminal.select(result.col, result.row, result.size);\n    if (options) {\n      const marker = terminal.registerMarker(-terminal.buffer.active.baseY - terminal.buffer.active.cursorY + result.row);\n      if (marker) {\n        this._selectedDecoration = terminal.registerDecoration({\n          marker,\n          x: result.col,\n          width: result.size,\n          backgroundColor: options.activeMatchBackground,\n          layer: 'top',\n          overviewRulerOptions: {\n            color: options.activeMatchColorOverviewRuler\n          }\n        });\n        this._selectedDecoration?.onRender((e) => this._applyStyles(e, options.activeMatchBorder, true));\n        this._selectedDecoration?.onDispose(() => marker.dispose());\n      }\n    }\n\n    if (!noScroll) {\n      // If it is not in the viewport then we scroll else it just gets selected\n      if (result.row >= (terminal.buffer.active.viewportY + terminal.rows) || result.row < terminal.buffer.active.viewportY) {\n        let scroll = result.row - terminal.buffer.active.viewportY;\n        scroll -= Math.floor(terminal.rows / 2);\n        terminal.scrollLines(scroll);\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Applies styles to the decoration when it is rendered.\n   * @param element The decoration's element.\n   * @param borderColor The border color to apply.\n   * @param isActiveResult Whether the element is part of the active search result.\n   * @returns\n   */\n  private _applyStyles(element: HTMLElement, borderColor: string | undefined, isActiveResult: boolean): void {\n    if (element.clientWidth <= 0) {\n      return;\n    }\n    if (!element.classList.contains('xterm-find-result-decoration')) {\n      element.classList.add('xterm-find-result-decoration');\n      if (borderColor) {\n        element.style.outline = `1px solid ${borderColor}`;\n      }\n    }\n    if (isActiveResult) {\n      element.classList.add('xterm-find-active-result-decoration');\n    }\n  }\n\n  /**\n   * Creates a decoration for the result and applies styles\n   * @param result the search result for which to create the decoration\n   * @param options the options for the decoration\n   * @returns the {@link IDecoration} or undefined if the marker has already been disposed of\n   */\n  private _createResultDecoration(result: ISearchResult, options: ISearchDecorationOptions): IDecoration | undefined {\n    const terminal = this._terminal!;\n    const marker = terminal.registerMarker(-terminal.buffer.active.baseY - terminal.buffer.active.cursorY + result.row);\n    if (!marker) {\n      return undefined;\n    }\n    const findResultDecoration = terminal.registerDecoration({\n      marker,\n      x: result.col,\n      width: result.size,\n      backgroundColor: options.matchBackground,\n      overviewRulerOptions: this._resultDecorations?.get(marker.line) ? undefined : {\n        color: options.matchOverviewRuler,\n        position: 'center'\n      }\n    });\n    findResultDecoration?.onRender((e) => this._applyStyles(e, options.matchBorder, false));\n    findResultDecoration?.onDispose(() => marker.dispose());\n    return findResultDecoration;\n  }\n}\n"],"names":["root","factory","exports","module","define","amd","self","_listeners","_disposed","event","this","_event","listener","push","dispose","i","length","splice","fire","arg1","arg2","queue","call","undefined","from","to","e","disposeArray","disposables","d","constructor","_disposables","_isDisposed","register","unregister","index","indexOf","f","array","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","NON_WORD_CHARACTERS","SearchAddon","Disposable","_linesCacheTimeoutId","_onDidChangeResults","EventEmitter","onDidChangeResults","activate","terminal","_terminal","_onDataDisposable","onWriteParsed","_updateMatches","_onResizeDisposable","onResize","toDisposable","clearDecorations","_highlightTimeout","window","clearTimeout","_cachedSearchTerm","_lastSearchOptions","decorations","setTimeout","findPrevious","incremental","noScroll","_resultIndex","_searchResults","size","resultIndex","resultCount","retainCachedSearchTerm","_selectedDecoration","clear","_resultDecorations","forEach","clearActiveDecoration","findNext","term","searchOptions","Error","_highlightAllMatches","_fireResults","_findNextAndSelect","Map","resultDecorations","result","_find","get","row","col","set","cols","resultDecoration","_createResultDecoration","decorationsForLine","marker","line","startRow","startCol","clearSelection","_initLinesCache","searchPosition","_findInLine","y","buffer","active","baseY","rows","currentSelection","hasSelection","getSelectionPosition","start","end","x","_selectResult","_findPreviousAndSelect","found","isReverseSearch","Math","max","_linesCache","Array","_cursorMoveListener","onCursorMove","_destroyLinesCache","_resizeListener","_isWholeWord","searchIndex","includes","firstLine","getLine","isWrapped","cache","_translateBufferLineToStringWithWrap","stringLine","offsets","offset","_bufferColsToStringOffset","searchTerm","caseSensitive","toLowerCase","searchStringLine","regex","searchRegex","RegExp","foundTerm","exec","slice","lastIndex","lastIndexOf","wholeWord","startRowOffset","endRowOffset","startColOffset","endColOffset","startColIndex","_stringLengthToBufferSize","cell","getCell","char","getChars","nextCell","getWidth","lineIndex","getCode","trimRight","strings","lineOffsets","nextLine","lineWrapsToNext","string","translateToString","lastCell","join","options","select","registerMarker","cursorY","registerDecoration","width","backgroundColor","activeMatchBackground","layer","overviewRulerOptions","color","activeMatchColorOverviewRuler","onRender","_applyStyles","activeMatchBorder","onDispose","viewportY","scroll","floor","scrollLines","element","borderColor","isActiveResult","clientWidth","classList","contains","add","style","outline","findResultDecoration","matchBackground","matchOverviewRuler","position","matchBorder"],"sourceRoot":""}