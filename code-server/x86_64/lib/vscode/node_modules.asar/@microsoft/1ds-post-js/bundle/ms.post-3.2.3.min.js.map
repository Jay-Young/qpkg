{"version":3,"file":"ms.post-3.2.3.min.js","sources":["../../../common/temp/node_modules/@microsoft/applicationinsights-shims/dist-esm/Constants.js","../../../common/temp/node_modules/@microsoft/applicationinsights-shims/dist-esm/Helpers.js","../../../common/temp/node_modules/@microsoft/applicationinsights-shims/dist-esm/TsLibShims.js","../../../common/temp/node_modules/@microsoft/dynamicproto-js/lib/dist/esm/dynamicproto-js.js","../../../common/temp/node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/InternalConstants.js","../../../common/temp/node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/HelperFuncs.js","../../../common/temp/node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK.Enums/EnumHelperFuncs.js","../../../common/temp/node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK.Enums/EventsDiscardedReason.js","../../../common/temp/node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/EnvUtils.js","../../../common/temp/node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/DbgExtensionUtils.js","../../../common/temp/node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/DiagnosticLogger.js","../../../common/temp/node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/PerfManager.js","../../../common/temp/node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/RandomHelper.js","../../../common/temp/node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/DataCacheHelper.js","../../../common/temp/node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/EventHelpers.js","../../../common/temp/node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/TelemetryHelpers.js","../../../common/temp/node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/ProcessTelemetryContext.js","../../../common/temp/node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/UnloadHandlerContainer.js","../../../common/temp/node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/BaseTelemetryPlugin.js","../../../common/temp/node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/Constants.js","../../../shared/core/dist-esm/src/Utils.js","../../../common/temp/node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/CoreUtils.js","../dist-esm/src/DataModels.js","../dist-esm/src/Constants.js","../dist-esm/src/EventBatch.js","../dist-esm/src/Serializer.js","../dist-esm/src/RetryPolicy.js","../dist-esm/src/KillSwitch.js","../dist-esm/src/ClockSkewManager.js","../dist-esm/src/HttpManager.js","../dist-esm/src/TimeoutOverrideWrapper.js","../dist-esm/src/PostChannel.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nexport var strShimFunction = \"function\";\r\nexport var strShimObject = \"object\";\r\nexport var strShimUndefined = \"undefined\";\r\nexport var strShimPrototype = \"prototype\";\r\nexport var strShimHasOwnProperty = \"hasOwnProperty\";\r\nexport var strDefault = \"default\";\r\nexport var ObjClass = Object;\r\nexport var ObjProto = ObjClass[strShimPrototype];\r\nexport var ObjAssign = ObjClass[\"assign\"];\r\nexport var ObjCreate = ObjClass[\"create\"];\r\nexport var ObjDefineProperty = ObjClass[\"defineProperty\"];\r\nexport var ObjHasOwnProperty = ObjProto[strShimHasOwnProperty];\r\n//# sourceMappingURL=Constants.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { ObjCreate, strShimFunction, strShimObject, strShimPrototype, strShimUndefined } from \"./Constants\";\r\nvar _cachedGlobal = null;\r\n/**\r\n * Returns the current global scope object, for a normal web page this will be the current\r\n * window, for a Web Worker this will be current worker global scope via \"self\". The internal\r\n * implementation returns the first available instance object in the following order\r\n * - globalThis (New standard)\r\n * - self (Will return the current window instance for supported browsers)\r\n * - window (fallback for older browser implementations)\r\n * - global (NodeJS standard)\r\n * - <null> (When all else fails)\r\n * While the return type is a Window for the normal case, not all environments will support all\r\n * of the properties or functions.\r\n */\r\nexport function getGlobal(useCached) {\r\n    if (useCached === void 0) { useCached = true; }\r\n    if (!_cachedGlobal || !useCached) {\r\n        if (typeof globalThis !== strShimUndefined && globalThis) {\r\n            _cachedGlobal = globalThis;\r\n        }\r\n        if (typeof self !== strShimUndefined && self) {\r\n            _cachedGlobal = self;\r\n        }\r\n        if (typeof window !== strShimUndefined && window) {\r\n            _cachedGlobal = window;\r\n        }\r\n        if (typeof global !== strShimUndefined && global) {\r\n            _cachedGlobal = global;\r\n        }\r\n    }\r\n    return _cachedGlobal;\r\n}\r\nexport function throwTypeError(message) {\r\n    throw new TypeError(message);\r\n}\r\n/**\r\n * Creates an object that has the specified prototype, and that optionally contains specified properties. This helper exists to avoid adding a polyfil\r\n * for older browsers that do not define Object.create eg. ES3 only, IE8 just in case any page checks for presence/absence of the prototype implementation.\r\n * Note: For consistency this will not use the Object.create implementation if it exists as this would cause a testing requirement to test with and without the implementations\r\n * @param obj Object to use as a prototype. May be null\r\n */\r\nexport function objCreateFn(obj) {\r\n    var func = ObjCreate;\r\n    // Use build in Object.create\r\n    if (func) {\r\n        // Use Object create method if it exists\r\n        return func(obj);\r\n    }\r\n    if (obj == null) {\r\n        return {};\r\n    }\r\n    var type = typeof obj;\r\n    if (type !== strShimObject && type !== strShimFunction) {\r\n        throwTypeError(\"Object prototype may only be an Object:\" + obj);\r\n    }\r\n    function tmpFunc() { }\r\n    tmpFunc[strShimPrototype] = obj;\r\n    return new tmpFunc();\r\n}\r\n//# sourceMappingURL=Helpers.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { ObjAssign, ObjClass, ObjCreate, ObjDefineProperty, ObjHasOwnProperty, ObjProto, strDefault, strShimFunction, strShimHasOwnProperty, strShimPrototype } from \"./Constants\";\r\nimport { getGlobal, objCreateFn, throwTypeError } from \"./Helpers\";\r\n// Most of these functions have been directly shamelessly \"lifted\" from the https://github.com/@microsoft/tslib and\r\n// modified to be ES3 compatible and applying several minification and tree-shaking techniques so that Application Insights\r\n// can successfully use TypeScript \"importHelpers\" which imports tslib during compilation but it will use these at runtime\r\n// Which is also why all of the functions have not been included as Application Insights currently doesn't use or require\r\n// them.\r\nexport var SymbolObj = (getGlobal() || {})[\"Symbol\"];\r\nexport var ReflectObj = (getGlobal() || {})[\"Reflect\"];\r\nexport var __hasSymbol = !!SymbolObj;\r\nexport var __hasReflect = !!ReflectObj;\r\nvar strDecorate = \"decorate\";\r\nvar strMetadata = \"metadata\";\r\nvar strGetOwnPropertySymbols = \"getOwnPropertySymbols\";\r\nvar strIterator = \"iterator\";\r\nexport var __objAssignFnImpl = function (t) {\r\n    // tslint:disable-next-line: ban-comma-operator\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) {\r\n            if (ObjProto[strShimHasOwnProperty].call(s, p)) {\r\n                t[p] = s[p];\r\n            }\r\n        }\r\n    }\r\n    return t;\r\n};\r\nexport var __assignFn = ObjAssign || __objAssignFnImpl;\r\n// tslint:disable-next-line: only-arrow-functions\r\nvar extendStaticsFn = function (d, b) {\r\n    extendStaticsFn = ObjClass[\"setPrototypeOf\"] ||\r\n        // tslint:disable-next-line: only-arrow-functions\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        // tslint:disable-next-line: only-arrow-functions\r\n        function (d, b) {\r\n            for (var p in b) {\r\n                if (b[strShimHasOwnProperty](p)) {\r\n                    d[p] = b[p];\r\n                }\r\n            }\r\n        };\r\n    return extendStaticsFn(d, b);\r\n};\r\nexport function __extendsFn(d, b) {\r\n    if (typeof b !== strShimFunction && b !== null) {\r\n        throwTypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    }\r\n    extendStaticsFn(d, b);\r\n    function __() { this.constructor = d; }\r\n    // tslint:disable-next-line: ban-comma-operator\r\n    d[strShimPrototype] = b === null ? objCreateFn(b) : (__[strShimPrototype] = b[strShimPrototype], new __());\r\n}\r\nexport function __restFn(s, e) {\r\n    var t = {};\r\n    for (var k in s) {\r\n        if (ObjHasOwnProperty.call(s, k) && e.indexOf(k) < 0) {\r\n            t[k] = s[k];\r\n        }\r\n    }\r\n    if (s != null && typeof ObjClass[strGetOwnPropertySymbols] === strShimFunction) {\r\n        for (var i = 0, p = ObjClass[strGetOwnPropertySymbols](s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && ObjProto[\"propertyIsEnumerable\"].call(s, p[i])) {\r\n                t[p[i]] = s[p[i]];\r\n            }\r\n        }\r\n    }\r\n    return t;\r\n}\r\nexport function __decorateFn(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = ObjClass[\"getOwnPropertyDescriptor\"](target, key) : desc, d;\r\n    if (__hasReflect && typeof ReflectObj[strDecorate] === strShimFunction) {\r\n        r = ReflectObj[strDecorate](decorators, target, key, desc);\r\n    }\r\n    else {\r\n        for (var i = decorators.length - 1; i >= 0; i--) {\r\n            // eslint-disable-next-line no-cond-assign\r\n            if (d = decorators[i]) {\r\n                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n            }\r\n        }\r\n    }\r\n    // tslint:disable-next-line:ban-comma-operator\r\n    return c > 3 && r && ObjDefineProperty(target, key, r), r;\r\n}\r\nexport function __paramFn(paramIndex, decorator) {\r\n    return function (target, key) {\r\n        decorator(target, key, paramIndex);\r\n    };\r\n}\r\nexport function __metadataFn(metadataKey, metadataValue) {\r\n    if (__hasReflect && ReflectObj[strMetadata] === strShimFunction) {\r\n        return ReflectObj[strMetadata](metadataKey, metadataValue);\r\n    }\r\n}\r\nexport function __exportStarFn(m, o) {\r\n    for (var p in m) {\r\n        if (p !== strDefault && !ObjHasOwnProperty.call(o, p)) {\r\n            __createBindingFn(o, m, p);\r\n        }\r\n    }\r\n}\r\nexport function __createBindingFn(o, m, k, k2) {\r\n    if (k2 === undefined) {\r\n        k2 = k;\r\n    }\r\n    if (ObjCreate) {\r\n        ObjDefineProperty(o, k2, {\r\n            enumerable: true,\r\n            get: function () {\r\n                return m[k];\r\n            }\r\n        });\r\n    }\r\n    else {\r\n        o[k2] = m[k];\r\n    }\r\n}\r\nexport function __valuesFn(o) {\r\n    var s = typeof SymbolObj === strShimFunction && SymbolObj[strIterator], m = s && o[s], i = 0;\r\n    if (m) {\r\n        return m.call(o);\r\n    }\r\n    if (o && typeof o.length === \"number\") {\r\n        return {\r\n            next: function () {\r\n                if (o && i >= o.length) {\r\n                    o = void 0;\r\n                }\r\n                return { value: o && o[i++], done: !o };\r\n            }\r\n        };\r\n    }\r\n    throwTypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\nexport function __readFn(o, n) {\r\n    var m = typeof SymbolObj === strShimFunction && o[SymbolObj[strIterator]];\r\n    if (!m) {\r\n        return o;\r\n    }\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\r\n            ar.push(r.value);\r\n        }\r\n    }\r\n    catch (error) {\r\n        e = {\r\n            error: error\r\n        };\r\n    }\r\n    finally {\r\n        try {\r\n            // tslint:disable-next-line:no-conditional-assignment\r\n            if (r && !r.done && (m = i[\"return\"])) {\r\n                m.call(i);\r\n            }\r\n        }\r\n        finally {\r\n            if (e) {\r\n                // eslint-disable-next-line no-unsafe-finally\r\n                throw e.error;\r\n            }\r\n        }\r\n    }\r\n    return ar;\r\n}\r\n/** @deprecated */\r\nexport function __spreadArraysFn() {\r\n    var theArgs = arguments;\r\n    // Calculate new total size\r\n    for (var s = 0, i = 0, il = theArgs.length; i < il; i++) {\r\n        s += theArgs[i].length;\r\n    }\r\n    // Create new full array\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++) {\r\n        for (var a = theArgs[i], j = 0, jl = a.length; j < jl; j++, k++) {\r\n            r[k] = a[j];\r\n        }\r\n    }\r\n    return r;\r\n}\r\nexport function __spreadArrayFn(to, from) {\r\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) {\r\n        to[j] = from[i];\r\n    }\r\n    return to;\r\n}\r\nexport function __makeTemplateObjectFn(cooked, raw) {\r\n    if (ObjDefineProperty) {\r\n        ObjDefineProperty(cooked, \"raw\", { value: raw });\r\n    }\r\n    else {\r\n        cooked.raw = raw;\r\n    }\r\n    return cooked;\r\n}\r\nexport function __importStarFn(mod) {\r\n    if (mod && mod.__esModule) {\r\n        return mod;\r\n    }\r\n    var result = {};\r\n    if (mod != null) {\r\n        for (var k in mod) {\r\n            if (k !== strDefault && Object.prototype.hasOwnProperty.call(mod, k)) {\r\n                __createBindingFn(result, mod, k);\r\n            }\r\n        }\r\n    }\r\n    // Set default module\r\n    if (ObjCreate) {\r\n        ObjDefineProperty(result, strDefault, { enumerable: true, value: mod });\r\n    }\r\n    else {\r\n        result[strDefault] = mod;\r\n    }\r\n    return result;\r\n}\r\nexport function __importDefaultFn(mod) {\r\n    return (mod && mod.__esModule) ? mod : { strDefault: mod };\r\n}\r\n//# sourceMappingURL=TsLibShims.js.map","/*!\n * Microsoft Dynamic Proto Utility, 1.1.6\n * Copyright (c) Microsoft and contributors. All rights reserved.\n */\n/**\r\n * Constant string defined to support minimization\r\n * @ignore\r\n */\r\nvar Constructor = 'constructor';\r\n/**\r\n * Constant string defined to support minimization\r\n * @ignore\r\n */\r\nvar Prototype = 'prototype';\r\n/**\r\n * Constant string defined to support minimization\r\n * @ignore\r\n */\r\nvar strFunction = 'function';\r\n/**\r\n * Used to define the name of the instance function lookup table\r\n * @ignore\r\n */\r\nvar DynInstFuncTable = '_dynInstFuncs';\r\n/**\r\n * Name used to tag the dynamic prototype function\r\n * @ignore\r\n */\r\nvar DynProxyTag = '_isDynProxy';\r\n/**\r\n * Name added to a prototype to define the dynamic prototype \"class\" name used to lookup the function table\r\n * @ignore\r\n */\r\nvar DynClassName = '_dynClass';\r\n/**\r\n * Prefix added to the classname to avoid any name clashes with other instance level properties\r\n * @ignore\r\n */\r\nvar DynClassNamePrefix = '_dynCls$';\r\n/**\r\n * A tag which is used to check if we have already to attempted to set the instance function if one is not present\r\n * @ignore\r\n */\r\nvar DynInstChkTag = '_dynInstChk';\r\n/**\r\n * A tag which is used to check if we are allows to try and set an instance function is one is not present. Using the same\r\n * tag name as the function level but a different const name for readability only.\r\n */\r\nvar DynAllowInstChkTag = DynInstChkTag;\r\n/**\r\n * The global (imported) instances where the global performance options are stored\r\n */\r\nvar DynProtoDefaultOptions = '_dfOpts';\r\n/**\r\n * Value used as the name of a class when it cannot be determined\r\n * @ignore\r\n */\r\nvar UnknownValue = '_unknown_';\r\n/**\r\n * Constant string defined to support minimization\r\n * @ignore\r\n */\r\nvar str__Proto = \"__proto__\";\r\n/**\r\n * The polyfill version of __proto__ so that it doesn't cause issues for anyone not expecting it to exist\r\n */\r\nvar DynProtoBaseProto = \"_dyn\" + str__Proto;\r\n/**\r\n * Track the current prototype for IE8 as you can't look back to get the prototype\r\n */\r\nvar DynProtoCurrent = \"_dynInstProto\";\r\n/**\r\n * Constant string defined to support minimization\r\n * @ignore\r\n */\r\nvar strUseBaseInst = 'useBaseInst';\r\n/**\r\n * Constant string defined to support minimization\r\n * @ignore\r\n */\r\nvar strSetInstFuncs = 'setInstFuncs';\r\nvar Obj = Object;\r\n/**\r\n * Pre-lookup to check if we are running on a modern browser (i.e. not IE8)\r\n * @ignore\r\n */\r\nvar _objGetPrototypeOf = Obj[\"getPrototypeOf\"];\r\n/**\r\n * Pre-lookup to check for the existence of this function\r\n */\r\nvar _objGetOwnProps = Obj[\"getOwnPropertyNames\"];\r\n/**\r\n * Internal Global used to generate a unique dynamic class name, every new class will increase this value\r\n * @ignore\r\n */\r\nvar _dynamicNames = 0;\r\n/**\r\n * Helper to check if the object contains a property of the name\r\n * @ignore\r\n */\r\nfunction _hasOwnProperty(obj, prop) {\r\n    return obj && Obj[Prototype].hasOwnProperty.call(obj, prop);\r\n}\r\n/**\r\n * Helper used to check whether the target is an Object prototype or Array prototype\r\n * @ignore\r\n */\r\nfunction _isObjectOrArrayPrototype(target) {\r\n    return target && (target === Obj[Prototype] || target === Array[Prototype]);\r\n}\r\n/**\r\n * Helper used to check whether the target is an Object prototype, Array prototype or Function prototype\r\n * @ignore\r\n */\r\nfunction _isObjectArrayOrFunctionPrototype(target) {\r\n    return _isObjectOrArrayPrototype(target) || target === Function[Prototype];\r\n}\r\n/**\r\n * Helper used to get the prototype of the target object as getPrototypeOf is not available in an ES3 environment.\r\n * @ignore\r\n */\r\nfunction _getObjProto(target) {\r\n    var newProto;\r\n    if (target) {\r\n        // This method doesn't exist in older browsers (e.g. IE8)\r\n        if (_objGetPrototypeOf) {\r\n            return _objGetPrototypeOf(target);\r\n        }\r\n        var curProto = target[str__Proto] || target[Prototype] || (target[Constructor] ? target[Constructor][Prototype] : null);\r\n        // Using the pre-calculated value as IE8 doesn't support looking up the prototype of a prototype and thus fails for more than 1 base class\r\n        newProto = target[DynProtoBaseProto] || curProto;\r\n        if (!_hasOwnProperty(target, DynProtoBaseProto)) {\r\n            // As this prototype doesn't have this property then this is from an inherited class so newProto is the base to return so save it\r\n            // so we can look it up value (which for a multiple hierarchy dynamicProto will be the base class)\r\n            delete target[DynProtoCurrent]; // Delete any current value allocated to this instance so we pick up the value from prototype hierarchy\r\n            newProto = target[DynProtoBaseProto] = target[DynProtoCurrent] || target[DynProtoBaseProto];\r\n            target[DynProtoCurrent] = curProto;\r\n        }\r\n    }\r\n    return newProto;\r\n}\r\n/**\r\n * Helper to get the properties of an object, including none enumerable ones as functions on a prototype in ES6\r\n * are not enumerable.\r\n * @param target\r\n */\r\nfunction _forEachProp(target, func) {\r\n    var props = [];\r\n    if (_objGetOwnProps) {\r\n        props = _objGetOwnProps(target);\r\n    }\r\n    else {\r\n        for (var name_1 in target) {\r\n            if (typeof name_1 === \"string\" && _hasOwnProperty(target, name_1)) {\r\n                props.push(name_1);\r\n            }\r\n        }\r\n    }\r\n    if (props && props.length > 0) {\r\n        for (var lp = 0; lp < props.length; lp++) {\r\n            func(props[lp]);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Helper function to check whether the provided function name is a potential candidate for dynamic\r\n * callback and prototype generation.\r\n * @param target The target object, may be a prototype or class object\r\n * @param funcName The function name\r\n * @param skipOwn Skips the check for own property\r\n * @ignore\r\n */\r\nfunction _isDynamicCandidate(target, funcName, skipOwn) {\r\n    return (funcName !== Constructor && typeof target[funcName] === strFunction && (skipOwn || _hasOwnProperty(target, funcName)));\r\n}\r\n/**\r\n * Helper to throw a TypeError exception\r\n * @param message the message\r\n * @ignore\r\n */\r\nfunction _throwTypeError(message) {\r\n    throw new TypeError(\"DynamicProto: \" + message);\r\n}\r\n/**\r\n * Returns a collection of the instance functions that are defined directly on the thisTarget object, it does\r\n * not return any inherited functions\r\n * @param thisTarget The object to get the instance functions from\r\n * @ignore\r\n */\r\nfunction _getInstanceFuncs(thisTarget) {\r\n    // Get the base proto\r\n    var instFuncs = {};\r\n    // Save any existing instance functions\r\n    _forEachProp(thisTarget, function (name) {\r\n        // Don't include any dynamic prototype instances - as we only want the real functions\r\n        if (!instFuncs[name] && _isDynamicCandidate(thisTarget, name, false)) {\r\n            // Create an instance callback for passing the base function to the caller\r\n            instFuncs[name] = thisTarget[name];\r\n        }\r\n    });\r\n    return instFuncs;\r\n}\r\n/**\r\n * Returns whether the value is included in the array\r\n * @param values The array of values\r\n * @param value  The value\r\n */\r\nfunction _hasVisited(values, value) {\r\n    for (var lp = values.length - 1; lp >= 0; lp--) {\r\n        if (values[lp] === value) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * Returns an object that contains callback functions for all \"base/super\" functions, this is used to \"save\"\r\n * enabling calling super.xxx() functions without requiring that the base \"class\" has defined a prototype references\r\n * @param target The current instance\r\n * @ignore\r\n */\r\nfunction _getBaseFuncs(classProto, thisTarget, instFuncs, useBaseInst) {\r\n    function _instFuncProxy(target, funcHost, funcName) {\r\n        var theFunc = funcHost[funcName];\r\n        if (theFunc[DynProxyTag] && useBaseInst) {\r\n            // grab and reuse the hosted looking function (if available) otherwise the original passed function\r\n            var instFuncTable = target[DynInstFuncTable] || {};\r\n            if (instFuncTable[DynAllowInstChkTag] !== false) {\r\n                theFunc = (instFuncTable[funcHost[DynClassName]] || {})[funcName] || theFunc;\r\n            }\r\n        }\r\n        return function () {\r\n            // eslint-disable-next-line prefer-rest-params\r\n            return theFunc.apply(target, arguments);\r\n        };\r\n    }\r\n    // Start creating a new baseFuncs by creating proxies for the instance functions (as they may get replaced)\r\n    var baseFuncs = {};\r\n    _forEachProp(instFuncs, function (name) {\r\n        // Create an instance callback for passing the base function to the caller\r\n        baseFuncs[name] = _instFuncProxy(thisTarget, instFuncs, name);\r\n    });\r\n    // Get the base prototype functions\r\n    var baseProto = _getObjProto(classProto);\r\n    var visited = [];\r\n    // Don't include base object functions for Object, Array or Function\r\n    while (baseProto && !_isObjectArrayOrFunctionPrototype(baseProto) && !_hasVisited(visited, baseProto)) {\r\n        // look for prototype functions\r\n        _forEachProp(baseProto, function (name) {\r\n            // Don't include any dynamic prototype instances - as we only want the real functions\r\n            // For IE 7/8 the prototype lookup doesn't provide the full chain so we need to bypass the \r\n            // hasOwnProperty check we get all of the methods, main difference is that IE7/8 doesn't return\r\n            // the Object prototype methods while bypassing the check\r\n            if (!baseFuncs[name] && _isDynamicCandidate(baseProto, name, !_objGetPrototypeOf)) {\r\n                // Create an instance callback for passing the base function to the caller\r\n                baseFuncs[name] = _instFuncProxy(thisTarget, baseProto, name);\r\n            }\r\n        });\r\n        // We need to find all possible functions that might be overloaded by walking the entire prototype chain\r\n        // This avoids the caller from needing to check whether it's direct base class implements the function or not\r\n        // by walking the entire chain it simplifies the usage and issues from upgrading any of the base classes.\r\n        visited.push(baseProto);\r\n        baseProto = _getObjProto(baseProto);\r\n    }\r\n    return baseFuncs;\r\n}\r\nfunction _getInstFunc(target, funcName, proto, currentDynProtoProxy) {\r\n    var instFunc = null;\r\n    // We need to check whether the class name is defined directly on this prototype otherwise\r\n    // it will walk the proto chain and return any parent proto classname.\r\n    if (target && _hasOwnProperty(proto, DynClassName)) {\r\n        var instFuncTable = target[DynInstFuncTable] || {};\r\n        instFunc = (instFuncTable[proto[DynClassName]] || {})[funcName];\r\n        if (!instFunc) {\r\n            // Avoid stack overflow from recursive calling the same function\r\n            _throwTypeError(\"Missing [\" + funcName + \"] \" + strFunction);\r\n        }\r\n        // We have the instance function, lets check it we can speed up further calls\r\n        // by adding the instance function back directly on the instance (avoiding the dynamic func lookup)\r\n        if (!instFunc[DynInstChkTag] && instFuncTable[DynAllowInstChkTag] !== false) {\r\n            // If the instance already has an instance function we can't replace it\r\n            var canAddInst = !_hasOwnProperty(target, funcName);\r\n            // Get current prototype\r\n            var objProto = _getObjProto(target);\r\n            var visited = [];\r\n            // Lookup the function starting at the top (instance level prototype) and traverse down, if the first matching function\r\n            // if nothing is found or if the first hit is a dynamic proto instance then we can safely add an instance shortcut\r\n            while (canAddInst && objProto && !_isObjectArrayOrFunctionPrototype(objProto) && !_hasVisited(visited, objProto)) {\r\n                var protoFunc = objProto[funcName];\r\n                if (protoFunc) {\r\n                    canAddInst = (protoFunc === currentDynProtoProxy);\r\n                    break;\r\n                }\r\n                // We need to find all possible initial functions to ensure that we don't bypass a valid override function\r\n                visited.push(objProto);\r\n                objProto = _getObjProto(objProto);\r\n            }\r\n            try {\r\n                if (canAddInst) {\r\n                    // This instance doesn't have an instance func and the class hierarchy does have a higher level prototype version\r\n                    // so it's safe to directly assign for any subsequent calls (for better performance)\r\n                    target[funcName] = instFunc;\r\n                }\r\n                // Block further attempts to set the instance function for any\r\n                instFunc[DynInstChkTag] = 1;\r\n            }\r\n            catch (e) {\r\n                // Don't crash if the object is readonly or the runtime doesn't allow changing this\r\n                // And set a flag so we don't try again for any function\r\n                instFuncTable[DynAllowInstChkTag] = false;\r\n            }\r\n        }\r\n    }\r\n    return instFunc;\r\n}\r\nfunction _getProtoFunc(funcName, proto, currentDynProtoProxy) {\r\n    var protoFunc = proto[funcName];\r\n    // Check that the prototype function is not a self reference -- try to avoid stack overflow!\r\n    if (protoFunc === currentDynProtoProxy) {\r\n        // It is so lookup the base prototype\r\n        protoFunc = _getObjProto(proto)[funcName];\r\n    }\r\n    if (typeof protoFunc !== strFunction) {\r\n        _throwTypeError(\"[\" + funcName + \"] is not a \" + strFunction);\r\n    }\r\n    return protoFunc;\r\n}\r\n/**\r\n * Add the required dynamic prototype methods to the the class prototype\r\n * @param proto - The class prototype\r\n * @param className - The instance classname\r\n * @param target - The target instance\r\n * @param baseInstFuncs - The base instance functions\r\n * @param setInstanceFunc - Flag to allow prototype function to reset the instance function if one does not exist\r\n * @ignore\r\n */\r\nfunction _populatePrototype(proto, className, target, baseInstFuncs, setInstanceFunc) {\r\n    function _createDynamicPrototype(proto, funcName) {\r\n        var dynProtoProxy = function () {\r\n            // Use the instance or prototype function\r\n            var instFunc = _getInstFunc(this, funcName, proto, dynProtoProxy) || _getProtoFunc(funcName, proto, dynProtoProxy);\r\n            // eslint-disable-next-line prefer-rest-params\r\n            return instFunc.apply(this, arguments);\r\n        };\r\n        // Tag this function as a proxy to support replacing dynamic proxy elements (primary use case is for unit testing\r\n        // via which can dynamically replace the prototype function reference)\r\n        dynProtoProxy[DynProxyTag] = 1;\r\n        return dynProtoProxy;\r\n    }\r\n    if (!_isObjectOrArrayPrototype(proto)) {\r\n        var instFuncTable = target[DynInstFuncTable] = target[DynInstFuncTable] || {};\r\n        var instFuncs_1 = instFuncTable[className] = (instFuncTable[className] || {}); // fetch and assign if as it may not exist yet\r\n        // Set whether we are allow to lookup instances, if someone has set to false then do not re-enable\r\n        if (instFuncTable[DynAllowInstChkTag] !== false) {\r\n            instFuncTable[DynAllowInstChkTag] = !!setInstanceFunc;\r\n        }\r\n        _forEachProp(target, function (name) {\r\n            // Only add overridden functions\r\n            if (_isDynamicCandidate(target, name, false) && target[name] !== baseInstFuncs[name]) {\r\n                // Save the instance Function to the lookup table and remove it from the instance as it's not a dynamic proto function\r\n                instFuncs_1[name] = target[name];\r\n                delete target[name];\r\n                // Add a dynamic proto if one doesn't exist or if a prototype function exists and it's not a dynamic one\r\n                if (!_hasOwnProperty(proto, name) || (proto[name] && !proto[name][DynProxyTag])) {\r\n                    proto[name] = _createDynamicPrototype(proto, name);\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n/**\r\n * Checks whether the passed prototype object appears to be correct by walking the prototype hierarchy of the instance\r\n * @param classProto The class prototype instance\r\n * @param thisTarget The current instance that will be checked whether the passed prototype instance is in the hierarchy\r\n * @ignore\r\n */\r\nfunction _checkPrototype(classProto, thisTarget) {\r\n    // This method doesn't existing in older browsers (e.g. IE8)\r\n    if (_objGetPrototypeOf) {\r\n        // As this is primarily a coding time check, don't bother checking if running in IE8 or lower\r\n        var visited = [];\r\n        var thisProto = _getObjProto(thisTarget);\r\n        while (thisProto && !_isObjectArrayOrFunctionPrototype(thisProto) && !_hasVisited(visited, thisProto)) {\r\n            if (thisProto === classProto) {\r\n                return true;\r\n            }\r\n            // This avoids the caller from needing to check whether it's direct base class implements the function or not\r\n            // by walking the entire chain it simplifies the usage and issues from upgrading any of the base classes.\r\n            visited.push(thisProto);\r\n            thisProto = _getObjProto(thisProto);\r\n        }\r\n        return false;\r\n    }\r\n    // If objGetPrototypeOf doesn't exist then just assume everything is ok.\r\n    return true;\r\n}\r\n/**\r\n * Gets the current prototype name using the ES6 name if available otherwise falling back to a use unknown as the name.\r\n * It's not critical for this to return a name, it's used to decorate the generated unique name for easier debugging only.\r\n * @param target\r\n * @param unknownValue\r\n * @ignore\r\n */\r\nfunction _getObjName(target, unknownValue) {\r\n    if (_hasOwnProperty(target, Prototype)) {\r\n        // Look like a prototype\r\n        return target.name || unknownValue || UnknownValue;\r\n    }\r\n    return (((target || {})[Constructor]) || {}).name || unknownValue || UnknownValue;\r\n}\r\n/**\r\n * Helper function when creating dynamic (inline) functions for classes, this helper performs the following tasks :-\r\n * - Saves references to all defined base class functions\r\n * - Calls the delegateFunc with the current target (this) and a base object reference that can be used to call all \"super\" functions.\r\n * - Will populate the class prototype for all overridden functions to support class extension that call the prototype instance.\r\n * Callers should use this helper when declaring all function within the constructor of a class, as mentioned above the delegateFunc is\r\n * passed both the target \"this\" and an object that can be used to call any base (super) functions, using this based object in place of\r\n * super.XXX() (which gets expanded to _super.prototype.XXX()) provides a better minification outcome and also ensures the correct \"this\"\r\n * context is maintained as TypeScript creates incorrect references using super.XXXX() for dynamically defined functions i.e. Functions\r\n * defined in the constructor or some other function (rather than declared as complete typescript functions).\r\n * ### Usage\r\n * ```typescript\r\n * import dynamicProto from \"@microsoft/dynamicproto-js\";\r\n * class ExampleClass extends BaseClass {\r\n *     constructor() {\r\n *         dynamicProto(ExampleClass, this, (_self, base) => {\r\n *             // This will define a function that will be converted to a prototype function\r\n *             _self.newFunc = () => {\r\n *                 // Access any \"this\" instance property\r\n *                 if (_self.someProperty) {\r\n *                     ...\r\n *                 }\r\n *             }\r\n *             // This will define a function that will be converted to a prototype function\r\n *             _self.myFunction = () => {\r\n *                 // Access any \"this\" instance property\r\n *                 if (_self.someProperty) {\r\n *                     // Call the base version of the function that we are overriding\r\n *                     base.myFunction();\r\n *                 }\r\n *                 ...\r\n *             }\r\n *             _self.initialize = () => {\r\n *                 ...\r\n *             }\r\n *             // Warnings: While the following will work as _self is simply a reference to\r\n *             // this, if anyone overrides myFunction() the overridden will be called first\r\n *             // as the normal JavaScript method resolution will occur and the defined\r\n *             // _self.initialize() function is actually gets removed from the instance and\r\n *             // a proxy prototype version is created to reference the created method.\r\n *             _self.initialize();\r\n *         });\r\n *     }\r\n * }\r\n * ```\r\n * @typeparam DPType This is the generic type of the class, used to keep intellisense valid\r\n * @typeparam DPCls The type that contains the prototype of the current class\r\n * @param theClass - This is the current class instance which contains the prototype for the current class\r\n * @param target - The current \"this\" (target) reference, when the class has been extended this.prototype will not be the 'theClass' value.\r\n * @param delegateFunc - The callback function (closure) that will create the dynamic function\r\n * @param options - Additional options to configure how the dynamic prototype operates\r\n */\r\nfunction dynamicProto(theClass, target, delegateFunc, options) {\r\n    // Make sure that the passed theClass argument looks correct\r\n    if (!_hasOwnProperty(theClass, Prototype)) {\r\n        _throwTypeError(\"theClass is an invalid class definition.\");\r\n    }\r\n    // Quick check to make sure that the passed theClass argument looks correct (this is a common copy/paste error)\r\n    var classProto = theClass[Prototype];\r\n    if (!_checkPrototype(classProto, target)) {\r\n        _throwTypeError(\"[\" + _getObjName(theClass) + \"] is not in class hierarchy of [\" + _getObjName(target) + \"]\");\r\n    }\r\n    var className = null;\r\n    if (_hasOwnProperty(classProto, DynClassName)) {\r\n        // Only grab the class name if it's defined on this prototype (i.e. don't walk the prototype chain)\r\n        className = classProto[DynClassName];\r\n    }\r\n    else {\r\n        // As not all browser support name on the prototype creating a unique dynamic one if we have not already\r\n        // assigned one, so we can use a simple string as the lookup rather than an object for the dynamic instance\r\n        // function table lookup.\r\n        className = DynClassNamePrefix + _getObjName(theClass, \"_\") + \"$\" + _dynamicNames;\r\n        _dynamicNames++;\r\n        classProto[DynClassName] = className;\r\n    }\r\n    var perfOptions = dynamicProto[DynProtoDefaultOptions];\r\n    var useBaseInst = !!perfOptions[strUseBaseInst];\r\n    if (useBaseInst && options && options[strUseBaseInst] !== undefined) {\r\n        useBaseInst = !!options[strUseBaseInst];\r\n    }\r\n    // Get the current instance functions\r\n    var instFuncs = _getInstanceFuncs(target);\r\n    // Get all of the functions for any base instance (before they are potentially overridden)\r\n    var baseFuncs = _getBaseFuncs(classProto, target, instFuncs, useBaseInst);\r\n    // Execute the delegate passing in both the current target \"this\" and \"base\" function references\r\n    // Note casting the same type as we don't actually have the base class here and this will provide some intellisense support\r\n    delegateFunc(target, baseFuncs);\r\n    // Don't allow setting instance functions for older IE instances\r\n    var setInstanceFunc = !!_objGetPrototypeOf && !!perfOptions[strSetInstFuncs];\r\n    if (setInstanceFunc && options) {\r\n        setInstanceFunc = !!options[strSetInstFuncs];\r\n    }\r\n    // Populate the Prototype for any overridden instance functions\r\n    _populatePrototype(classProto, className, target, instFuncs, setInstanceFunc !== false);\r\n}\r\n/**\r\n * Exposes the default global options to allow global configuration, if the global values are disabled these will override\r\n * any passed values. This is primarily exposed to support unit-testing without the need for individual classes to expose\r\n * their internal usage of dynamic proto.\r\n */\r\nvar perfDefaults = {\r\n    setInstFuncs: true,\r\n    useBaseInst: true\r\n};\r\n// And expose for testing\r\ndynamicProto[DynProtoDefaultOptions] = perfDefaults;\n\nexport { dynamicProto as default };\n//# sourceMappingURL=dynamicproto-js.js.map\n","/*\n * Application Insights JavaScript SDK - Core, 2.8.4\n * Copyright (c) Microsoft and contributors. All rights reserved.\n */\n\r\n\r\n// Note: DON'T Export these const from the package as we are still targeting ES3 this will export a mutable variables that someone could change!!!\r\nexport var strEmpty = \"\";\r\nexport var strProcessTelemetry = \"processTelemetry\";\r\nexport var strPriority = \"priority\";\r\nexport var strSetNextPlugin = \"setNextPlugin\";\r\nexport var strIsInitialized = \"isInitialized\";\r\nexport var strTeardown = \"teardown\";\r\nexport var strCore = \"core\";\r\nexport var strUpdate = \"update\";\r\nexport var strDisabled = \"disabled\";\r\nexport var strDoTeardown = \"_doTeardown\";\r\nexport var strProcessNext = \"processNext\";\r\nexport var strResume = \"resume\";\r\nexport var strPause = \"pause\";\r\nexport var strNotificationListener = \"NotificationListener\";\r\nexport var strAddNotificationListener = \"add\" + strNotificationListener;\r\nexport var strRemoveNotificationListener = \"remove\" + strNotificationListener;\r\nexport var strEventsSent = \"eventsSent\";\r\nexport var strEventsDiscarded = \"eventsDiscarded\";\r\nexport var strEventsSendRequest = \"eventsSendRequest\";\r\nexport var strPerfEvent = \"perfEvent\";\r\n//# sourceMappingURL=InternalConstants.js.map","/*\n * Application Insights JavaScript SDK - Core, 2.8.4\n * Copyright (c) Microsoft and contributors. All rights reserved.\n */\n\r\n\r\nimport { strShimUndefined, strShimObject, strShimFunction, throwTypeError, ObjClass, ObjProto, ObjAssign, ObjHasOwnProperty, ObjDefineProperty, strShimPrototype } from \"@microsoft/applicationinsights-shims\";\r\nimport { strEmpty } from \"./InternalConstants\";\r\n// RESTRICT and AVOID circular dependencies you should not import other contained modules or export the contents of this file directly\r\n// Added to help with minfication\r\nvar strToISOString = \"toISOString\";\r\nvar cStrEndsWith = \"endsWith\";\r\nvar cStrStartsWith = \"startsWith\";\r\nvar strIndexOf = \"indexOf\";\r\nvar strMap = \"map\";\r\nvar strReduce = \"reduce\";\r\nvar cStrTrim = \"trim\";\r\nvar strToString = \"toString\";\r\n/**\r\n * Constant string defined to support minimization\r\n * @ignore\r\n */\r\nvar str__Proto = \"__proto__\";\r\n/**\r\n  * Constant string defined to support minimization\r\n  * @ignore\r\n  */\r\nvar strConstructor = \"constructor\";\r\nvar _objDefineProperty = ObjDefineProperty;\r\nvar _objFreeze = ObjClass.freeze;\r\nvar _objSeal = ObjClass.seal;\r\nvar _objKeys = ObjClass.keys;\r\nvar StringProto = String[strShimPrototype];\r\nvar _strTrim = StringProto[cStrTrim];\r\nvar _strEndsWith = StringProto[cStrEndsWith];\r\nvar _strStartsWith = StringProto[cStrStartsWith];\r\nvar DateProto = Date[strShimPrototype];\r\nvar _dataToISOString = DateProto[strToISOString];\r\nvar _isArray = Array.isArray;\r\nvar _objToString = ObjProto[strToString];\r\nvar _fnToString = ObjHasOwnProperty[strToString];\r\n// Cache what this browser reports as the object function constructor (as a string)\r\nvar _objFunctionString = _fnToString.call(ObjClass);\r\nvar rCamelCase = /-([a-z])/g;\r\nvar rNormalizeInvalid = /([^\\w\\d_$])/g;\r\nvar rLeadingNumeric = /^(\\d+[\\w\\d_$])/;\r\n/**\r\n * Pre-lookup to check if we are running on a modern browser (i.e. not IE8)\r\n * @ignore\r\n */\r\nvar _objGetPrototypeOf = Object[\"getPrototypeOf\"];\r\n/**\r\n  * Helper used to get the prototype of the target object as getPrototypeOf is not available in an ES3 environment.\r\n  * @ignore\r\n  */\r\nexport function _getObjProto(target) {\r\n    if (target) {\r\n        // This method doesn't existing in older browsers (e.g. IE8)\r\n        if (_objGetPrototypeOf) {\r\n            return _objGetPrototypeOf(target);\r\n        }\r\n        // target[Constructor] May break if the constructor has been changed or removed\r\n        var newProto = target[str__Proto] || target[strShimPrototype] || target[strConstructor];\r\n        if (newProto) {\r\n            return newProto;\r\n        }\r\n    }\r\n    return null;\r\n}\r\nexport function objToString(obj) {\r\n    return _objToString.call(obj);\r\n}\r\nexport function isTypeof(value, theType) {\r\n    return typeof value === theType;\r\n}\r\nexport function isUndefined(value) {\r\n    return value === undefined || typeof value === strShimUndefined;\r\n}\r\nexport function isNotUndefined(value) {\r\n    return !isUndefined(value);\r\n}\r\nexport function isNullOrUndefined(value) {\r\n    return (value === null || isUndefined(value));\r\n}\r\nexport function isNotNullOrUndefined(value) {\r\n    return !isNullOrUndefined(value);\r\n}\r\nexport function hasOwnProperty(obj, prop) {\r\n    return !!(obj && ObjHasOwnProperty.call(obj, prop));\r\n}\r\nexport function isObject(value) {\r\n    // Changing to inline for performance\r\n    return !!(value && typeof value === strShimObject);\r\n}\r\nexport function isFunction(value) {\r\n    // Changing to inline for performance\r\n    return !!(value && typeof value === strShimFunction);\r\n}\r\nexport function isPromiseLike(value) {\r\n    return value && isFunction(value.then);\r\n}\r\n/**\r\n * Validates that the string name conforms to the JS IdentifierName specification and if not\r\n * normalizes the name so that it would. This method does not identify or change any keywords\r\n * meaning that if you pass in a known keyword the same value will be returned.\r\n * This is a simplified version\r\n * @param name The name to validate\r\n */\r\nexport function normalizeJsName(name) {\r\n    var value = name;\r\n    if (value && isString(value)) {\r\n        // CamelCase everything after the \"-\" and remove the dash\r\n        value = value.replace(rCamelCase, function (_all, letter) {\r\n            return letter.toUpperCase();\r\n        });\r\n        value = value.replace(rNormalizeInvalid, \"_\");\r\n        value = value.replace(rLeadingNumeric, function (_all, match) {\r\n            return \"_\" + match;\r\n        });\r\n    }\r\n    return value;\r\n}\r\n/**\r\n * This is a helper function for the equivalent of arForEach(objKeys(target), callbackFn), this is a\r\n * performance optimization to avoid the creation of a new array for large objects\r\n * @param target The target object to find and process the keys\r\n * @param callbackfn The function to call with the details\r\n */\r\nexport function objForEachKey(target, callbackfn) {\r\n    if (target) {\r\n        for (var prop in target) {\r\n            if (ObjHasOwnProperty.call(target, prop)) {\r\n                callbackfn.call(target, prop, target[prop]);\r\n            }\r\n        }\r\n    }\r\n}\r\n/**\r\n * The strEndsWith() method determines whether a string ends with the characters of a specified string, returning true or false as appropriate.\r\n * @param value - The value to check whether it ends with the search value.\r\n * @param search - The characters to be searched for at the end of the value.\r\n * @returns true if the given search value is found at the end of the string, otherwise false.\r\n */\r\nexport function strEndsWith(value, search) {\r\n    var result = false;\r\n    if (value && search && !(result = value === search)) {\r\n        // For Performance try and use the native instance, using string lookup of the function to easily pass the ES3 build checks and minification\r\n        result = _strEndsWith ? value[cStrEndsWith](search) : _strEndsWithPoly(value, search);\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * The _strEndsWith() method determines whether a string ends with the characters of a specified string, returning true or false as appropriate.\r\n * @param value - The value to check whether it ends with the search value.\r\n * @param search - The characters to be searched for at the end of the value.\r\n * @returns true if the given search value is found at the end of the string, otherwise false.\r\n */\r\nexport function _strEndsWithPoly(value, search) {\r\n    var result = false;\r\n    var searchLen = search ? search.length : 0;\r\n    var valLen = value ? value.length : 0;\r\n    if (searchLen && valLen && valLen >= searchLen && !(result = value === search)) {\r\n        var pos = valLen - 1;\r\n        for (var lp = searchLen - 1; lp >= 0; lp--) {\r\n            if (value[pos] != search[lp]) {\r\n                return false;\r\n            }\r\n            pos--;\r\n        }\r\n        result = true;\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * The strStartsWith() method determines whether a string starts with the characters of the specified string, returning true or false as appropriate.\r\n * @param value - The value to check whether it ends with the search value.\r\n * @param checkValue - The characters to be searched for at the start of the value.\r\n * @returns true if the given search value is found at the start of the string, otherwise false.\r\n */\r\nexport function strStartsWith(value, checkValue) {\r\n    var result = false;\r\n    if (value && checkValue && !(result = value === checkValue)) {\r\n        // For Performance try and use the native instance, using string lookup of the function to easily pass the ES3 build checks and minification\r\n        result = _strStartsWith ? value[cStrStartsWith](checkValue) : _strStartsWithPoly(value, checkValue);\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * The strStartsWith() method determines whether a string starts with the characters of the specified string, returning true or false as appropriate.\r\n * @param value - The value to check whether it ends with the search value.\r\n * @param checkValue - The characters to be searched for at the start of the value.\r\n * @returns true if the given search value is found at the start of the string, otherwise false.\r\n */\r\nexport function _strStartsWithPoly(value, checkValue) {\r\n    // Using helper for performance and because string startsWith() is not available on IE\r\n    var result = false;\r\n    var chkLen = checkValue ? checkValue.length : 0;\r\n    if (value && chkLen && value.length >= chkLen && !(result = value === checkValue)) {\r\n        for (var lp = 0; lp < chkLen; lp++) {\r\n            if (value[lp] !== checkValue[lp]) {\r\n                return false;\r\n            }\r\n        }\r\n        result = true;\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * A simple wrapper (for minification support) to check if the value contains the search string.\r\n * @param value - The string value to check for the existence of the search value\r\n * @param search - The value search within the value\r\n */\r\nexport function strContains(value, search) {\r\n    if (value && search) {\r\n        return value.indexOf(search) !== -1;\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * Check if an object is of type Date\r\n */\r\nexport function isDate(obj) {\r\n    return !!(obj && _objToString.call(obj) === \"[object Date]\");\r\n}\r\n/**\r\n * Check if an object is of type Array with optional generic T, the generic type is not validated\r\n * and exists to help with TypeScript validation only.\r\n */\r\nexport var isArray = _isArray || _isArrayPoly;\r\nfunction _isArrayPoly(obj) {\r\n    return !!(obj && _objToString.call(obj) === \"[object Array]\");\r\n}\r\n/**\r\n * Check if an object is of type Error\r\n */\r\nexport function isError(obj) {\r\n    return !!(obj && _objToString.call(obj) === \"[object Error]\");\r\n}\r\n/**\r\n * Checks if the type of value is a string.\r\n * @param {any} value - Value to be checked.\r\n * @return {boolean} True if the value is a string, false otherwise.\r\n */\r\nexport function isString(value) {\r\n    // Changing to inline for performance\r\n    return typeof value === \"string\";\r\n}\r\n/**\r\n * Checks if the type of value is a number.\r\n * @param {any} value - Value to be checked.\r\n * @return {boolean} True if the value is a number, false otherwise.\r\n */\r\nexport function isNumber(value) {\r\n    // Changing to inline for performance\r\n    return typeof value === \"number\";\r\n}\r\n/**\r\n * Checks if the type of value is a boolean.\r\n * @param {any} value - Value to be checked.\r\n * @return {boolean} True if the value is a boolean, false otherwise.\r\n */\r\nexport function isBoolean(value) {\r\n    // Changing to inline for performance\r\n    return typeof value === \"boolean\";\r\n}\r\n/**\r\n * Checks if the type of value is a Symbol.\r\n * This only returns a boolean as returning value is Symbol will cause issues for older TypeScript consumers\r\n * @param {any} value - Value to be checked.\r\n * @return {boolean} True if the value is a Symbol, false otherwise.\r\n */\r\nexport function isSymbol(value) {\r\n    return typeof value === \"symbol\";\r\n}\r\n/**\r\n * Checks if the type of the value is a normal plain object (not a null or data)\r\n * @param value\r\n */\r\nexport function isPlainObject(value) {\r\n    var result = false;\r\n    if (value && typeof value === \"object\") {\r\n        // Inlining _objGetPrototypeOf for performance to avoid an additional function call\r\n        var proto = _objGetPrototypeOf ? _objGetPrototypeOf(value) : _getObjProto(value);\r\n        if (!proto) {\r\n            // No prototype found so this is a plain Object eg. 'Object.create(null)'\r\n            result = true;\r\n        }\r\n        else {\r\n            // Objects that have a prototype are plain only if they were created using the Object global (native) function\r\n            if (proto[strConstructor] && ObjHasOwnProperty.call(proto, strConstructor)) {\r\n                proto = proto[strConstructor];\r\n            }\r\n            result = typeof proto === strShimFunction && _fnToString.call(proto) === _objFunctionString;\r\n        }\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * Convert a date to I.S.O. format in IE8\r\n */\r\nexport function toISOString(date) {\r\n    if (date) {\r\n        // For Performance try and use the native instance, using string lookup of the function to easily pass the ES3 build checks and minification\r\n        return _dataToISOString ? date[strToISOString]() : _toISOStringPoly(date);\r\n    }\r\n}\r\n/**\r\n * Convert a date to I.S.O. format in IE8\r\n */\r\nexport function _toISOStringPoly(date) {\r\n    if (date && date.getUTCFullYear) {\r\n        var pad = function (num) {\r\n            var r = String(num);\r\n            if (r.length === 1) {\r\n                r = \"0\" + r;\r\n            }\r\n            return r;\r\n        };\r\n        return date.getUTCFullYear()\r\n            + \"-\" + pad(date.getUTCMonth() + 1)\r\n            + \"-\" + pad(date.getUTCDate())\r\n            + \"T\" + pad(date.getUTCHours())\r\n            + \":\" + pad(date.getUTCMinutes())\r\n            + \":\" + pad(date.getUTCSeconds())\r\n            + \".\" + String((date.getUTCMilliseconds() / 1000).toFixed(3)).slice(2, 5)\r\n            + \"Z\";\r\n    }\r\n}\r\n/**\r\n * Performs the specified action for each element in an array. This helper exists to avoid adding a polyfil for older browsers\r\n * that do not define Array.prototype.xxxx (eg. ES3 only, IE8) just in case any page checks for presence/absence of the prototype\r\n * implementation. Note: For consistency this will not use the Array.prototype.xxxx implementation if it exists as this would\r\n * cause a testing requirement to test with and without the implementations\r\n * @param callbackfn  A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array. It can return -1 to break out of the loop\r\n * @param thisArg  [Optional] An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\r\n */\r\nexport function arrForEach(arr, callbackfn, thisArg) {\r\n    var len = arr.length;\r\n    try {\r\n        for (var idx = 0; idx < len; idx++) {\r\n            if (idx in arr) {\r\n                if (callbackfn.call(thisArg || arr, arr[idx], idx, arr) === -1) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    catch (e) {\r\n        // This can happen with some native browser objects, but should not happen for the type we are checking for\r\n    }\r\n}\r\n/**\r\n * Returns the index of the first occurrence of a value in an array. This helper exists to avoid adding a polyfil for older browsers\r\n * that do not define Array.prototype.xxxx (eg. ES3 only, IE8) just in case any page checks for presence/absence of the prototype\r\n * implementation. Note: For consistency this will not use the Array.prototype.xxxx implementation if it exists as this would\r\n * cause a testing requirement to test with and without the implementations\r\n * @param searchElement The value to locate in the array.\r\n * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.\r\n */\r\nexport function arrIndexOf(arr, searchElement, fromIndex) {\r\n    if (arr) {\r\n        // For Performance try and use the native instance, using string lookup of the function to easily pass the ES3 build checks and minification\r\n        if (arr[strIndexOf]) {\r\n            return arr[strIndexOf](searchElement, fromIndex);\r\n        }\r\n        var len = arr.length;\r\n        var from = fromIndex || 0;\r\n        try {\r\n            for (var lp = Math.max(from >= 0 ? from : len - Math.abs(from), 0); lp < len; lp++) {\r\n                if (lp in arr && arr[lp] === searchElement) {\r\n                    return lp;\r\n                }\r\n            }\r\n        }\r\n        catch (e) {\r\n            // This can happen with some native browser objects, but should not happen for the type we are checking for\r\n        }\r\n    }\r\n    return -1;\r\n}\r\n/**\r\n * Calls a defined callback function on each element of an array, and returns an array that contains the results. This helper exists\r\n * to avoid adding a polyfil for older browsers that do not define Array.prototype.xxxx (eg. ES3 only, IE8) just in case any page\r\n * checks for presence/absence of the prototype implementation. Note: For consistency this will not use the Array.prototype.xxxx\r\n * implementation if it exists as this would cause a testing requirement to test with and without the implementations\r\n * @param callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.\r\n * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\r\n */\r\nexport function arrMap(arr, callbackfn, thisArg) {\r\n    var results;\r\n    if (arr) {\r\n        // For Performance try and use the native instance, using string lookup of the function to easily pass the ES3 build checks and minification\r\n        if (arr[strMap]) {\r\n            return arr[strMap](callbackfn, thisArg);\r\n        }\r\n        var len = arr.length;\r\n        var _this = thisArg || arr;\r\n        results = new Array(len);\r\n        try {\r\n            for (var lp = 0; lp < len; lp++) {\r\n                if (lp in arr) {\r\n                    results[lp] = callbackfn.call(_this, arr[lp], arr);\r\n                }\r\n            }\r\n        }\r\n        catch (e) {\r\n            // This can happen with some native browser objects, but should not happen for the type we are checking for\r\n        }\r\n    }\r\n    return results;\r\n}\r\n/**\r\n * Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is\r\n * provided as an argument in the next call to the callback function. This helper exists to avoid adding a polyfil for older browsers that do not define\r\n * Array.prototype.xxxx (eg. ES3 only, IE8) just in case any page checks for presence/absence of the prototype implementation. Note: For consistency\r\n * this will not use the Array.prototype.xxxx implementation if it exists as this would cause a testing requirement to test with and without the implementations\r\n * @param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\r\n * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\r\n */\r\nexport function arrReduce(arr, callbackfn, initialValue) {\r\n    var value;\r\n    if (arr) {\r\n        // For Performance try and use the native instance, using string lookup of the function to easily pass the ES3 build checks and minification\r\n        if (arr[strReduce]) {\r\n            return arr[strReduce](callbackfn, initialValue);\r\n        }\r\n        var len = arr.length;\r\n        var lp = 0;\r\n        // Specifically checking the number of passed arguments as the value could be anything\r\n        if (arguments.length >= 3) {\r\n            value = arguments[2];\r\n        }\r\n        else {\r\n            while (lp < len && !(lp in arr)) {\r\n                lp++;\r\n            }\r\n            value = arr[lp++];\r\n        }\r\n        while (lp < len) {\r\n            if (lp in arr) {\r\n                value = callbackfn(value, arr[lp], lp, arr);\r\n            }\r\n            lp++;\r\n        }\r\n    }\r\n    return value;\r\n}\r\n/**\r\n * helper method to trim strings (IE8 does not implement String.prototype.trim)\r\n */\r\nexport function strTrim(str) {\r\n    if (str) {\r\n        // For Performance try and use the native instance, using string lookup of the function to easily pass the ES3 build checks and minification\r\n        str = (_strTrim && str[cStrTrim]) ? str[cStrTrim]() : (str.replace ? str.replace(/^\\s+|\\s+$/g, \"\") : str);\r\n    }\r\n    return str;\r\n}\r\nvar _objKeysHasDontEnumBug = !({ toString: null }).propertyIsEnumerable(\"toString\");\r\nvar _objKeysDontEnums = [\r\n    \"toString\",\r\n    \"toLocaleString\",\r\n    \"valueOf\",\r\n    \"hasOwnProperty\",\r\n    \"isPrototypeOf\",\r\n    \"propertyIsEnumerable\",\r\n    \"constructor\"\r\n];\r\n/**\r\n * Returns the names of the enumerable string properties and methods of an object. This helper exists to avoid adding a polyfil for older browsers\r\n * that do not define Object.keys eg. ES3 only, IE8 just in case any page checks for presence/absence of the prototype implementation.\r\n * Note: For consistency this will not use the Object.keys implementation if it exists as this would cause a testing requirement to test with and without the implementations\r\n * @param obj Object that contains the properties and methods. This can be an object that you created or an existing Document Object Model (DOM) object.\r\n */\r\nexport function objKeys(obj) {\r\n    var objType = typeof obj;\r\n    if (objType !== strShimFunction && (objType !== strShimObject || obj === null)) {\r\n        throwTypeError(\"objKeys called on non-object\");\r\n    }\r\n    // For Performance try and use the native instance, using string lookup of the function to easily pass the ES3 build checks and minification\r\n    if (!_objKeysHasDontEnumBug && _objKeys) {\r\n        return _objKeys(obj);\r\n    }\r\n    var result = [];\r\n    for (var prop in obj) {\r\n        if (obj && ObjHasOwnProperty.call(obj, prop)) {\r\n            result.push(prop);\r\n        }\r\n    }\r\n    if (_objKeysHasDontEnumBug) {\r\n        var dontEnumsLength = _objKeysDontEnums.length;\r\n        for (var lp = 0; lp < dontEnumsLength; lp++) {\r\n            if (obj && ObjHasOwnProperty.call(obj, _objKeysDontEnums[lp])) {\r\n                result.push(_objKeysDontEnums[lp]);\r\n            }\r\n        }\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * Try to define get/set object property accessors for the target object/prototype, this will provide compatibility with\r\n * existing API definition when run within an ES5+ container that supports accessors but still enable the code to be loaded\r\n * and executed in an ES3 container, providing basic IE8 compatibility.\r\n * @param target The object on which to define the property.\r\n * @param prop The name of the property to be defined or modified.\r\n * @param getProp The getter function to wire against the getter.\r\n * @param setProp The setter function to wire against the setter.\r\n * @returns True if it was able to create the accessors otherwise false\r\n */\r\nexport function objDefineAccessors(target, prop, getProp, setProp) {\r\n    if (_objDefineProperty) {\r\n        try {\r\n            var descriptor = {\r\n                enumerable: true,\r\n                configurable: true\r\n            };\r\n            if (getProp) {\r\n                descriptor.get = getProp;\r\n            }\r\n            if (setProp) {\r\n                descriptor.set = setProp;\r\n            }\r\n            _objDefineProperty(target, prop, descriptor);\r\n            return true;\r\n        }\r\n        catch (e) {\r\n            // IE8 Defines a defineProperty on Object but it's only supported for DOM elements so it will throw\r\n            // We will just ignore this here.\r\n        }\r\n    }\r\n    return false;\r\n}\r\nfunction _doNothing(value) {\r\n    return value;\r\n}\r\nexport function deepFreeze(obj) {\r\n    if (_objFreeze) {\r\n        objForEachKey(obj, function (name, value) {\r\n            if (isArray(value) || isObject(value)) {\r\n                _objFreeze(value);\r\n            }\r\n        });\r\n    }\r\n    return objFreeze(obj);\r\n}\r\nexport var objFreeze = _objFreeze || _doNothing;\r\nexport var objSeal = _objSeal || _doNothing;\r\n/**\r\n * Return the current time via the Date now() function (if available) and falls back to (new Date()).getTime() if now() is unavailable (IE8 or less)\r\n * https://caniuse.com/#search=Date.now\r\n */\r\nexport function dateNow() {\r\n    var dt = Date;\r\n    return dt.now ? dt.now() : new dt().getTime();\r\n}\r\n/**\r\n * Returns the name of object if it's an Error. Otherwise, returns empty string.\r\n */\r\nexport function getExceptionName(object) {\r\n    if (isError(object)) {\r\n        return object.name;\r\n    }\r\n    return strEmpty;\r\n}\r\n/**\r\n * Sets the provided value on the target instance using the field name when the provided chk function returns true, the chk\r\n * function will only be called if the new value is no equal to the original value.\r\n * @param target - The target object\r\n * @param field - The key of the target\r\n * @param value - The value to set\r\n * @param valChk - [Optional] Callback to check the value that if supplied will be called check if the new value can be set\r\n * @param srcChk - [Optional] Callback to check to original value that if supplied will be called if the new value should be set (if allowed)\r\n * @returns The existing or new value, depending what was set\r\n */\r\nexport function setValue(target, field, value, valChk, srcChk) {\r\n    var theValue = value;\r\n    if (target) {\r\n        theValue = target[field];\r\n        if (theValue !== value && (!srcChk || srcChk(theValue)) && (!valChk || valChk(value))) {\r\n            theValue = value;\r\n            target[field] = theValue;\r\n        }\r\n    }\r\n    return theValue;\r\n}\r\n/**\r\n * Returns the current value from the target object if not null or undefined otherwise sets the new value and returns it\r\n * @param target - The target object to return or set the default value\r\n * @param field - The key for the field to set on the target\r\n * @param defValue - [Optional] The value to set if not already present, when not provided a empty object will be added\r\n */\r\nexport function getSetValue(target, field, defValue) {\r\n    var theValue;\r\n    if (target) {\r\n        theValue = target[field];\r\n        if (!theValue && isNullOrUndefined(theValue)) {\r\n            // Supports having the default as null\r\n            theValue = !isUndefined(defValue) ? defValue : {};\r\n            target[field] = theValue;\r\n        }\r\n    }\r\n    else {\r\n        // Expanded for performance so we only check defValue if required\r\n        theValue = !isUndefined(defValue) ? defValue : {};\r\n    }\r\n    return theValue;\r\n}\r\nexport function isNotTruthy(value) {\r\n    return !value;\r\n}\r\nexport function isTruthy(value) {\r\n    return !!value;\r\n}\r\nexport function throwError(message) {\r\n    throw new Error(message);\r\n}\r\nfunction _createProxyFunction(source, funcName) {\r\n    var srcFunc = null;\r\n    var src = null;\r\n    if (isFunction(source)) {\r\n        srcFunc = source;\r\n    }\r\n    else {\r\n        src = source;\r\n    }\r\n    return function () {\r\n        // Capture the original arguments passed to the method\r\n        var originalArguments = arguments;\r\n        if (srcFunc) {\r\n            src = srcFunc();\r\n        }\r\n        if (src) {\r\n            return src[funcName].apply(src, originalArguments);\r\n        }\r\n    };\r\n}\r\n/**\r\n * Effectively assigns all enumerable properties (not just own properties) and functions (including inherited prototype) from\r\n * the source object to the target, it attempts to use proxy getters / setters (if possible) and proxy functions to avoid potential\r\n * implementation issues by assigning prototype functions as instance ones\r\n *\r\n * This method is the primary method used to \"update\" the snippet proxy with the ultimate implementations.\r\n *\r\n * Special ES3 Notes:\r\n * Updates (setting) of direct property values on the target or indirectly on the source object WILL NOT WORK PROPERLY, updates to the\r\n * properties of \"referenced\" object will work (target.context.newValue = 10 => will be reflected in the source.context as it's the\r\n * same object). ES3 Failures: assigning target.myProp = 3 -> Won't change source.myProp = 3, likewise the reverse would also fail.\r\n * @param target - The target object to be assigned with the source properties and functions\r\n * @param source - The source object which will be assigned / called by setting / calling the targets proxies\r\n * @param chkSet - An optional callback to determine whether a specific property/function should be proxied\r\n */\r\nexport function proxyAssign(target, source, chkSet) {\r\n    if (target && source && isObject(target) && isObject(source)) {\r\n        var _loop_1 = function (field) {\r\n            if (isString(field)) {\r\n                var value = source[field];\r\n                if (isFunction(value)) {\r\n                    if (!chkSet || chkSet(field, true, source, target)) {\r\n                        // Create a proxy function rather than just copying the (possible) prototype to the new object as an instance function\r\n                        target[field] = _createProxyFunction(source, field);\r\n                    }\r\n                }\r\n                else if (!chkSet || chkSet(field, false, source, target)) {\r\n                    if (hasOwnProperty(target, field)) {\r\n                        // Remove any previous instance property\r\n                        delete target[field];\r\n                    }\r\n                    if (!objDefineAccessors(target, field, function () {\r\n                        return source[field];\r\n                    }, function (theValue) {\r\n                        source[field] = theValue;\r\n                    })) {\r\n                        // Unable to create an accessor, so just assign the values as a fallback\r\n                        // -- this will (mostly) work for objects\r\n                        // -- but will fail for accessing primitives (if the source changes it) and all types of \"setters\" as the source won't be modified\r\n                        target[field] = value;\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        // effectively apply/proxy full source to the target instance\r\n        for (var field in source) {\r\n            _loop_1(field);\r\n        }\r\n    }\r\n    return target;\r\n}\r\n/**\r\n * Creates a proxy function on the target which internally will call the source version with all arguments passed to the target method.\r\n *\r\n * @param target - The target object to be assigned with the source properties and functions\r\n * @param name - The function name that will be added on the target\r\n * @param source - The source object which will be assigned / called by setting / calling the targets proxies\r\n * @param theFunc - The function name on the source that will be proxied on the target\r\n * @param overwriteTarget - If `false` this will not replace any pre-existing name otherwise (the default) it will overwrite any existing name\r\n */\r\nexport function proxyFunctionAs(target, name, source, theFunc, overwriteTarget) {\r\n    if (target && name && source) {\r\n        if (overwriteTarget !== false || isUndefined(target[name])) {\r\n            target[name] = _createProxyFunction(source, theFunc);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Creates proxy functions on the target which internally will call the source version with all arguments passed to the target method.\r\n *\r\n * @param target - The target object to be assigned with the source properties and functions\r\n * @param source - The source object which will be assigned / called by setting / calling the targets proxies\r\n * @param functionsToProxy - An array of function names that will be proxied on the target\r\n * @param overwriteTarget - If false this will not replace any pre-existing name otherwise (the default) it will overwrite any existing name\r\n */\r\nexport function proxyFunctions(target, source, functionsToProxy, overwriteTarget) {\r\n    if (target && source && isObject(target) && isArray(functionsToProxy)) {\r\n        arrForEach(functionsToProxy, function (theFuncName) {\r\n            if (isString(theFuncName)) {\r\n                proxyFunctionAs(target, theFuncName, source, theFuncName, overwriteTarget);\r\n            }\r\n        });\r\n    }\r\n    return target;\r\n}\r\n/**\r\n * Simpler helper to create a dynamic class that implements the interface and populates the values with the defaults.\r\n * Only instance properties (hasOwnProperty) values are copied from the defaults to the new instance\r\n * @param defaults Simple helper\r\n */\r\nexport function createClassFromInterface(defaults) {\r\n    return /** @class */ (function () {\r\n        function class_1() {\r\n            var _this_1 = this;\r\n            if (defaults) {\r\n                objForEachKey(defaults, function (field, value) {\r\n                    _this_1[field] = value;\r\n                });\r\n            }\r\n        }\r\n        return class_1;\r\n    }());\r\n}\r\n/**\r\n * A helper function to assist with JIT performance for objects that have properties added / removed dynamically\r\n * this is primarily for chromium based browsers and has limited effects on Firefox and none of IE. Only call this\r\n * function after you have finished \"updating\" the object, calling this within loops reduces or defeats the benefits.\r\n * This helps when iterating using for..in, objKeys() and objForEach()\r\n * @param theObject - The object to be optimized if possible\r\n */\r\nexport function optimizeObject(theObject) {\r\n    // V8 Optimization to cause the JIT compiler to create a new optimized object for looking up the own properties\r\n    // primarily for object with <= 19 properties for >= 20 the effect is reduced or non-existent\r\n    if (theObject && ObjAssign) {\r\n        theObject = ObjClass(ObjAssign({}, theObject));\r\n    }\r\n    return theObject;\r\n}\r\nexport function objExtend(obj1, obj2, obj3, obj4, obj5, obj6) {\r\n    // Variables\r\n    var theArgs = arguments;\r\n    var extended = theArgs[0] || {};\r\n    var argLen = theArgs.length;\r\n    var deep = false;\r\n    var idx = 1;\r\n    // Check for \"Deep\" flag\r\n    if (argLen > 0 && isBoolean(extended)) {\r\n        deep = extended;\r\n        extended = theArgs[idx] || {};\r\n        idx++;\r\n    }\r\n    // Handle case when target is a string or something (possible in deep copy)\r\n    if (!isObject(extended)) {\r\n        extended = {};\r\n    }\r\n    // Loop through each remaining object and conduct a merge\r\n    for (; idx < argLen; idx++) {\r\n        var arg = theArgs[idx];\r\n        var isArgArray = isArray(arg);\r\n        var isArgObj = isObject(arg);\r\n        for (var prop in arg) {\r\n            var propOk = (isArgArray && (prop in arg)) || (isArgObj && (ObjHasOwnProperty.call(arg, prop)));\r\n            if (!propOk) {\r\n                continue;\r\n            }\r\n            var newValue = arg[prop];\r\n            var isNewArray = void 0;\r\n            // If deep merge and property is an object, merge properties\r\n            if (deep && newValue && ((isNewArray = isArray(newValue)) || isPlainObject(newValue))) {\r\n                // Grab the current value of the extended object\r\n                var clone = extended[prop];\r\n                if (isNewArray) {\r\n                    if (!isArray(clone)) {\r\n                        // We can't \"merge\" an array with a non-array so overwrite the original\r\n                        clone = [];\r\n                    }\r\n                }\r\n                else if (!isPlainObject(clone)) {\r\n                    // We can't \"merge\" an object with a non-object\r\n                    clone = {};\r\n                }\r\n                // Never move the original objects always clone them\r\n                newValue = objExtend(deep, clone, newValue);\r\n            }\r\n            // Assign the new (or previous) value (unless undefined)\r\n            if (newValue !== undefined) {\r\n                extended[prop] = newValue;\r\n            }\r\n        }\r\n    }\r\n    return extended;\r\n}\r\n//# sourceMappingURL=HelperFuncs.js.map","/*\n * Application Insights JavaScript SDK - Core, 2.8.4\n * Copyright (c) Microsoft and contributors. All rights reserved.\n */\n\r\n\r\nimport { objForEachKey, deepFreeze } from \"../JavaScriptSDK/HelperFuncs\";\r\n/**\r\n * Create an enum style object which has both the key => value and value => key mappings\r\n * @param values - The values to populate on the new object\r\n * @returns\r\n */\r\nexport function createEnumStyle(values) {\r\n    var enumClass = {};\r\n    objForEachKey(values, function (field, value) {\r\n        enumClass[field] = value;\r\n        enumClass[value] = field;\r\n    });\r\n    return deepFreeze(enumClass);\r\n}\r\n/**\r\n * Create a 2 index map that maps an enum's key as both the key and value, X[\"key\"] => \"key\" and X[0] => \"keyof 0\".\r\n * @param values - The values to populate on the new object\r\n * @returns\r\n */\r\nexport function createEnumMap(values) {\r\n    var mapClass = {};\r\n    objForEachKey(values, function (field, value) {\r\n        mapClass[field] = field;\r\n        mapClass[value] = field;\r\n    });\r\n    return deepFreeze(mapClass);\r\n}\r\n/**\r\n * Create a 2 index map that maps an enum's key and value to the defined map value, X[\"key\"] => mapValue and X[0] => mapValue.\r\n * Generic values\r\n * - E = the const enum type (typeof eRequestHeaders);\r\n * - V = Identifies the valid values for the keys, this should include both the enum numeric and string key of the type. The\r\n * resulting \"Value\" of each entry identifies the valid values withing the assignments.\r\n * @param values - The values to populate on the new object\r\n * @returns\r\n */\r\nexport function createValueMap(values) {\r\n    var mapClass = {};\r\n    objForEachKey(values, function (field, value) {\r\n        mapClass[field] = value[1];\r\n        mapClass[value[0]] = value[1];\r\n    });\r\n    return deepFreeze(mapClass);\r\n}\r\n//# sourceMappingURL=EnumHelperFuncs.js.map","/*\n * Application Insights JavaScript SDK - Core, 2.8.4\n * Copyright (c) Microsoft and contributors. All rights reserved.\n */\n\r\n\r\nimport { createEnumStyle } from \"../JavaScriptSDK.Enums/EnumHelperFuncs\";\r\n/**\r\n * The EventsDiscardedReason enumeration contains a set of values that specify the reason for discarding an event.\r\n */\r\nexport var EventsDiscardedReason = createEnumStyle({\r\n    /**\r\n     * Unknown.\r\n     */\r\n    Unknown: 0 /* eEventsDiscardedReason.Unknown */,\r\n    /**\r\n     * Status set to non-retryable.\r\n     */\r\n    NonRetryableStatus: 1 /* eEventsDiscardedReason.NonRetryableStatus */,\r\n    /**\r\n     * The event is invalid.\r\n     */\r\n    InvalidEvent: 2 /* eEventsDiscardedReason.InvalidEvent */,\r\n    /**\r\n     * The size of the event is too large.\r\n     */\r\n    SizeLimitExceeded: 3 /* eEventsDiscardedReason.SizeLimitExceeded */,\r\n    /**\r\n     * The server is not accepting events from this instrumentation key.\r\n     */\r\n    KillSwitch: 4 /* eEventsDiscardedReason.KillSwitch */,\r\n    /**\r\n     * The event queue is full.\r\n     */\r\n    QueueFull: 5 /* eEventsDiscardedReason.QueueFull */\r\n});\r\n//# sourceMappingURL=EventsDiscardedReason.js.map","/*\n * Application Insights JavaScript SDK - Core, 2.8.4\n * Copyright (c) Microsoft and contributors. All rights reserved.\n */\n\r\n\r\n\"use strict\";\r\nimport { getGlobal, strShimUndefined, strShimObject, strShimPrototype } from \"@microsoft/applicationinsights-shims\";\r\nimport { strEmpty } from \"./InternalConstants\";\r\nimport { isString, isUndefined, strContains } from \"./HelperFuncs\";\r\n/**\r\n * This file exists to hold environment utilities that are required to check and\r\n * validate the current operating environment. Unless otherwise required, please\r\n * only use defined methods (functions) in this class so that users of these\r\n * functions/properties only need to include those that are used within their own modules.\r\n */\r\nvar strWindow = \"window\";\r\nvar strDocument = \"document\";\r\nvar strDocumentMode = \"documentMode\";\r\nvar strNavigator = \"navigator\";\r\nvar strHistory = \"history\";\r\nvar strLocation = \"location\";\r\nvar strConsole = \"console\";\r\nvar strPerformance = \"performance\";\r\nvar strJSON = \"JSON\";\r\nvar strCrypto = \"crypto\";\r\nvar strMsCrypto = \"msCrypto\";\r\nvar strReactNative = \"ReactNative\";\r\nvar strMsie = \"msie\";\r\nvar strTrident = \"trident/\";\r\nvar strXMLHttpRequest = \"XMLHttpRequest\";\r\nvar _isTrident = null;\r\nvar _navUserAgentCheck = null;\r\nvar _enableMocks = false;\r\nvar _useXDomainRequest = null;\r\nvar _beaconsSupported = null;\r\nfunction _hasProperty(theClass, property) {\r\n    var supported = false;\r\n    if (theClass) {\r\n        try {\r\n            supported = property in theClass;\r\n            if (!supported) {\r\n                var proto = theClass[strShimPrototype];\r\n                if (proto) {\r\n                    supported = property in proto;\r\n                }\r\n            }\r\n        }\r\n        catch (e) {\r\n            // Do Nothing\r\n        }\r\n        if (!supported) {\r\n            try {\r\n                var tmp = new theClass();\r\n                supported = !isUndefined(tmp[property]);\r\n            }\r\n            catch (e) {\r\n                // Do Nothing\r\n            }\r\n        }\r\n    }\r\n    return supported;\r\n}\r\n/**\r\n * Enable the lookup of test mock objects if requested\r\n * @param enabled\r\n */\r\nexport function setEnableEnvMocks(enabled) {\r\n    _enableMocks = enabled;\r\n}\r\n/**\r\n * Return the named global object if available, will return null if the object is not available.\r\n * @param name The globally named object\r\n */\r\nexport function getGlobalInst(name) {\r\n    var gbl = getGlobal();\r\n    if (gbl && gbl[name]) {\r\n        return gbl[name];\r\n    }\r\n    // Test workaround, for environments where <global>.window (when global == window) doesn't return the base window\r\n    if (name === strWindow && hasWindow()) {\r\n        // tslint:disable-next-line: no-angle-bracket-type-assertion\r\n        return window;\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Checks if window object is available, this is required as we support the API running without a\r\n * window /document (eg. Node server, electron webworkers) and if we attempt to assign a window\r\n * object to a local variable or pass as an argument an \"Uncaught ReferenceError: window is not defined\"\r\n * exception will be thrown.\r\n * Defined as a function to support lazy / late binding environments.\r\n */\r\nexport function hasWindow() {\r\n    return Boolean(typeof window === strShimObject && window);\r\n}\r\n/**\r\n * Returns the global window object if it is present otherwise null.\r\n * This helper is used to access the window object without causing an exception\r\n * \"Uncaught ReferenceError: window is not defined\"\r\n */\r\nexport function getWindow() {\r\n    if (hasWindow()) {\r\n        return window;\r\n    }\r\n    // Return the global instance or null\r\n    return getGlobalInst(strWindow);\r\n}\r\n/**\r\n * Checks if document object is available, this is required as we support the API running without a\r\n * window /document (eg. Node server, electron webworkers) and if we attempt to assign a document\r\n * object to a local variable or pass as an argument an \"Uncaught ReferenceError: document is not defined\"\r\n * exception will be thrown.\r\n * Defined as a function to support lazy / late binding environments.\r\n */\r\nexport function hasDocument() {\r\n    return Boolean(typeof document === strShimObject && document);\r\n}\r\n/**\r\n * Returns the global document object if it is present otherwise null.\r\n * This helper is used to access the document object without causing an exception\r\n * \"Uncaught ReferenceError: document is not defined\"\r\n */\r\nexport function getDocument() {\r\n    if (hasDocument()) {\r\n        return document;\r\n    }\r\n    return getGlobalInst(strDocument);\r\n}\r\n/**\r\n * Checks if navigator object is available, this is required as we support the API running without a\r\n * window /document (eg. Node server, electron webworkers) and if we attempt to assign a navigator\r\n * object to a local variable or pass as an argument an \"Uncaught ReferenceError: navigator is not defined\"\r\n * exception will be thrown.\r\n * Defined as a function to support lazy / late binding environments.\r\n */\r\nexport function hasNavigator() {\r\n    return Boolean(typeof navigator === strShimObject && navigator);\r\n}\r\n/**\r\n * Returns the global navigator object if it is present otherwise null.\r\n * This helper is used to access the navigator object without causing an exception\r\n * \"Uncaught ReferenceError: navigator is not defined\"\r\n */\r\nexport function getNavigator() {\r\n    if (hasNavigator()) {\r\n        return navigator;\r\n    }\r\n    return getGlobalInst(strNavigator);\r\n}\r\n/**\r\n * Checks if history object is available, this is required as we support the API running without a\r\n * window /document (eg. Node server, electron webworkers) and if we attempt to assign a history\r\n * object to a local variable or pass as an argument an \"Uncaught ReferenceError: history is not defined\"\r\n * exception will be thrown.\r\n * Defined as a function to support lazy / late binding environments.\r\n */\r\nexport function hasHistory() {\r\n    return Boolean(typeof history === strShimObject && history);\r\n}\r\n/**\r\n * Returns the global history object if it is present otherwise null.\r\n * This helper is used to access the history object without causing an exception\r\n * \"Uncaught ReferenceError: history is not defined\"\r\n */\r\nexport function getHistory() {\r\n    if (hasHistory()) {\r\n        return history;\r\n    }\r\n    return getGlobalInst(strHistory);\r\n}\r\n/**\r\n * Returns the global location object if it is present otherwise null.\r\n * This helper is used to access the location object without causing an exception\r\n * \"Uncaught ReferenceError: location is not defined\"\r\n */\r\nexport function getLocation(checkForMock) {\r\n    if (checkForMock && _enableMocks) {\r\n        var mockLocation = getGlobalInst(\"__mockLocation\");\r\n        if (mockLocation) {\r\n            return mockLocation;\r\n        }\r\n    }\r\n    if (typeof location === strShimObject && location) {\r\n        return location;\r\n    }\r\n    return getGlobalInst(strLocation);\r\n}\r\n/**\r\n * Returns the global console object\r\n */\r\nexport function getConsole() {\r\n    if (typeof console !== strShimUndefined) {\r\n        return console;\r\n    }\r\n    return getGlobalInst(strConsole);\r\n}\r\n/**\r\n * Returns the performance object if it is present otherwise null.\r\n * This helper is used to access the performance object from the current\r\n * global instance which could be window or globalThis for a web worker\r\n */\r\nexport function getPerformance() {\r\n    return getGlobalInst(strPerformance);\r\n}\r\n/**\r\n * Checks if JSON object is available, this is required as we support the API running without a\r\n * window /document (eg. Node server, electron webworkers) and if we attempt to assign a history\r\n * object to a local variable or pass as an argument an \"Uncaught ReferenceError: JSON is not defined\"\r\n * exception will be thrown.\r\n * Defined as a function to support lazy / late binding environments.\r\n */\r\nexport function hasJSON() {\r\n    return Boolean((typeof JSON === strShimObject && JSON) || getGlobalInst(strJSON) !== null);\r\n}\r\n/**\r\n * Returns the global JSON object if it is present otherwise null.\r\n * This helper is used to access the JSON object without causing an exception\r\n * \"Uncaught ReferenceError: JSON is not defined\"\r\n */\r\nexport function getJSON() {\r\n    if (hasJSON()) {\r\n        return JSON || getGlobalInst(strJSON);\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Returns the crypto object if it is present otherwise null.\r\n * This helper is used to access the crypto object from the current\r\n * global instance which could be window or globalThis for a web worker\r\n */\r\nexport function getCrypto() {\r\n    return getGlobalInst(strCrypto);\r\n}\r\n/**\r\n * Returns the crypto object if it is present otherwise null.\r\n * This helper is used to access the crypto object from the current\r\n * global instance which could be window or globalThis for a web worker\r\n */\r\nexport function getMsCrypto() {\r\n    return getGlobalInst(strMsCrypto);\r\n}\r\n/**\r\n * Returns whether the environment is reporting that we are running in a React Native Environment\r\n */\r\nexport function isReactNative() {\r\n    // If running in React Native, navigator.product will be populated\r\n    var nav = getNavigator();\r\n    if (nav && nav.product) {\r\n        return nav.product === strReactNative;\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * Identifies whether the current environment appears to be IE\r\n */\r\nexport function isIE() {\r\n    var nav = getNavigator();\r\n    if (nav && (nav.userAgent !== _navUserAgentCheck || _isTrident === null)) {\r\n        // Added to support test mocking of the user agent\r\n        _navUserAgentCheck = nav.userAgent;\r\n        var userAgent = (_navUserAgentCheck || strEmpty).toLowerCase();\r\n        _isTrident = (strContains(userAgent, strMsie) || strContains(userAgent, strTrident));\r\n    }\r\n    return _isTrident;\r\n}\r\n/**\r\n * Gets IE version returning the document emulation mode if we are running on IE, or null otherwise\r\n */\r\nexport function getIEVersion(userAgentStr) {\r\n    if (userAgentStr === void 0) { userAgentStr = null; }\r\n    if (!userAgentStr) {\r\n        var navigator_1 = getNavigator() || {};\r\n        userAgentStr = navigator_1 ? (navigator_1.userAgent || strEmpty).toLowerCase() : strEmpty;\r\n    }\r\n    var ua = (userAgentStr || strEmpty).toLowerCase();\r\n    // Also check for documentMode in case X-UA-Compatible meta tag was included in HTML.\r\n    if (strContains(ua, strMsie)) {\r\n        var doc = getDocument() || {};\r\n        return Math.max(parseInt(ua.split(strMsie)[1]), (doc[strDocumentMode] || 0));\r\n    }\r\n    else if (strContains(ua, strTrident)) {\r\n        var tridentVer = parseInt(ua.split(strTrident)[1]);\r\n        if (tridentVer) {\r\n            return tridentVer + 4;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Returns string representation of an object suitable for diagnostics logging.\r\n */\r\nexport function dumpObj(object) {\r\n    var objectTypeDump = Object[strShimPrototype].toString.call(object);\r\n    var propertyValueDump = strEmpty;\r\n    if (objectTypeDump === \"[object Error]\") {\r\n        propertyValueDump = \"{ stack: '\" + object.stack + \"', message: '\" + object.message + \"', name: '\" + object.name + \"'\";\r\n    }\r\n    else if (hasJSON()) {\r\n        propertyValueDump = getJSON().stringify(object);\r\n    }\r\n    return objectTypeDump + propertyValueDump;\r\n}\r\nexport function isSafari(userAgentStr) {\r\n    if (!userAgentStr || !isString(userAgentStr)) {\r\n        var navigator_2 = getNavigator() || {};\r\n        userAgentStr = navigator_2 ? (navigator_2.userAgent || strEmpty).toLowerCase() : strEmpty;\r\n    }\r\n    var ua = (userAgentStr || strEmpty).toLowerCase();\r\n    return (ua.indexOf(\"safari\") >= 0);\r\n}\r\n/**\r\n * Checks if HTML5 Beacons are supported in the current environment.\r\n * @returns True if supported, false otherwise.\r\n */\r\nexport function isBeaconsSupported() {\r\n    if (_beaconsSupported === null) {\r\n        _beaconsSupported = hasNavigator() && Boolean(getNavigator().sendBeacon);\r\n    }\r\n    return _beaconsSupported;\r\n}\r\n/**\r\n * Checks if the Fetch API is supported in the current environment.\r\n * @param withKeepAlive - [Optional] If True, check if fetch is available and it supports the keepalive feature, otherwise only check if fetch is supported\r\n * @returns True if supported, otherwise false\r\n */\r\nexport function isFetchSupported(withKeepAlive) {\r\n    var isSupported = false;\r\n    try {\r\n        isSupported = !!getGlobalInst(\"fetch\");\r\n        var request = getGlobalInst(\"Request\");\r\n        if (isSupported && withKeepAlive && request) {\r\n            isSupported = _hasProperty(request, \"keepalive\");\r\n        }\r\n    }\r\n    catch (e) {\r\n        // Just Swallow any failure during availability checks\r\n    }\r\n    return isSupported;\r\n}\r\nexport function useXDomainRequest() {\r\n    if (_useXDomainRequest === null) {\r\n        _useXDomainRequest = (typeof XDomainRequest !== strShimUndefined);\r\n        if (_useXDomainRequest && isXhrSupported()) {\r\n            _useXDomainRequest = _useXDomainRequest && !_hasProperty(getGlobalInst(strXMLHttpRequest), \"withCredentials\");\r\n        }\r\n    }\r\n    return _useXDomainRequest;\r\n}\r\n/**\r\n * Checks if XMLHttpRequest is supported\r\n * @returns True if supported, otherwise false\r\n */\r\nexport function isXhrSupported() {\r\n    var isSupported = false;\r\n    try {\r\n        var xmlHttpRequest = getGlobalInst(strXMLHttpRequest);\r\n        isSupported = !!xmlHttpRequest;\r\n    }\r\n    catch (e) {\r\n        // Just Swallow any failure during availability checks\r\n    }\r\n    return isSupported;\r\n}\r\nfunction _getNamedValue(values, name) {\r\n    if (values) {\r\n        for (var i = 0; i < values.length; i++) {\r\n            var value = values[i];\r\n            if (value.name) {\r\n                if (value.name === name) {\r\n                    return value;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return {};\r\n}\r\n/**\r\n * Helper function to fetch the named meta-tag from the page.\r\n * @param name\r\n */\r\nexport function findMetaTag(name) {\r\n    var doc = getDocument();\r\n    if (doc && name) {\r\n        // Look for a meta-tag\r\n        return _getNamedValue(doc.querySelectorAll(\"meta\"), name).content;\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Helper function to fetch the named server timing value from the page response (first navigation event).\r\n * @param name\r\n */\r\nexport function findNamedServerTiming(name) {\r\n    var value;\r\n    var perf = getPerformance();\r\n    if (perf) {\r\n        // Try looking for a server-timing header\r\n        var navPerf = perf.getEntriesByType(\"navigation\") || [];\r\n        value = _getNamedValue((navPerf.length > 0 ? navPerf[0] : {}).serverTiming, name).description;\r\n    }\r\n    return value;\r\n}\r\n//# sourceMappingURL=EnvUtils.js.map","/*\n * Application Insights JavaScript SDK - Core, 2.8.4\n * Copyright (c) Microsoft and contributors. All rights reserved.\n */\n\r\n\r\nimport { getGlobalInst } from \"./EnvUtils\";\r\nvar listenerFuncs = [\"eventsSent\", \"eventsDiscarded\", \"eventsSendRequest\", \"perfEvent\"];\r\nvar _aiNamespace = null;\r\nvar _debugListener;\r\nfunction _listenerProxyFunc(name, config) {\r\n    return function () {\r\n        var args = arguments;\r\n        var dbgExt = getDebugExt(config);\r\n        if (dbgExt) {\r\n            var listener = dbgExt.listener;\r\n            if (listener && listener[name]) {\r\n                listener[name].apply(listener, args);\r\n            }\r\n        }\r\n    };\r\n}\r\nfunction _getExtensionNamespace() {\r\n    // Cache the lookup of the global namespace object\r\n    var target = getGlobalInst(\"Microsoft\");\r\n    if (target) {\r\n        _aiNamespace = target[\"ApplicationInsights\"];\r\n    }\r\n    return _aiNamespace;\r\n}\r\nexport function getDebugExt(config) {\r\n    var ns = _aiNamespace;\r\n    if (!ns && config.disableDbgExt !== true) {\r\n        ns = _aiNamespace || _getExtensionNamespace();\r\n    }\r\n    return ns ? ns[\"ChromeDbgExt\"] : null;\r\n}\r\nexport function getDebugListener(config) {\r\n    if (!_debugListener) {\r\n        _debugListener = {};\r\n        for (var lp = 0; lp < listenerFuncs.length; lp++) {\r\n            _debugListener[listenerFuncs[lp]] = _listenerProxyFunc(listenerFuncs[lp], config);\r\n        }\r\n    }\r\n    return _debugListener;\r\n}\r\n//# sourceMappingURL=DbgExtensionUtils.js.map","/*\n * Application Insights JavaScript SDK - Core, 2.8.4\n * Copyright (c) Microsoft and contributors. All rights reserved.\n */\n\r\n\r\n\"use strict\";\r\nimport { hasJSON, getJSON, getConsole, dumpObj } from \"./EnvUtils\";\r\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\r\nimport { isFunction, isNullOrUndefined, isUndefined } from \"./HelperFuncs\";\r\nimport { getDebugExt } from \"./DbgExtensionUtils\";\r\nimport { strEmpty } from \"./InternalConstants\";\r\n/**\r\n * For user non actionable traces use AI Internal prefix.\r\n */\r\nvar AiNonUserActionablePrefix = \"AI (Internal): \";\r\n/**\r\n * Prefix of the traces in portal.\r\n */\r\nvar AiUserActionablePrefix = \"AI: \";\r\n/**\r\n *  Session storage key for the prefix for the key indicating message type already logged\r\n */\r\nvar AIInternalMessagePrefix = \"AITR_\";\r\nvar strErrorToConsole = \"errorToConsole\";\r\nvar strWarnToConsole = \"warnToConsole\";\r\nfunction _sanitizeDiagnosticText(text) {\r\n    if (text) {\r\n        return \"\\\"\" + text.replace(/\\\"/g, strEmpty) + \"\\\"\";\r\n    }\r\n    return strEmpty;\r\n}\r\nfunction _logToConsole(func, message) {\r\n    var theConsole = getConsole();\r\n    if (!!theConsole) {\r\n        var logFunc = \"log\";\r\n        if (theConsole[func]) {\r\n            logFunc = func;\r\n        }\r\n        if (isFunction(theConsole[logFunc])) {\r\n            theConsole[logFunc](message);\r\n        }\r\n    }\r\n}\r\nvar _InternalLogMessage = /** @class */ (function () {\r\n    function _InternalLogMessage(msgId, msg, isUserAct, properties) {\r\n        if (isUserAct === void 0) { isUserAct = false; }\r\n        var _self = this;\r\n        _self.messageId = msgId;\r\n        _self.message =\r\n            (isUserAct ? AiUserActionablePrefix : AiNonUserActionablePrefix) +\r\n                msgId;\r\n        var strProps = strEmpty;\r\n        if (hasJSON()) {\r\n            strProps = getJSON().stringify(properties);\r\n        }\r\n        var diagnosticText = (msg ? \" message:\" + _sanitizeDiagnosticText(msg) : strEmpty) +\r\n            (properties ? \" props:\" + _sanitizeDiagnosticText(strProps) : strEmpty);\r\n        _self.message += diagnosticText;\r\n    }\r\n    _InternalLogMessage.dataType = \"MessageData\";\r\n    return _InternalLogMessage;\r\n}());\r\nexport { _InternalLogMessage };\r\nexport function safeGetLogger(core, config) {\r\n    return (core || {}).logger || new DiagnosticLogger(config);\r\n}\r\nvar DiagnosticLogger = /** @class */ (function () {\r\n    function DiagnosticLogger(config) {\r\n        this.identifier = \"DiagnosticLogger\";\r\n        /**\r\n         * The internal logging queue\r\n         */\r\n        this.queue = [];\r\n        /**\r\n         * Count of internal messages sent\r\n         */\r\n        var _messageCount = 0;\r\n        /**\r\n         * Holds information about what message types were already logged to console or sent to server.\r\n         */\r\n        var _messageLogged = {};\r\n        dynamicProto(DiagnosticLogger, this, function (_self) {\r\n            if (isNullOrUndefined(config)) {\r\n                config = {};\r\n            }\r\n            _self.consoleLoggingLevel = function () { return _getConfigValue(\"loggingLevelConsole\", 0); };\r\n            _self.telemetryLoggingLevel = function () { return _getConfigValue(\"loggingLevelTelemetry\", 1); };\r\n            _self.maxInternalMessageLimit = function () { return _getConfigValue(\"maxMessageLimit\", 25); };\r\n            _self.enableDebugExceptions = function () { return _getConfigValue(\"enableDebugExceptions\", false); };\r\n            /**\r\n             * This method will throw exceptions in debug mode or attempt to log the error as a console warning.\r\n             * @param severity {LoggingSeverity} - The severity of the log message\r\n             * @param message {_InternalLogMessage} - The log message.\r\n             */\r\n            _self.throwInternal = function (severity, msgId, msg, properties, isUserAct) {\r\n                if (isUserAct === void 0) { isUserAct = false; }\r\n                var message = new _InternalLogMessage(msgId, msg, isUserAct, properties);\r\n                if (_self.enableDebugExceptions()) {\r\n                    throw dumpObj(message);\r\n                }\r\n                else {\r\n                    // Get the logging function and fallback to warnToConsole of for some reason errorToConsole doesn't exist\r\n                    var logFunc = severity === 1 /* eLoggingSeverity.CRITICAL */ ? strErrorToConsole : strWarnToConsole;\r\n                    if (!isUndefined(message.message)) {\r\n                        var logLevel = _self.consoleLoggingLevel();\r\n                        if (isUserAct) {\r\n                            // check if this message type was already logged to console for this page view and if so, don't log it again\r\n                            var messageKey = +message.messageId;\r\n                            if (!_messageLogged[messageKey] && logLevel >= severity) {\r\n                                _self[logFunc](message.message);\r\n                                _messageLogged[messageKey] = true;\r\n                            }\r\n                        }\r\n                        else {\r\n                            // Only log traces if the console Logging Level is >= the throwInternal severity level\r\n                            if (logLevel >= severity) {\r\n                                _self[logFunc](message.message);\r\n                            }\r\n                        }\r\n                        _self.logInternalMessage(severity, message);\r\n                    }\r\n                    else {\r\n                        _debugExtMsg(\"throw\" + (severity === 1 /* eLoggingSeverity.CRITICAL */ ? \"Critical\" : \"Warning\"), message);\r\n                    }\r\n                }\r\n            };\r\n            /**\r\n             * This will write a warning to the console if possible\r\n             * @param message {string} - The warning message\r\n             */\r\n            _self.warnToConsole = function (message) {\r\n                _logToConsole(\"warn\", message);\r\n                _debugExtMsg(\"warning\", message);\r\n            };\r\n            /**\r\n             * This will write an error to the console if possible\r\n             * @param message {string} - The error message\r\n             */\r\n            _self.errorToConsole = function (message) {\r\n                _logToConsole(\"error\", message);\r\n                _debugExtMsg(\"error\", message);\r\n            };\r\n            /**\r\n             * Resets the internal message count\r\n             */\r\n            _self.resetInternalMessageCount = function () {\r\n                _messageCount = 0;\r\n                _messageLogged = {};\r\n            };\r\n            /**\r\n             * Logs a message to the internal queue.\r\n             * @param severity {LoggingSeverity} - The severity of the log message\r\n             * @param message {_InternalLogMessage} - The message to log.\r\n             */\r\n            _self.logInternalMessage = function (severity, message) {\r\n                if (_areInternalMessagesThrottled()) {\r\n                    return;\r\n                }\r\n                // check if this message type was already logged for this session and if so, don't log it again\r\n                var logMessage = true;\r\n                var messageKey = AIInternalMessagePrefix + message.messageId;\r\n                // if the session storage is not available, limit to only one message type per page view\r\n                if (_messageLogged[messageKey]) {\r\n                    logMessage = false;\r\n                }\r\n                else {\r\n                    _messageLogged[messageKey] = true;\r\n                }\r\n                if (logMessage) {\r\n                    // Push the event in the internal queue\r\n                    if (severity <= _self.telemetryLoggingLevel()) {\r\n                        _self.queue.push(message);\r\n                        _messageCount++;\r\n                        _debugExtMsg((severity === 1 /* eLoggingSeverity.CRITICAL */ ? \"error\" : \"warn\"), message);\r\n                    }\r\n                    // When throttle limit reached, send a special event\r\n                    if (_messageCount === _self.maxInternalMessageLimit()) {\r\n                        var throttleLimitMessage = \"Internal events throttle limit per PageView reached for this app.\";\r\n                        var throttleMessage = new _InternalLogMessage(23 /* _eInternalMessageId.MessageLimitPerPVExceeded */, throttleLimitMessage, false);\r\n                        _self.queue.push(throttleMessage);\r\n                        if (severity === 1 /* eLoggingSeverity.CRITICAL */) {\r\n                            _self.errorToConsole(throttleLimitMessage);\r\n                        }\r\n                        else {\r\n                            _self.warnToConsole(throttleLimitMessage);\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n            function _getConfigValue(name, defValue) {\r\n                var value = config[name];\r\n                if (!isNullOrUndefined(value)) {\r\n                    return value;\r\n                }\r\n                return defValue;\r\n            }\r\n            function _areInternalMessagesThrottled() {\r\n                return _messageCount >= _self.maxInternalMessageLimit();\r\n            }\r\n            function _debugExtMsg(name, data) {\r\n                var dbgExt = getDebugExt(config);\r\n                if (dbgExt && dbgExt.diagLog) {\r\n                    dbgExt.diagLog(name, data);\r\n                }\r\n            }\r\n        });\r\n    }\r\n// Removed Stub for DiagnosticLogger.prototype.enableDebugExceptions.\r\n// Removed Stub for DiagnosticLogger.prototype.consoleLoggingLevel.\r\n// Removed Stub for DiagnosticLogger.prototype.telemetryLoggingLevel.\r\n// Removed Stub for DiagnosticLogger.prototype.maxInternalMessageLimit.\r\n// Removed Stub for DiagnosticLogger.prototype.throwInternal.\r\n// Removed Stub for DiagnosticLogger.prototype.warnToConsole.\r\n// Removed Stub for DiagnosticLogger.prototype.errorToConsole.\r\n// Removed Stub for DiagnosticLogger.prototype.resetInternalMessageCount.\r\n// Removed Stub for DiagnosticLogger.prototype.logInternalMessage.\r\n    return DiagnosticLogger;\r\n}());\r\nexport { DiagnosticLogger };\r\nfunction _getLogger(logger) {\r\n    return (logger || new DiagnosticLogger());\r\n}\r\n/**\r\n * This is a helper method which will call throwInternal on the passed logger, will throw exceptions in\r\n * debug mode or attempt to log the error as a console warning. This helper is provided mostly to better\r\n * support minification as logger.throwInternal() will not compress the publish \"throwInternal\" used throughout\r\n * the code.\r\n * @param logger - The Diagnostic Logger instance to use.\r\n * @param severity {LoggingSeverity} - The severity of the log message\r\n * @param message {_InternalLogMessage} - The log message.\r\n */\r\nexport function _throwInternal(logger, severity, msgId, msg, properties, isUserAct) {\r\n    if (isUserAct === void 0) { isUserAct = false; }\r\n    (logger || new DiagnosticLogger()).throwInternal(severity, msgId, msg, properties, isUserAct);\r\n}\r\n/**\r\n * This is a helper method which will call warnToConsole on the passed logger with the provided message.\r\n * @param logger - The Diagnostic Logger instance to use.\r\n * @param message {_InternalLogMessage} - The log message.\r\n */\r\nexport function _warnToConsole(logger, message) {\r\n    _getLogger(logger).warnToConsole(message);\r\n}\r\n/**\r\n * Logs a message to the internal queue.\r\n * @param logger - The Diagnostic Logger instance to use.\r\n * @param severity {LoggingSeverity} - The severity of the log message\r\n * @param message {_InternalLogMessage} - The message to log.\r\n */\r\nexport function _logInternalMessage(logger, severity, message) {\r\n    _getLogger(logger).logInternalMessage(severity, message);\r\n}\r\n//# sourceMappingURL=DiagnosticLogger.js.map","/*\n * Application Insights JavaScript SDK - Core, 2.8.4\n * Copyright (c) Microsoft and contributors. All rights reserved.\n */\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\r\nimport { dateNow, isArray, isFunction, objDefineAccessors } from \"./HelperFuncs\";\r\nvar strExecutionContextKey = \"ctx\";\r\nvar _defaultPerfManager = null;\r\nvar PerfEvent = /** @class */ (function () {\r\n    function PerfEvent(name, payloadDetails, isAsync) {\r\n        var _self = this;\r\n        var accessorDefined = false;\r\n        _self.start = dateNow();\r\n        _self.name = name;\r\n        _self.isAsync = isAsync;\r\n        _self.isChildEvt = function () { return false; };\r\n        if (isFunction(payloadDetails)) {\r\n            // Create an accessor to minimize the potential performance impact of executing the payloadDetails callback\r\n            var theDetails_1;\r\n            accessorDefined = objDefineAccessors(_self, \"payload\", function () {\r\n                // Delay the execution of the payloadDetails until needed\r\n                if (!theDetails_1 && isFunction(payloadDetails)) {\r\n                    theDetails_1 = payloadDetails();\r\n                    // clear it out now so the referenced objects can be garbage collected\r\n                    payloadDetails = null;\r\n                }\r\n                return theDetails_1;\r\n            });\r\n        }\r\n        _self.getCtx = function (key) {\r\n            if (key) {\r\n                // The parent and child links are located directly on the object (for better viewing in the DebugPlugin)\r\n                if (key === PerfEvent.ParentContextKey || key === PerfEvent.ChildrenContextKey) {\r\n                    return _self[key];\r\n                }\r\n                return (_self[strExecutionContextKey] || {})[key];\r\n            }\r\n            return null;\r\n        };\r\n        _self.setCtx = function (key, value) {\r\n            if (key) {\r\n                // Put the parent and child links directly on the object (for better viewing in the DebugPlugin)\r\n                if (key === PerfEvent.ParentContextKey) {\r\n                    // Simple assumption, if we are setting a parent then we must be a child\r\n                    if (!_self[key]) {\r\n                        _self.isChildEvt = function () { return true; };\r\n                    }\r\n                    _self[key] = value;\r\n                }\r\n                else if (key === PerfEvent.ChildrenContextKey) {\r\n                    _self[key] = value;\r\n                }\r\n                else {\r\n                    var ctx = _self[strExecutionContextKey] = _self[strExecutionContextKey] || {};\r\n                    ctx[key] = value;\r\n                }\r\n            }\r\n        };\r\n        _self.complete = function () {\r\n            var childTime = 0;\r\n            var childEvts = _self.getCtx(PerfEvent.ChildrenContextKey);\r\n            if (isArray(childEvts)) {\r\n                for (var lp = 0; lp < childEvts.length; lp++) {\r\n                    var childEvt = childEvts[lp];\r\n                    if (childEvt) {\r\n                        childTime += childEvt.time;\r\n                    }\r\n                }\r\n            }\r\n            _self.time = dateNow() - _self.start;\r\n            _self.exTime = _self.time - childTime;\r\n            _self.complete = function () { };\r\n            if (!accessorDefined && isFunction(payloadDetails)) {\r\n                // If we couldn't define the property set during complete -- to minimize the perf impact until after the time\r\n                _self.payload = payloadDetails();\r\n            }\r\n        };\r\n    }\r\n    PerfEvent.ParentContextKey = \"parent\";\r\n    PerfEvent.ChildrenContextKey = \"childEvts\";\r\n    return PerfEvent;\r\n}());\r\nexport { PerfEvent };\r\nvar PerfManager = /** @class */ (function () {\r\n    function PerfManager(manager) {\r\n        /**\r\n         * General bucket used for execution context set and retrieved via setCtx() and getCtx.\r\n         * Defined as private so it can be visualized via the DebugPlugin\r\n         */\r\n        this.ctx = {};\r\n        dynamicProto(PerfManager, this, function (_self) {\r\n            _self.create = function (src, payloadDetails, isAsync) {\r\n                // TODO (@MSNev): at some point we will want to add additional configuration to \"select\" which events to instrument\r\n                // for now this is just a simple do everything.\r\n                return new PerfEvent(src, payloadDetails, isAsync);\r\n            };\r\n            _self.fire = function (perfEvent) {\r\n                if (perfEvent) {\r\n                    perfEvent.complete();\r\n                    if (manager && isFunction(manager.perfEvent)) {\r\n                        manager.perfEvent(perfEvent);\r\n                    }\r\n                }\r\n            };\r\n            _self.setCtx = function (key, value) {\r\n                if (key) {\r\n                    var ctx = _self[strExecutionContextKey] = _self[strExecutionContextKey] || {};\r\n                    ctx[key] = value;\r\n                }\r\n            };\r\n            _self.getCtx = function (key) {\r\n                return (_self[strExecutionContextKey] || {})[key];\r\n            };\r\n        });\r\n    }\r\n// Removed Stub for PerfManager.prototype.create.\r\n// Removed Stub for PerfManager.prototype.fire.\r\n// Removed Stub for PerfManager.prototype.setCtx.\r\n// Removed Stub for PerfManager.prototype.getCtx.\r\n    return PerfManager;\r\n}());\r\nexport { PerfManager };\r\nvar doPerfActiveKey = \"CoreUtils.doPerf\";\r\n/**\r\n * Helper function to wrap a function with a perf event\r\n * @param mgrSource - The Performance Manager or a Performance provider source (may be null)\r\n * @param getSource - The callback to create the source name for the event (if perf monitoring is enabled)\r\n * @param func - The function to call and measure\r\n * @param details - A function to return the payload details\r\n * @param isAsync - Is the event / function being call asynchronously or synchronously\r\n */\r\nexport function doPerf(mgrSource, getSource, func, details, isAsync) {\r\n    if (mgrSource) {\r\n        var perfMgr = mgrSource;\r\n        if (isFunction(perfMgr[\"getPerfMgr\"])) {\r\n            // Looks like a perf manager provider object\r\n            perfMgr = perfMgr[\"getPerfMgr\"]();\r\n        }\r\n        if (perfMgr) {\r\n            var perfEvt = void 0;\r\n            var currentActive = perfMgr.getCtx(doPerfActiveKey);\r\n            try {\r\n                perfEvt = perfMgr.create(getSource(), details, isAsync);\r\n                if (perfEvt) {\r\n                    if (currentActive && perfEvt.setCtx) {\r\n                        perfEvt.setCtx(PerfEvent.ParentContextKey, currentActive);\r\n                        if (currentActive.getCtx && currentActive.setCtx) {\r\n                            var children = currentActive.getCtx(PerfEvent.ChildrenContextKey);\r\n                            if (!children) {\r\n                                children = [];\r\n                                currentActive.setCtx(PerfEvent.ChildrenContextKey, children);\r\n                            }\r\n                            children.push(perfEvt);\r\n                        }\r\n                    }\r\n                    // Set this event as the active event now\r\n                    perfMgr.setCtx(doPerfActiveKey, perfEvt);\r\n                    return func(perfEvt);\r\n                }\r\n            }\r\n            catch (ex) {\r\n                if (perfEvt && perfEvt.setCtx) {\r\n                    perfEvt.setCtx(\"exception\", ex);\r\n                }\r\n            }\r\n            finally {\r\n                // fire the perf event\r\n                if (perfEvt) {\r\n                    perfMgr.fire(perfEvt);\r\n                }\r\n                // Reset the active event to the previous value\r\n                perfMgr.setCtx(doPerfActiveKey, currentActive);\r\n            }\r\n        }\r\n    }\r\n    return func();\r\n}\r\n/**\r\n * Set the global performance manager to use when there is no core instance or it has not been initialized yet.\r\n * @param perfManager - The IPerfManager instance to use when no performance manager is supplied.\r\n */\r\nexport function setGblPerfMgr(perfManager) {\r\n    _defaultPerfManager = perfManager;\r\n}\r\n/**\r\n * Get the current global performance manager that will be used with no performance manager is supplied.\r\n * @returns - The current default manager\r\n */\r\nexport function getGblPerfMgr() {\r\n    return _defaultPerfManager;\r\n}\r\n//# sourceMappingURL=PerfManager.js.map","/*\n * Application Insights JavaScript SDK - Core, 2.8.4\n * Copyright (c) Microsoft and contributors. All rights reserved.\n */\n\r\n\r\nimport { getCrypto, getMsCrypto, isIE } from \"./EnvUtils\";\r\nimport { dateNow } from \"./HelperFuncs\";\r\nimport { strEmpty } from \"./InternalConstants\";\r\nvar UInt32Mask = 0x100000000;\r\nvar MaxUInt32 = 0xffffffff;\r\n// MWC based Random generator (for IE)\r\nvar _mwcSeeded = false;\r\nvar _mwcW = 123456789;\r\nvar _mwcZ = 987654321;\r\n// Takes any integer\r\nfunction _mwcSeed(seedValue) {\r\n    if (seedValue < 0) {\r\n        // Make sure we end up with a positive number and not -ve one.\r\n        seedValue >>>= 0;\r\n    }\r\n    _mwcW = (123456789 + seedValue) & MaxUInt32;\r\n    _mwcZ = (987654321 - seedValue) & MaxUInt32;\r\n    _mwcSeeded = true;\r\n}\r\nfunction _autoSeedMwc() {\r\n    // Simple initialization using default Math.random() - So we inherit any entropy from the browser\r\n    // and bitwise XOR with the current milliseconds\r\n    try {\r\n        var now = dateNow() & 0x7fffffff;\r\n        _mwcSeed(((Math.random() * UInt32Mask) ^ now) + now);\r\n    }\r\n    catch (e) {\r\n        // Don't crash if something goes wrong\r\n    }\r\n}\r\n/**\r\n * Generate a random value between 0 and maxValue, max value should be limited to a 32-bit maximum.\r\n * So maxValue(16) will produce a number from 0..16 (range of 17)\r\n * @param maxValue\r\n */\r\nexport function randomValue(maxValue) {\r\n    if (maxValue > 0) {\r\n        return Math.floor((random32() / MaxUInt32) * (maxValue + 1)) >>> 0;\r\n    }\r\n    return 0;\r\n}\r\n/**\r\n * generate a random 32-bit number (0x000000..0xFFFFFFFF) or (-0x80000000..0x7FFFFFFF), defaults un-unsigned.\r\n * @param signed - True to return a signed 32-bit number (-0x80000000..0x7FFFFFFF) otherwise an unsigned one (0x000000..0xFFFFFFFF)\r\n */\r\nexport function random32(signed) {\r\n    var value = 0;\r\n    var c = getCrypto() || getMsCrypto();\r\n    if (c && c.getRandomValues) {\r\n        // Make sure the number is converted into the specified range (-0x80000000..0x7FFFFFFF)\r\n        value = c.getRandomValues(new Uint32Array(1))[0] & MaxUInt32;\r\n    }\r\n    if (value === 0 && isIE()) {\r\n        // For IE 6, 7, 8 (especially on XP) Math.random is not very random\r\n        if (!_mwcSeeded) {\r\n            // Set the seed for the Mwc algorithm\r\n            _autoSeedMwc();\r\n        }\r\n        // Don't use Math.random for IE\r\n        // Make sure the number is converted into the specified range (-0x80000000..0x7FFFFFFF)\r\n        value = mwcRandom32() & MaxUInt32;\r\n    }\r\n    if (value === 0) {\r\n        // Make sure the number is converted into the specified range (-0x80000000..0x7FFFFFFF)\r\n        value = Math.floor((UInt32Mask * Math.random()) | 0);\r\n    }\r\n    if (!signed) {\r\n        // Make sure we end up with a positive number and not -ve one.\r\n        value >>>= 0;\r\n    }\r\n    return value;\r\n}\r\n/**\r\n * Seed the MWC random number generator with the specified seed or a random value\r\n * @param value - optional the number to used as the seed, if undefined, null or zero a random value will be chosen\r\n */\r\nexport function mwcRandomSeed(value) {\r\n    if (!value) {\r\n        _autoSeedMwc();\r\n    }\r\n    else {\r\n        _mwcSeed(value);\r\n    }\r\n}\r\n/**\r\n * Generate a random 32-bit number between (0x000000..0xFFFFFFFF) or (-0x80000000..0x7FFFFFFF), using MWC (Multiply with carry)\r\n * instead of Math.random() defaults to un-signed.\r\n * Used as a replacement random generator for IE to avoid issues with older IE instances.\r\n * @param signed - True to return a signed 32-bit number (-0x80000000..0x7FFFFFFF) otherwise an unsigned one (0x000000..0xFFFFFFFF)\r\n */\r\nexport function mwcRandom32(signed) {\r\n    _mwcZ = (36969 * (_mwcZ & 0xFFFF) + (_mwcZ >> 16)) & MaxUInt32;\r\n    _mwcW = (18000 * (_mwcW & 0xFFFF) + (_mwcW >> 16)) & MaxUInt32;\r\n    var value = (((_mwcZ << 16) + (_mwcW & 0xFFFF)) >>> 0) & MaxUInt32 | 0;\r\n    if (!signed) {\r\n        // Make sure we end up with a positive number and not -ve one.\r\n        value >>>= 0;\r\n    }\r\n    return value;\r\n}\r\n/**\r\n * Generate random base64 id string.\r\n * The default length is 22 which is 132-bits so almost the same as a GUID but as base64 (the previous default was 5)\r\n * @param maxLength - Optional value to specify the length of the id to be generated, defaults to 22\r\n */\r\nexport function newId(maxLength) {\r\n    if (maxLength === void 0) { maxLength = 22; }\r\n    var base64chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\r\n    // Start with an initial random number, consuming the value in reverse byte order\r\n    var number = random32() >>> 0; // Make sure it's a +ve number\r\n    var chars = 0;\r\n    var result = strEmpty;\r\n    while (result.length < maxLength) {\r\n        chars++;\r\n        result += base64chars.charAt(number & 0x3F);\r\n        number >>>= 6; // Zero fill with right shift\r\n        if (chars === 5) {\r\n            // 5 base64 characters === 30 bits so we don't have enough bits for another base64 char\r\n            // So add on another 30 bits and make sure it's +ve\r\n            number = (((random32() << 2) & 0xFFFFFFFF) | (number & 0x03)) >>> 0;\r\n            chars = 0; // We need to reset the number every 5 chars (30 bits)\r\n        }\r\n    }\r\n    return result;\r\n}\r\n//# sourceMappingURL=RandomHelper.js.map","/*\n * Application Insights JavaScript SDK - Core, 2.8.4\n * Copyright (c) Microsoft and contributors. All rights reserved.\n */\n\r\n\r\nimport { ObjDefineProperty } from \"@microsoft/applicationinsights-shims\";\r\nimport { normalizeJsName } from \"./HelperFuncs\";\r\nimport { newId } from \"./RandomHelper\";\r\nvar _objDefineProperty = ObjDefineProperty;\r\nvar version = \"2.8.4\";\r\nvar instanceName = \".\" + newId(6);\r\nvar _dataUid = 0;\r\nfunction _createAccessor(target, prop, value) {\r\n    if (_objDefineProperty) {\r\n        try {\r\n            _objDefineProperty(target, prop, {\r\n                value: value,\r\n                enumerable: false,\r\n                configurable: true\r\n            });\r\n            return true;\r\n        }\r\n        catch (e) {\r\n            // IE8 Defines a defineProperty on Object but it's only supported for DOM elements so it will throw\r\n            // We will just ignore this here.\r\n        }\r\n    }\r\n    return false;\r\n}\r\n// Accepts only:\r\n//  - Node\r\n//    - Node.ELEMENT_NODE\r\n//    - Node.DOCUMENT_NODE\r\n//  - Object\r\n//    - Any\r\nfunction _canAcceptData(target) {\r\n    return target.nodeType === 1 || target.nodeType === 9 || !(+target.nodeType);\r\n}\r\nfunction _getCache(data, target) {\r\n    var theCache = target[data.id];\r\n    if (!theCache) {\r\n        theCache = {};\r\n        try {\r\n            if (_canAcceptData(target)) {\r\n                if (!_createAccessor(target, data.id, theCache)) {\r\n                    // Environment doesn't support accessor, so just use direct assignment\r\n                    target[data.id] = theCache;\r\n                }\r\n            }\r\n        }\r\n        catch (e) {\r\n            // Not all environments allow extending all objects, so just ignore the cache in those cases\r\n        }\r\n    }\r\n    return theCache;\r\n}\r\nexport function createUniqueNamespace(name, includeVersion) {\r\n    if (includeVersion === void 0) { includeVersion = false; }\r\n    return normalizeJsName(name + (_dataUid++) + (includeVersion ? \".\" + version : \"\") + instanceName);\r\n}\r\nexport function createElmNodeData(name) {\r\n    var data = {\r\n        id: createUniqueNamespace(\"_aiData-\" + (name || \"\") + \".\" + version),\r\n        accept: function (target) {\r\n            return _canAcceptData(target);\r\n        },\r\n        get: function (target, name, defValue, addDefault) {\r\n            var theCache = target[data.id];\r\n            if (!theCache) {\r\n                if (addDefault) {\r\n                    // Side effect is adds the cache\r\n                    theCache = _getCache(data, target);\r\n                    theCache[normalizeJsName(name)] = defValue;\r\n                }\r\n                return defValue;\r\n            }\r\n            return theCache[normalizeJsName(name)];\r\n        },\r\n        kill: function (target, name) {\r\n            if (target && target[name]) {\r\n                try {\r\n                    delete target[name];\r\n                }\r\n                catch (e) {\r\n                    // Just cleaning up, so if this fails -- ignore\r\n                }\r\n            }\r\n        }\r\n    };\r\n    return data;\r\n}\r\n//# sourceMappingURL=DataCacheHelper.js.map","/*\n * Application Insights JavaScript SDK - Core, 2.8.4\n * Copyright (c) Microsoft and contributors. All rights reserved.\n */\n\r\n\r\nimport { createElmNodeData, createUniqueNamespace } from \"./DataCacheHelper\";\r\nimport { getDocument, getWindow } from \"./EnvUtils\";\r\nimport { arrForEach, arrIndexOf, isArray, objForEachKey, objKeys } from \"./HelperFuncs\";\r\n// Added to help with minfication\r\nvar strOnPrefix = \"on\";\r\nvar strAttachEvent = \"attachEvent\";\r\nvar strAddEventHelper = \"addEventListener\";\r\nvar strDetachEvent = \"detachEvent\";\r\nvar strRemoveEventListener = \"removeEventListener\";\r\nvar strEvents = \"events\";\r\nvar strVisibilityChangeEvt = \"visibilitychange\";\r\nvar strPageHide = \"pagehide\";\r\nvar strPageShow = \"pageshow\";\r\nvar strUnload = \"unload\";\r\nvar strBeforeUnload = \"beforeunload\";\r\nvar strPageHideNamespace = createUniqueNamespace(\"aiEvtPageHide\");\r\nvar strPageShowNamespace = createUniqueNamespace(\"aiEvtPageShow\");\r\nvar rRemoveEmptyNs = /\\.[\\.]+/g;\r\nvar rRemoveTrailingEmptyNs = /[\\.]+$/;\r\nvar _guid = 1;\r\nvar elmNodeData = createElmNodeData(\"events\");\r\nvar eventNamespace = /^([^.]*)(?:\\.(.+)|)/;\r\nfunction _normalizeNamespace(name) {\r\n    if (name && name.replace) {\r\n        return name.replace(/^\\s*\\.*|\\.*\\s*$/g, \"\");\r\n    }\r\n    return name;\r\n}\r\nfunction _getEvtNamespace(eventName, evtNamespace) {\r\n    if (evtNamespace) {\r\n        var theNamespace_1 = \"\";\r\n        if (isArray(evtNamespace)) {\r\n            theNamespace_1 = \"\";\r\n            arrForEach(evtNamespace, function (name) {\r\n                name = _normalizeNamespace(name);\r\n                if (name) {\r\n                    if (name[0] !== \".\") {\r\n                        name = \".\" + name;\r\n                    }\r\n                    theNamespace_1 += name;\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            theNamespace_1 = _normalizeNamespace(evtNamespace);\r\n        }\r\n        if (theNamespace_1) {\r\n            if (theNamespace_1[0] !== \".\") {\r\n                theNamespace_1 = \".\" + theNamespace_1;\r\n            }\r\n            // We may only have the namespace and not an eventName\r\n            eventName = (eventName || \"\") + theNamespace_1;\r\n        }\r\n    }\r\n    var parsedEvent = (eventNamespace.exec(eventName || \"\") || []);\r\n    return {\r\n        type: parsedEvent[1],\r\n        ns: ((parsedEvent[2] || \"\").replace(rRemoveEmptyNs, \".\").replace(rRemoveTrailingEmptyNs, \"\").split(\".\").sort()).join(\".\")\r\n    };\r\n}\r\n/**\r\n * Get all of the registered events on the target object, this is primarily used for testing cleanup but may also be used by\r\n * applications to remove their own events\r\n * @param target - The EventTarget that has registered events\r\n * @param eventName - [Optional] The name of the event to return the registered handlers and full name (with namespaces)\r\n * @param evtNamespace - [Optional] Additional namespace(s) to append to the event listeners so they can be uniquely identified and removed based on this namespace,\r\n * if the eventName also includes a namespace the namespace(s) are merged into a single namespace\r\n */\r\nexport function __getRegisteredEvents(target, eventName, evtNamespace) {\r\n    var theEvents = [];\r\n    var eventCache = elmNodeData.get(target, strEvents, {}, false);\r\n    var evtName = _getEvtNamespace(eventName, evtNamespace);\r\n    objForEachKey(eventCache, function (evtType, registeredEvents) {\r\n        arrForEach(registeredEvents, function (value) {\r\n            if (!evtName.type || evtName.type === value.evtName.type) {\r\n                if (!evtName.ns || evtName.ns === evtName.ns) {\r\n                    theEvents.push({\r\n                        name: value.evtName.type + (value.evtName.ns ? \".\" + value.evtName.ns : \"\"),\r\n                        handler: value.handler\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    });\r\n    return theEvents;\r\n}\r\n// Exported for internal unit testing only\r\nfunction _getRegisteredEvents(target, evtName, addDefault) {\r\n    if (addDefault === void 0) { addDefault = true; }\r\n    var aiEvts = elmNodeData.get(target, strEvents, {}, addDefault);\r\n    var registeredEvents = aiEvts[evtName];\r\n    if (!registeredEvents) {\r\n        registeredEvents = aiEvts[evtName] = [];\r\n    }\r\n    return registeredEvents;\r\n}\r\nfunction _doDetach(obj, evtName, handlerRef, useCapture) {\r\n    if (obj && evtName && evtName.type) {\r\n        if (obj[strRemoveEventListener]) {\r\n            obj[strRemoveEventListener](evtName.type, handlerRef, useCapture);\r\n        }\r\n        else if (obj[strDetachEvent]) {\r\n            obj[strDetachEvent](strOnPrefix + evtName.type, handlerRef);\r\n        }\r\n    }\r\n}\r\nfunction _doAttach(obj, evtName, handlerRef, useCapture) {\r\n    var result = false;\r\n    if (obj && evtName && evtName.type && handlerRef) {\r\n        if (obj[strAddEventHelper]) {\r\n            // all browsers except IE before version 9\r\n            obj[strAddEventHelper](evtName.type, handlerRef, useCapture);\r\n            result = true;\r\n        }\r\n        else if (obj[strAttachEvent]) {\r\n            // IE before version 9\r\n            obj[strAttachEvent](strOnPrefix + evtName.type, handlerRef);\r\n            result = true;\r\n        }\r\n    }\r\n    return result;\r\n}\r\nfunction _doUnregister(target, events, evtName, unRegFn) {\r\n    var idx = events.length;\r\n    while (idx--) {\r\n        var theEvent = events[idx];\r\n        if (theEvent) {\r\n            if (!evtName.ns || evtName.ns === theEvent.evtName.ns) {\r\n                if (!unRegFn || unRegFn(theEvent)) {\r\n                    _doDetach(target, theEvent.evtName, theEvent.handler, theEvent.capture);\r\n                    // Remove the registered event\r\n                    events.splice(idx, 1);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction _unregisterEvents(target, evtName, unRegFn) {\r\n    if (evtName.type) {\r\n        _doUnregister(target, _getRegisteredEvents(target, evtName.type), evtName, unRegFn);\r\n    }\r\n    else {\r\n        var eventCache = elmNodeData.get(target, strEvents, {});\r\n        objForEachKey(eventCache, function (evtType, events) {\r\n            _doUnregister(target, events, evtName, unRegFn);\r\n        });\r\n        // Cleanup\r\n        if (objKeys(eventCache).length === 0) {\r\n            elmNodeData.kill(target, strEvents);\r\n        }\r\n    }\r\n}\r\nexport function mergeEvtNamespace(theNamespace, namespaces) {\r\n    var newNamespaces;\r\n    if (namespaces) {\r\n        if (isArray(namespaces)) {\r\n            newNamespaces = [theNamespace].concat(namespaces);\r\n        }\r\n        else {\r\n            newNamespaces = [theNamespace, namespaces];\r\n        }\r\n        // resort the namespaces so they are always in order\r\n        newNamespaces = (_getEvtNamespace(\"xx\", newNamespaces).ns).split(\".\");\r\n    }\r\n    else {\r\n        newNamespaces = theNamespace;\r\n    }\r\n    return newNamespaces;\r\n}\r\n/**\r\n * Binds the specified function to an event, so that the function gets called whenever the event fires on the object\r\n * @param obj Object to add the event too.\r\n * @param eventName String that specifies any of the standard DHTML Events without \"on\" prefix, if may also include an optional (dot \".\" prefixed)\r\n * namespaces \"click\" \"click.mynamespace\" in addition to specific namespaces.\r\n * @param handlerRef Pointer that specifies the function to call when event fires\r\n * @param evtNamespace - [Optional] Additional namespace(s) to append to the event listeners so they can be uniquely identified and removed based on this namespace,\r\n * if the eventName also includes a namespace the namespace(s) are merged into a single namespace\r\n * @param useCapture [Optional] Defaults to false\r\n * @returns True if the function was bound successfully to the event, otherwise false\r\n */\r\nexport function eventOn(target, eventName, handlerRef, evtNamespace, useCapture) {\r\n    if (useCapture === void 0) { useCapture = false; }\r\n    var result = false;\r\n    if (target) {\r\n        try {\r\n            var evtName = _getEvtNamespace(eventName, evtNamespace);\r\n            result = _doAttach(target, evtName, handlerRef, useCapture);\r\n            if (result && elmNodeData.accept(target)) {\r\n                var registeredEvent = {\r\n                    guid: _guid++,\r\n                    evtName: evtName,\r\n                    handler: handlerRef,\r\n                    capture: useCapture\r\n                };\r\n                _getRegisteredEvents(target, evtName.type).push(registeredEvent);\r\n            }\r\n        }\r\n        catch (e) {\r\n            // Just Ignore any error so that we don't break any execution path\r\n        }\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * Removes an event handler for the specified event\r\n * @param Object to remove the event from\r\n * @param eventName {string} - The name of the event, with optional namespaces or just the namespaces,\r\n * such as \"click\", \"click.mynamespace\" or \".mynamespace\"\r\n * @param handlerRef {any} - The callback function that needs to be removed from the given event, when using a\r\n * namespace (with or without a qualifying event) this may be null to remove all previously attached event handlers\r\n * otherwise this will only remove events with this specific handler.\r\n * @param evtNamespace - [Optional] Additional namespace(s) to append to the event listeners so they can be uniquely identified and removed based on this namespace,\r\n * if the eventName also includes a namespace the namespace(s) are merged into a single namespace\r\n * @param useCapture [Optional] Defaults to false\r\n */\r\nexport function eventOff(target, eventName, handlerRef, evtNamespace, useCapture) {\r\n    if (useCapture === void 0) { useCapture = false; }\r\n    if (target) {\r\n        try {\r\n            var evtName_1 = _getEvtNamespace(eventName, evtNamespace);\r\n            var found_1 = false;\r\n            _unregisterEvents(target, evtName_1, function (regEvent) {\r\n                if ((evtName_1.ns && !handlerRef) || regEvent.handler === handlerRef) {\r\n                    found_1 = true;\r\n                    return true;\r\n                }\r\n                return false;\r\n            });\r\n            if (!found_1) {\r\n                // fallback to try and remove as requested\r\n                _doDetach(target, evtName_1, handlerRef, useCapture);\r\n            }\r\n        }\r\n        catch (e) {\r\n            // Just Ignore any error so that we don't break any execution path\r\n        }\r\n    }\r\n}\r\n/**\r\n * Binds the specified function to an event, so that the function gets called whenever the event fires on the object\r\n * @param obj Object to add the event too.\r\n * @param eventNameWithoutOn String that specifies any of the standard DHTML Events without \"on\" prefix and optional (dot \".\" prefixed) namespaces \"click\" \"click.mynamespace\".\r\n * @param handlerRef Pointer that specifies the function to call when event fires\r\n * @param useCapture [Optional] Defaults to false\r\n * @returns True if the function was bound successfully to the event, otherwise false\r\n */\r\nexport function attachEvent(obj, eventNameWithoutOn, handlerRef, useCapture) {\r\n    if (useCapture === void 0) { useCapture = false; }\r\n    return eventOn(obj, eventNameWithoutOn, handlerRef, null, useCapture);\r\n}\r\n/**\r\n * Removes an event handler for the specified event\r\n * @param Object to remove the event from\r\n * @param eventNameWithoutOn {string} - The name of the event, with optional namespaces or just the namespaces,\r\n * such as \"click\", \"click.mynamespace\" or \".mynamespace\"\r\n * @param handlerRef {any} - The callback function that needs to be removed from the given event, when using a\r\n * namespace (with or without a qualifying event) this may be null to remove all previously attached event handlers\r\n * otherwise this will only remove events with this specific handler.\r\n * @param useCapture [Optional] Defaults to false\r\n */\r\nexport function detachEvent(obj, eventNameWithoutOn, handlerRef, useCapture) {\r\n    if (useCapture === void 0) { useCapture = false; }\r\n    eventOff(obj, eventNameWithoutOn, handlerRef, null, useCapture);\r\n}\r\n/**\r\n * Trys to add an event handler for the specified event to the window, body and document\r\n * @param eventName {string} - The name of the event\r\n * @param callback {any} - The callback function that needs to be executed for the given event\r\n * @param evtNamespace - [Optional] Namespace(s) to append to the event listeners so they can be uniquely identified and removed based on this namespace.\r\n * @return {boolean} - true if the handler was successfully added\r\n */\r\nexport function addEventHandler(eventName, callback, evtNamespace) {\r\n    var result = false;\r\n    var w = getWindow();\r\n    if (w) {\r\n        result = eventOn(w, eventName, callback, evtNamespace);\r\n        result = eventOn(w[\"body\"], eventName, callback, evtNamespace) || result;\r\n    }\r\n    var doc = getDocument();\r\n    if (doc) {\r\n        result = eventOn(doc, eventName, callback, evtNamespace) || result;\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * Trys to remove event handler(s) for the specified event/namespace to the window, body and document\r\n * @param eventName {string} - The name of the event, with optional namespaces or just the namespaces,\r\n * such as \"click\", \"click.mynamespace\" or \".mynamespace\"\r\n * @param callback {any} - - The callback function that needs to be removed from the given event, when using a\r\n * namespace (with or without a qualifying event) this may be null to remove all previously attached event handlers\r\n * otherwise this will only remove events with this specific handler.\r\n * @param evtNamespace - [Optional] Namespace(s) to append to the event listeners so they can be uniquely identified and removed based on this namespace.\r\n */\r\nexport function removeEventHandler(eventName, callback, evtNamespace) {\r\n    var w = getWindow();\r\n    if (w) {\r\n        eventOff(w, eventName, callback, evtNamespace);\r\n        eventOff(w[\"body\"], eventName, callback, evtNamespace);\r\n    }\r\n    var doc = getDocument();\r\n    if (doc) {\r\n        eventOff(doc, eventName, callback, evtNamespace);\r\n    }\r\n}\r\n/**\r\n * Bind the listener to the array of events\r\n * @param events An string array of event names to bind the listener to\r\n * @param listener The event callback to call when the event is triggered\r\n * @param excludeEvents - [Optional] An array of events that should not be hooked (if possible), unless no other events can be.\r\n * @param evtNamespace - [Optional] Namespace(s) to append to the event listeners so they can be uniquely identified and removed based on this namespace.\r\n * @returns true - when at least one of the events was registered otherwise false\r\n */\r\nfunction _addEventListeners(events, listener, excludeEvents, evtNamespace) {\r\n    var added = false;\r\n    if (listener && events && events.length > 0) {\r\n        arrForEach(events, function (name) {\r\n            if (name) {\r\n                if (!excludeEvents || arrIndexOf(excludeEvents, name) === -1) {\r\n                    added = addEventHandler(name, listener, evtNamespace) || added;\r\n                }\r\n            }\r\n        });\r\n    }\r\n    return added;\r\n}\r\n/**\r\n * Bind the listener to the array of events\r\n * @param events An string array of event names to bind the listener to\r\n * @param listener The event callback to call when the event is triggered\r\n * @param excludeEvents - [Optional] An array of events that should not be hooked (if possible), unless no other events can be.\r\n * @param evtNamespace - [Optional] Namespace(s) to append to the event listeners so they can be uniquely identified and removed based on this namespace.\r\n * @returns true - when at least one of the events was registered otherwise false\r\n */\r\nexport function addEventListeners(events, listener, excludeEvents, evtNamespace) {\r\n    var added = false;\r\n    if (listener && events && isArray(events)) {\r\n        added = _addEventListeners(events, listener, excludeEvents, evtNamespace);\r\n        if (!added && excludeEvents && excludeEvents.length > 0) {\r\n            // Failed to add any listeners and we excluded some, so just attempt to add the excluded events\r\n            added = _addEventListeners(events, listener, null, evtNamespace);\r\n        }\r\n    }\r\n    return added;\r\n}\r\n/**\r\n * Remove the listener from the array of events\r\n * @param events An string array of event names to bind the listener to\r\n * @param listener The event callback to call when the event is triggered\r\n * @param evtNamespace - [Optional] Namespace(s) to append to the event listeners so they can be uniquely identified and removed based on this namespace.\r\n */\r\nexport function removeEventListeners(events, listener, evtNamespace) {\r\n    if (events && isArray(events)) {\r\n        arrForEach(events, function (name) {\r\n            if (name) {\r\n                removeEventHandler(name, listener, evtNamespace);\r\n            }\r\n        });\r\n    }\r\n}\r\n/**\r\n * Listen to the 'beforeunload', 'unload' and 'pagehide' events which indicates a page unload is occurring,\r\n * this does NOT listen to the 'visibilitychange' event as while it does indicate that the page is being hidden\r\n * it does not *necessarily* mean that the page is being completely unloaded, it can mean that the user is\r\n * just navigating to a different Tab and may come back (without unloading the page). As such you may also\r\n * need to listen to the 'addPageHideEventListener' and 'addPageShowEventListener' events.\r\n * @param listener - The event callback to call when a page unload event is triggered\r\n * @param excludeEvents - [Optional] An array of events that should not be hooked, unless no other events can be.\r\n * @param evtNamespace - [Optional] Namespace(s) to append to the event listeners so they can be uniquely identified and removed based on this namespace.\r\n * @returns true - when at least one of the events was registered otherwise false\r\n */\r\nexport function addPageUnloadEventListener(listener, excludeEvents, evtNamespace) {\r\n    // Hook the unload event for the document, window and body to ensure that the client events are flushed to the server\r\n    // As just hooking the window does not always fire (on chrome) for page navigation's.\r\n    return addEventListeners([strBeforeUnload, strUnload, strPageHide], listener, excludeEvents, evtNamespace);\r\n}\r\n/**\r\n * Remove any matching 'beforeunload', 'unload' and 'pagehide' events that may have been added via addEventListener,\r\n * addEventListeners, addPageUnloadEventListener or addPageHideEventListener.\r\n * @param listener - The specific event callback to to be removed\r\n * @param evtNamespace - [Optional] Namespace(s) uniquely identified and removed based on this namespace.\r\n * @returns true - when at least one of the events was registered otherwise false\r\n */\r\nexport function removePageUnloadEventListener(listener, evtNamespace) {\r\n    removeEventListeners([strBeforeUnload, strUnload, strPageHide], listener, evtNamespace);\r\n}\r\n/**\r\n * Listen to the pagehide and visibility changing to 'hidden' events, because the 'visibilitychange' uses\r\n * an internal proxy to detect the visibility state you SHOULD use a unique namespace when if you plan to call\r\n * removePageShowEventListener as the remove ignores the listener argument for the 'visibilitychange' event.\r\n * @param listener - The event callback to call when a page hide event is triggered\r\n * @param excludeEvents - [Optional] An array of events that should not be hooked (if possible), unless no other events can be.\r\n * @param evtNamespace - [Optional] A Namespace to append to the event listeners so they can be uniquely identified and removed\r\n * based on this namespace. This call also adds an additional unique \"pageshow\" namespace to the events\r\n * so that only the matching \"removePageHideEventListener\" can remove these events.\r\n * Suggestion: pass as true if you are also calling addPageUnloadEventListener as that also hooks pagehide\r\n * @returns true - when at least one of the events was registered otherwise false\r\n */\r\nexport function addPageHideEventListener(listener, excludeEvents, evtNamespace) {\r\n    function _handlePageVisibility(evt) {\r\n        var doc = getDocument();\r\n        if (listener && doc && doc.visibilityState === \"hidden\") {\r\n            listener(evt);\r\n        }\r\n    }\r\n    // add the unique page show namespace to any provided namespace so we can only remove the ones added by \"pagehide\"\r\n    var newNamespaces = mergeEvtNamespace(strPageHideNamespace, evtNamespace);\r\n    var pageUnloadAdded = _addEventListeners([strPageHide], listener, excludeEvents, newNamespaces);\r\n    if (!excludeEvents || arrIndexOf(excludeEvents, strVisibilityChangeEvt) === -1) {\r\n        pageUnloadAdded = _addEventListeners([strVisibilityChangeEvt], _handlePageVisibility, excludeEvents, newNamespaces) || pageUnloadAdded;\r\n    }\r\n    if (!pageUnloadAdded && excludeEvents) {\r\n        // Failed to add any listeners and we where requested to exclude some, so just call again without excluding anything\r\n        pageUnloadAdded = addPageHideEventListener(listener, null, evtNamespace);\r\n    }\r\n    return pageUnloadAdded;\r\n}\r\n/**\r\n * Removes the pageHide event listeners added by addPageHideEventListener, because the 'visibilitychange' uses\r\n * an internal proxy to detect the visibility state you SHOULD use a unique namespace when calling addPageHideEventListener\r\n * as the remove ignores the listener argument for the 'visibilitychange' event.\r\n * @param listener - The specific listener to remove for the 'pageshow' event only (ignored for 'visibilitychange')\r\n * @param evtNamespace - The unique namespace used when calling addPageShowEventListener\r\n */\r\nexport function removePageHideEventListener(listener, evtNamespace) {\r\n    // add the unique page show namespace to any provided namespace so we only remove the ones added by \"pagehide\"\r\n    var newNamespaces = mergeEvtNamespace(strPageHideNamespace, evtNamespace);\r\n    removeEventListeners([strPageHide], listener, newNamespaces);\r\n    removeEventListeners([strVisibilityChangeEvt], null, newNamespaces);\r\n}\r\n/**\r\n * Listen to the pageshow and visibility changing to 'visible' events, because the 'visibilitychange' uses\r\n * an internal proxy to detect the visibility state you SHOULD use a unique namespace when if you plan to call\r\n * removePageShowEventListener as the remove ignores the listener argument for the 'visibilitychange' event.\r\n * @param listener - The event callback to call when a page is show event is triggered\r\n * @param excludeEvents - [Optional] An array of events that should not be hooked (if possible), unless no other events can be.\r\n * @param evtNamespace - [Optional/Recommended] A Namespace to append to the event listeners so they can be uniquely\r\n * identified and removed based on this namespace. This call also adds an additional unique \"pageshow\" namespace to the events\r\n * so that only the matching \"removePageShowEventListener\" can remove these events.\r\n * @returns true - when at least one of the events was registered otherwise false\r\n */\r\nexport function addPageShowEventListener(listener, excludeEvents, evtNamespace) {\r\n    function _handlePageVisibility(evt) {\r\n        var doc = getDocument();\r\n        if (listener && doc && doc.visibilityState === \"visible\") {\r\n            listener(evt);\r\n        }\r\n    }\r\n    // add the unique page show namespace to any provided namespace so we can only remove the ones added by \"pageshow\"\r\n    var newNamespaces = mergeEvtNamespace(strPageShowNamespace, evtNamespace);\r\n    var pageShowAdded = _addEventListeners([strPageShow], listener, excludeEvents, newNamespaces);\r\n    pageShowAdded = _addEventListeners([strVisibilityChangeEvt], _handlePageVisibility, excludeEvents, newNamespaces) || pageShowAdded;\r\n    if (!pageShowAdded && excludeEvents) {\r\n        // Failed to add any listeners and we where requested to exclude some, so just call again without excluding anything\r\n        pageShowAdded = addPageShowEventListener(listener, null, evtNamespace);\r\n    }\r\n    return pageShowAdded;\r\n}\r\n/**\r\n * Removes the pageShow event listeners added by addPageShowEventListener, because the 'visibilitychange' uses\r\n * an internal proxy to detect the visibility state you SHOULD use a unique namespace when calling addPageShowEventListener\r\n * as the remove ignores the listener argument for the 'visibilitychange' event.\r\n * @param listener - The specific listener to remove for the 'pageshow' event only (ignored for 'visibilitychange')\r\n * @param evtNamespace - The unique namespace used when calling addPageShowEventListener\r\n */\r\nexport function removePageShowEventListener(listener, evtNamespace) {\r\n    // add the unique page show namespace to any provided namespace so we only remove the ones added by \"pageshow\"\r\n    var newNamespaces = mergeEvtNamespace(strPageShowNamespace, evtNamespace);\r\n    removeEventListeners([strPageShow], listener, newNamespaces);\r\n    removeEventListeners([strVisibilityChangeEvt], null, newNamespaces);\r\n}\r\n//# sourceMappingURL=EventHelpers.js.map","/*\n * Application Insights JavaScript SDK - Core, 2.8.4\n * Copyright (c) Microsoft and contributors. All rights reserved.\n */\n\r\n\r\n\"use strict\";\r\nimport { arrForEach, isFunction } from \"./HelperFuncs\";\r\nimport { strCore, strDoTeardown, strIsInitialized, strPriority, strProcessTelemetry, strSetNextPlugin, strTeardown } from \"./InternalConstants\";\r\nimport { createElmNodeData } from \"./DataCacheHelper\";\r\nimport { isValidSpanId, isValidTraceId } from \"./W3cTraceParent\";\r\nvar strDoUnload = \"_doUnload\";\r\nvar pluginStateData = createElmNodeData(\"plugin\");\r\nexport function _getPluginState(plugin) {\r\n    return pluginStateData.get(plugin, \"state\", {}, true);\r\n}\r\n/**\r\n * Initialize the queue of plugins\r\n * @param plugins - The array of plugins to initialize and setting of the next plugin\r\n * @param config The current config for the instance\r\n * @param core THe current core instance\r\n * @param extensions The extensions\r\n */\r\nexport function initializePlugins(processContext, extensions) {\r\n    // Set the next plugin and identified the uninitialized plugins\r\n    var initPlugins = [];\r\n    var lastPlugin = null;\r\n    var proxy = processContext.getNext();\r\n    var pluginState;\r\n    while (proxy) {\r\n        var thePlugin = proxy.getPlugin();\r\n        if (thePlugin) {\r\n            if (lastPlugin &&\r\n                isFunction(lastPlugin[strSetNextPlugin]) &&\r\n                isFunction(thePlugin[strProcessTelemetry])) {\r\n                // Set this plugin as the next for the previous one\r\n                lastPlugin[strSetNextPlugin](thePlugin);\r\n            }\r\n            var isInitialized = false;\r\n            if (isFunction(thePlugin[strIsInitialized])) {\r\n                isInitialized = thePlugin[strIsInitialized]();\r\n            }\r\n            else {\r\n                pluginState = _getPluginState(thePlugin);\r\n                isInitialized = pluginState[strIsInitialized];\r\n            }\r\n            if (!isInitialized) {\r\n                initPlugins.push(thePlugin);\r\n            }\r\n            lastPlugin = thePlugin;\r\n            proxy = proxy.getNext();\r\n        }\r\n    }\r\n    // Now initialize the plugins\r\n    arrForEach(initPlugins, function (thePlugin) {\r\n        var core = processContext.core();\r\n        thePlugin.initialize(processContext.getCfg(), core, extensions, processContext.getNext());\r\n        pluginState = _getPluginState(thePlugin);\r\n        // Only add the core to the state if the plugin didn't set it (doesn't extent from BaseTelemetryPlugin)\r\n        if (!thePlugin[strCore] && !pluginState[strCore]) {\r\n            pluginState[strCore] = core;\r\n        }\r\n        pluginState[strIsInitialized] = true;\r\n        delete pluginState[strTeardown];\r\n    });\r\n}\r\nexport function sortPlugins(plugins) {\r\n    // Sort by priority\r\n    return plugins.sort(function (extA, extB) {\r\n        var result = 0;\r\n        if (extB) {\r\n            var bHasProcess = isFunction(extB[strProcessTelemetry]);\r\n            if (isFunction(extA[strProcessTelemetry])) {\r\n                result = bHasProcess ? extA[strPriority] - extB[strPriority] : 1;\r\n            }\r\n            else if (bHasProcess) {\r\n                result = -1;\r\n            }\r\n        }\r\n        else {\r\n            result = extA ? 1 : -1;\r\n        }\r\n        return result;\r\n    });\r\n    // sort complete\r\n}\r\n/**\r\n * Teardown / Unload helper to perform teardown/unloading operations for the provided components synchronously or asynchronously, this will call any\r\n * _doTeardown() or _doUnload() functions on the provided components to allow them to finish removal.\r\n * @param components - The components you want to unload\r\n * @param unloadCtx - This is the context that should be used during unloading.\r\n * @param unloadState - The details / state of the unload process, it holds details like whether it should be unloaded synchronously or asynchronously and the reason for the unload.\r\n * @param asyncCallback - An optional callback that the plugin must call if it returns true to inform the caller that it has completed any async unload/teardown operations.\r\n * @returns boolean - true if the plugin has or will call asyncCallback, this allows the plugin to perform any asynchronous operations.\r\n */\r\nexport function unloadComponents(components, unloadCtx, unloadState, asyncCallback) {\r\n    var idx = 0;\r\n    function _doUnload() {\r\n        while (idx < components.length) {\r\n            var component = components[idx++];\r\n            if (component) {\r\n                var func = component[strDoUnload] || component[strDoTeardown];\r\n                if (isFunction(func)) {\r\n                    if (func.call(component, unloadCtx, unloadState, _doUnload) === true) {\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return _doUnload();\r\n}\r\n/**\r\n * Creates a IDistributedTraceContext which optionally also \"sets\" the value on a parent\r\n * @param parentCtx - An optional parent distributed trace instance\r\n * @returns A new IDistributedTraceContext instance that uses an internal temporary object\r\n */\r\nexport function createDistributedTraceContext(parentCtx) {\r\n    var trace = {};\r\n    return {\r\n        getName: function () {\r\n            return trace.name;\r\n        },\r\n        setName: function (newValue) {\r\n            parentCtx && parentCtx.setName(newValue);\r\n            trace.name = newValue;\r\n        },\r\n        getTraceId: function () {\r\n            return trace.traceId;\r\n        },\r\n        setTraceId: function (newValue) {\r\n            parentCtx && parentCtx.setTraceId(newValue);\r\n            if (isValidTraceId(newValue)) {\r\n                trace.traceId = newValue;\r\n            }\r\n        },\r\n        getSpanId: function () {\r\n            return trace.spanId;\r\n        },\r\n        setSpanId: function (newValue) {\r\n            parentCtx && parentCtx.setSpanId(newValue);\r\n            if (isValidSpanId(newValue)) {\r\n                trace.spanId = newValue;\r\n            }\r\n        },\r\n        getTraceFlags: function () {\r\n            return trace.traceFlags;\r\n        },\r\n        setTraceFlags: function (newTraceFlags) {\r\n            parentCtx && parentCtx.setTraceFlags(newTraceFlags);\r\n            trace.traceFlags = newTraceFlags;\r\n        }\r\n    };\r\n}\r\n//# sourceMappingURL=TelemetryHelpers.js.map","/*\n * Application Insights JavaScript SDK - Core, 2.8.4\n * Copyright (c) Microsoft and contributors. All rights reserved.\n */\n\r\n\r\n\"use strict\";\r\nimport { safeGetLogger, _throwInternal } from \"./DiagnosticLogger\";\r\nimport { arrForEach, isArray, isFunction, isNullOrUndefined, isObject, isUndefined, objExtend, objForEachKey, objFreeze, objKeys, proxyFunctions } from \"./HelperFuncs\";\r\nimport { doPerf } from \"./PerfManager\";\r\nimport { dumpObj } from \"./EnvUtils\";\r\nimport { strCore, strDisabled, strEmpty, strIsInitialized, strTeardown, strUpdate } from \"./InternalConstants\";\r\nimport { _getPluginState } from \"./TelemetryHelpers\";\r\nvar strTelemetryPluginChain = \"TelemetryPluginChain\";\r\nvar strHasRunFlags = \"_hasRun\";\r\nvar strGetTelCtx = \"_getTelCtx\";\r\nvar _chainId = 0;\r\nfunction _getNextProxyStart(proxy, core, startAt) {\r\n    while (proxy) {\r\n        if (proxy.getPlugin() === startAt) {\r\n            return proxy;\r\n        }\r\n        proxy = proxy.getNext();\r\n    }\r\n    // This wasn't found in the existing chain so create an isolated one with just this plugin\r\n    return createTelemetryProxyChain([startAt], core.config || {}, core);\r\n}\r\n/**\r\n * @ignore\r\n * @param telemetryChain\r\n * @param config\r\n * @param core\r\n * @param startAt - Identifies the next plugin to execute, if null there is no \"next\" plugin and if undefined it should assume the start of the chain\r\n * @returns\r\n */\r\nfunction _createInternalContext(telemetryChain, config, core, startAt) {\r\n    // We have a special case where we want to start execution from this specific plugin\r\n    // or we simply reuse the existing telemetry plugin chain (normal execution case)\r\n    var _nextProxy = null; // By Default set as no next plugin\r\n    var _onComplete = [];\r\n    if (startAt !== null) {\r\n        // There is no next element (null) vs not defined (undefined) so use the full chain\r\n        _nextProxy = startAt ? _getNextProxyStart(telemetryChain, core, startAt) : telemetryChain;\r\n    }\r\n    var context = {\r\n        _next: _moveNext,\r\n        ctx: {\r\n            core: function () {\r\n                return core;\r\n            },\r\n            diagLog: function () {\r\n                return safeGetLogger(core, config);\r\n            },\r\n            getCfg: function () {\r\n                return config;\r\n            },\r\n            getExtCfg: _getExtCfg,\r\n            getConfig: _getConfig,\r\n            hasNext: function () {\r\n                return !!_nextProxy;\r\n            },\r\n            getNext: function () {\r\n                return _nextProxy;\r\n            },\r\n            setNext: function (nextPlugin) {\r\n                _nextProxy = nextPlugin;\r\n            },\r\n            iterate: _iterateChain,\r\n            onComplete: _addOnComplete\r\n        }\r\n    };\r\n    function _addOnComplete(onComplete, that) {\r\n        var args = [];\r\n        for (var _i = 2; _i < arguments.length; _i++) {\r\n            args[_i - 2] = arguments[_i];\r\n        }\r\n        if (onComplete) {\r\n            _onComplete.push({\r\n                func: onComplete,\r\n                self: !isUndefined(that) ? that : context.ctx,\r\n                args: args\r\n            });\r\n        }\r\n    }\r\n    function _moveNext() {\r\n        var nextProxy = _nextProxy;\r\n        // Automatically move to the next plugin\r\n        _nextProxy = nextProxy ? nextProxy.getNext() : null;\r\n        if (!nextProxy) {\r\n            var onComplete = _onComplete;\r\n            if (onComplete && onComplete.length > 0) {\r\n                arrForEach(onComplete, function (completeDetails) {\r\n                    try {\r\n                        completeDetails.func.call(completeDetails.self, completeDetails.args);\r\n                    }\r\n                    catch (e) {\r\n                        _throwInternal(core.logger, 2 /* eLoggingSeverity.WARNING */, 73 /* _eInternalMessageId.PluginException */, \"Unexpected Exception during onComplete - \" + dumpObj(e));\r\n                    }\r\n                });\r\n                _onComplete = [];\r\n            }\r\n        }\r\n        return nextProxy;\r\n    }\r\n    function _getExtCfg(identifier, defaultValue, mergeDefault) {\r\n        if (defaultValue === void 0) { defaultValue = {}; }\r\n        if (mergeDefault === void 0) { mergeDefault = 0 /* GetExtCfgMergeType.None */; }\r\n        var theConfig;\r\n        if (config) {\r\n            var extConfig = config.extensionConfig;\r\n            if (extConfig && identifier) {\r\n                theConfig = extConfig[identifier];\r\n            }\r\n        }\r\n        if (!theConfig) {\r\n            // Just use the defaults\r\n            theConfig = defaultValue;\r\n        }\r\n        else if (isObject(defaultValue)) {\r\n            if (mergeDefault !== 0 /* GetExtCfgMergeType.None */) {\r\n                // Merge the defaults and configured values\r\n                var newConfig_1 = objExtend(true, defaultValue, theConfig);\r\n                if (config && mergeDefault === 2 /* GetExtCfgMergeType.MergeDefaultFromRootOrDefault */) {\r\n                    // Enumerate over the defaultValues and if not already populated attempt to\r\n                    // find a value from the root config\r\n                    objForEachKey(defaultValue, function (field) {\r\n                        // for each unspecified field, set the default value\r\n                        if (isNullOrUndefined(newConfig_1[field])) {\r\n                            var cfgValue = config[field];\r\n                            if (!isNullOrUndefined(cfgValue)) {\r\n                                newConfig_1[field] = cfgValue;\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n                theConfig = newConfig_1;\r\n            }\r\n        }\r\n        return theConfig;\r\n    }\r\n    function _getConfig(identifier, field, defaultValue) {\r\n        if (defaultValue === void 0) { defaultValue = false; }\r\n        var theValue;\r\n        var extConfig = _getExtCfg(identifier, null);\r\n        if (extConfig && !isNullOrUndefined(extConfig[field])) {\r\n            theValue = extConfig[field];\r\n        }\r\n        else if (config && !isNullOrUndefined(config[field])) {\r\n            theValue = config[field];\r\n        }\r\n        return !isNullOrUndefined(theValue) ? theValue : defaultValue;\r\n    }\r\n    function _iterateChain(cb) {\r\n        // Keep processing until we reach the end of the chain\r\n        var nextPlugin;\r\n        while (!!(nextPlugin = context._next())) {\r\n            var plugin = nextPlugin.getPlugin();\r\n            if (plugin) {\r\n                // callback with the current on\r\n                cb(plugin);\r\n            }\r\n        }\r\n    }\r\n    return context;\r\n}\r\n/**\r\n * Creates a new Telemetry Item context with the current config, core and plugin execution chain\r\n * @param plugins - The plugin instances that will be executed\r\n * @param config - The current config\r\n * @param core - The current core instance\r\n * @param startAt - Identifies the next plugin to execute, if null there is no \"next\" plugin and if undefined it should assume the start of the chain\r\n */\r\nexport function createProcessTelemetryContext(telemetryChain, config, core, startAt) {\r\n    var internalContext = _createInternalContext(telemetryChain, config, core, startAt);\r\n    var context = internalContext.ctx;\r\n    function _processNext(env) {\r\n        var nextPlugin = internalContext._next();\r\n        // Run the next plugin which will call \"processNext()\"\r\n        nextPlugin && nextPlugin.processTelemetry(env, context);\r\n        return !nextPlugin;\r\n    }\r\n    function _createNew(plugins, startAt) {\r\n        if (plugins === void 0) { plugins = null; }\r\n        if (isArray(plugins)) {\r\n            plugins = createTelemetryProxyChain(plugins, config, core, startAt);\r\n        }\r\n        return createProcessTelemetryContext(plugins || context.getNext(), config, core, startAt);\r\n    }\r\n    context.processNext = _processNext;\r\n    context.createNew = _createNew;\r\n    return context;\r\n}\r\n/**\r\n * Creates a new Telemetry Item context with the current config, core and plugin execution chain for handling the unloading of the chain\r\n * @param plugins - The plugin instances that will be executed\r\n * @param config - The current config\r\n * @param core - The current core instance\r\n * @param startAt - Identifies the next plugin to execute, if null there is no \"next\" plugin and if undefined it should assume the start of the chain\r\n */\r\nexport function createProcessTelemetryUnloadContext(telemetryChain, core, startAt) {\r\n    var config = core.config || {};\r\n    var internalContext = _createInternalContext(telemetryChain, config, core, startAt);\r\n    var context = internalContext.ctx;\r\n    function _processNext(unloadState) {\r\n        var nextPlugin = internalContext._next();\r\n        nextPlugin && nextPlugin.unload(context, unloadState);\r\n        return !nextPlugin;\r\n    }\r\n    function _createNew(plugins, startAt) {\r\n        if (plugins === void 0) { plugins = null; }\r\n        if (isArray(plugins)) {\r\n            plugins = createTelemetryProxyChain(plugins, config, core, startAt);\r\n        }\r\n        return createProcessTelemetryUnloadContext(plugins || context.getNext(), core, startAt);\r\n    }\r\n    context.processNext = _processNext;\r\n    context.createNew = _createNew;\r\n    return context;\r\n}\r\n/**\r\n * Creates a new Telemetry Item context with the current config, core and plugin execution chain for updating the configuration\r\n * @param plugins - The plugin instances that will be executed\r\n * @param config - The current config\r\n * @param core - The current core instance\r\n * @param startAt - Identifies the next plugin to execute, if null there is no \"next\" plugin and if undefined it should assume the start of the chain\r\n */\r\nexport function createProcessTelemetryUpdateContext(telemetryChain, core, startAt) {\r\n    var config = core.config || {};\r\n    var internalContext = _createInternalContext(telemetryChain, config, core, startAt);\r\n    var context = internalContext.ctx;\r\n    function _processNext(updateState) {\r\n        return context.iterate(function (plugin) {\r\n            if (isFunction(plugin.update)) {\r\n                plugin.update(context, updateState);\r\n            }\r\n        });\r\n    }\r\n    function _createNew(plugins, startAt) {\r\n        if (plugins === void 0) { plugins = null; }\r\n        if (isArray(plugins)) {\r\n            plugins = createTelemetryProxyChain(plugins, config, core, startAt);\r\n        }\r\n        return createProcessTelemetryUpdateContext(plugins || context.getNext(), core, startAt);\r\n    }\r\n    context.processNext = _processNext;\r\n    context.createNew = _createNew;\r\n    return context;\r\n}\r\n/**\r\n * Creates an execution chain from the array of plugins\r\n * @param plugins - The array of plugins that will be executed in this order\r\n * @param defItemCtx - The default execution context to use when no telemetry context is passed to processTelemetry(), this\r\n * should be for legacy plugins only. Currently, only used for passing the current core instance and to provide better error\r\n * reporting (hasRun) when errors occur.\r\n */\r\nexport function createTelemetryProxyChain(plugins, config, core, startAt) {\r\n    var firstProxy = null;\r\n    var add = startAt ? false : true;\r\n    if (isArray(plugins) && plugins.length > 0) {\r\n        // Create the proxies and wire up the next plugin chain\r\n        var lastProxy_1 = null;\r\n        arrForEach(plugins, function (thePlugin) {\r\n            if (!add && startAt === thePlugin) {\r\n                add = true;\r\n            }\r\n            if (add && thePlugin && isFunction(thePlugin.processTelemetry)) {\r\n                // Only add plugins that are processors\r\n                var newProxy = createTelemetryPluginProxy(thePlugin, config, core);\r\n                if (!firstProxy) {\r\n                    firstProxy = newProxy;\r\n                }\r\n                if (lastProxy_1) {\r\n                    // Set this new proxy as the next for the previous one\r\n                    lastProxy_1._setNext(newProxy);\r\n                }\r\n                lastProxy_1 = newProxy;\r\n            }\r\n        });\r\n    }\r\n    if (startAt && !firstProxy) {\r\n        // Special case where the \"startAt\" was not in the original list of plugins\r\n        return createTelemetryProxyChain([startAt], config, core);\r\n    }\r\n    return firstProxy;\r\n}\r\n/**\r\n * Create the processing telemetry proxy instance, the proxy is used to abstract the current plugin to allow monitoring and\r\n * execution plugins while passing around the dynamic execution state (IProcessTelemetryContext), the proxy instance no longer\r\n * contains any execution state and can be reused between requests (this was not the case for 2.7.2 and earlier with the\r\n * TelemetryPluginChain class).\r\n * @param plugin - The plugin instance to proxy\r\n * @param config - The default execution context to use when no telemetry context is passed to processTelemetry(), this\r\n * should be for legacy plugins only. Currently, only used for passing the current core instance and to provide better error\r\n * reporting (hasRun) when errors occur.\r\n * @returns\r\n */\r\nexport function createTelemetryPluginProxy(plugin, config, core) {\r\n    var nextProxy = null;\r\n    var hasProcessTelemetry = isFunction(plugin.processTelemetry);\r\n    var hasSetNext = isFunction(plugin.setNextPlugin);\r\n    var chainId;\r\n    if (plugin) {\r\n        chainId = plugin.identifier + \"-\" + plugin.priority + \"-\" + _chainId++;\r\n    }\r\n    else {\r\n        chainId = \"Unknown-0-\" + _chainId++;\r\n    }\r\n    var proxyChain = {\r\n        getPlugin: function () {\r\n            return plugin;\r\n        },\r\n        getNext: function () {\r\n            return nextProxy;\r\n        },\r\n        processTelemetry: _processTelemetry,\r\n        unload: _unloadPlugin,\r\n        update: _updatePlugin,\r\n        _id: chainId,\r\n        _setNext: function (nextPlugin) {\r\n            nextProxy = nextPlugin;\r\n        }\r\n    };\r\n    function _getTelCtx() {\r\n        var itemCtx;\r\n        // Looks like a plugin didn't pass the (optional) context, so create a new one\r\n        if (plugin && isFunction(plugin[strGetTelCtx])) {\r\n            // This plugin extends from the BaseTelemetryPlugin so lets use it\r\n            itemCtx = plugin[strGetTelCtx]();\r\n        }\r\n        if (!itemCtx) {\r\n            // Create a temporary one\r\n            itemCtx = createProcessTelemetryContext(proxyChain, config, core);\r\n        }\r\n        return itemCtx;\r\n    }\r\n    function _processChain(itemCtx, processPluginFn, name, details, isAsync) {\r\n        var hasRun = false;\r\n        var identifier = plugin ? plugin.identifier : strTelemetryPluginChain;\r\n        var hasRunContext = itemCtx[strHasRunFlags];\r\n        if (!hasRunContext) {\r\n            // Assign and populate\r\n            hasRunContext = itemCtx[strHasRunFlags] = {};\r\n        }\r\n        // Ensure that we keep the context in sync\r\n        itemCtx.setNext(nextProxy);\r\n        if (plugin) {\r\n            doPerf(itemCtx[strCore](), function () { return identifier + \":\" + name; }, function () {\r\n                // Mark this component as having run\r\n                hasRunContext[chainId] = true;\r\n                try {\r\n                    // Set a flag on the next plugin so we know if it was attempted to be executed\r\n                    var nextId = nextProxy ? nextProxy._id : strEmpty;\r\n                    if (nextId) {\r\n                        hasRunContext[nextId] = false;\r\n                    }\r\n                    hasRun = processPluginFn(itemCtx);\r\n                }\r\n                catch (error) {\r\n                    var hasNextRun = nextProxy ? hasRunContext[nextProxy._id] : true;\r\n                    if (hasNextRun) {\r\n                        // The next plugin after us has already run so set this one as complete\r\n                        hasRun = true;\r\n                    }\r\n                    if (!nextProxy || !hasNextRun) {\r\n                        // Either we have no next plugin or the current one did not attempt to call the next plugin\r\n                        // Which means the current one is the root of the failure so log/report this failure\r\n                        _throwInternal(itemCtx.diagLog(), 1 /* eLoggingSeverity.CRITICAL */, 73 /* _eInternalMessageId.PluginException */, \"Plugin [\" + identifier + \"] failed during \" + name + \" - \" + dumpObj(error) + \", run flags: \" + dumpObj(hasRunContext));\r\n                    }\r\n                }\r\n            }, details, isAsync);\r\n        }\r\n        return hasRun;\r\n    }\r\n    function _processTelemetry(env, itemCtx) {\r\n        itemCtx = itemCtx || _getTelCtx();\r\n        function _callProcessTelemetry(itemCtx) {\r\n            if (!plugin || !hasProcessTelemetry) {\r\n                return false;\r\n            }\r\n            var pluginState = _getPluginState(plugin);\r\n            if (pluginState.teardown || pluginState[strDisabled]) {\r\n                return false;\r\n            }\r\n            // Ensure that we keep the context in sync (for processNext()), just in case a plugin\r\n            // doesn't calls processTelemetry() instead of itemContext.processNext() or some\r\n            // other form of error occurred\r\n            if (hasSetNext) {\r\n                // Backward compatibility setting the next plugin on the instance\r\n                plugin.setNextPlugin(nextProxy);\r\n            }\r\n            plugin.processTelemetry(env, itemCtx);\r\n            // Process Telemetry is expected to call itemCtx.processNext() or nextPlugin.processTelemetry()\r\n            return true;\r\n        }\r\n        if (!_processChain(itemCtx, _callProcessTelemetry, \"processTelemetry\", function () { return ({ item: env }); }, !(env.sync))) {\r\n            // The underlying plugin is either not defined, not enabled or does not have a processTelemetry implementation\r\n            // so we still want the next plugin to be executed.\r\n            itemCtx.processNext(env);\r\n        }\r\n    }\r\n    function _unloadPlugin(unloadCtx, unloadState) {\r\n        function _callTeardown() {\r\n            // Setting default of hasRun as false so the proxyProcessFn() is called as teardown() doesn't have to exist or call unloadNext().\r\n            var hasRun = false;\r\n            if (plugin) {\r\n                var pluginState = _getPluginState(plugin);\r\n                var pluginCore = plugin[strCore] || pluginState.core;\r\n                // Only teardown the plugin if it was initialized by the current core (i.e. It's not a shared plugin)\r\n                if (plugin && (!pluginCore || pluginCore === unloadCtx[strCore]()) && !pluginState[strTeardown]) {\r\n                    // Handle plugins that don't extend from the BaseTelemetryPlugin\r\n                    pluginState[strCore] = null;\r\n                    pluginState[strTeardown] = true;\r\n                    pluginState[strIsInitialized] = false;\r\n                    if (plugin[strTeardown] && plugin[strTeardown](unloadCtx, unloadState) === true) {\r\n                        // plugin told us that it was going to (or has) call unloadCtx.processNext()\r\n                        hasRun = true;\r\n                    }\r\n                }\r\n            }\r\n            return hasRun;\r\n        }\r\n        if (!_processChain(unloadCtx, _callTeardown, \"unload\", function () { }, unloadState.isAsync)) {\r\n            // Only called if we hasRun was not true\r\n            unloadCtx.processNext(unloadState);\r\n        }\r\n    }\r\n    function _updatePlugin(updateCtx, updateState) {\r\n        function _callUpdate() {\r\n            // Setting default of hasRun as false so the proxyProcessFn() is called as teardown() doesn't have to exist or call unloadNext().\r\n            var hasRun = false;\r\n            if (plugin) {\r\n                var pluginState = _getPluginState(plugin);\r\n                var pluginCore = plugin[strCore] || pluginState.core;\r\n                // Only update the plugin if it was initialized by the current core (i.e. It's not a shared plugin)\r\n                if (plugin && (!pluginCore || pluginCore === updateCtx[strCore]()) && !pluginState[strTeardown]) {\r\n                    if (plugin[strUpdate] && plugin[strUpdate](updateCtx, updateState) === true) {\r\n                        // plugin told us that it was going to (or has) call unloadCtx.processNext()\r\n                        hasRun = true;\r\n                    }\r\n                }\r\n            }\r\n            return hasRun;\r\n        }\r\n        if (!_processChain(updateCtx, _callUpdate, \"update\", function () { }, false)) {\r\n            // Only called if we hasRun was not true\r\n            updateCtx.processNext(updateState);\r\n        }\r\n    }\r\n    return objFreeze(proxyChain);\r\n}\r\n/**\r\n * This class will be removed!\r\n * @deprecated use createProcessTelemetryContext() instead\r\n */\r\nvar ProcessTelemetryContext = /** @class */ (function () {\r\n    /**\r\n     * Creates a new Telemetry Item context with the current config, core and plugin execution chain\r\n     * @param plugins - The plugin instances that will be executed\r\n     * @param config - The current config\r\n     * @param core - The current core instance\r\n     */\r\n    function ProcessTelemetryContext(pluginChain, config, core, startAt) {\r\n        var _self = this;\r\n        var context = createProcessTelemetryContext(pluginChain, config, core, startAt);\r\n        // Proxy all functions of the context to this object\r\n        proxyFunctions(_self, context, objKeys(context));\r\n    }\r\n    return ProcessTelemetryContext;\r\n}());\r\nexport { ProcessTelemetryContext };\r\n//# sourceMappingURL=ProcessTelemetryContext.js.map","/*\n * Application Insights JavaScript SDK - Core, 2.8.4\n * Copyright (c) Microsoft and contributors. All rights reserved.\n */\n\r\n\r\nimport { _throwInternal } from \"./DiagnosticLogger\";\r\nimport { dumpObj } from \"./EnvUtils\";\r\nimport { arrForEach } from \"./HelperFuncs\";\r\nexport function createUnloadHandlerContainer() {\r\n    var handlers = [];\r\n    function _addHandler(handler) {\r\n        if (handler) {\r\n            handlers.push(handler);\r\n        }\r\n    }\r\n    function _runHandlers(unloadCtx, unloadState) {\r\n        arrForEach(handlers, function (handler) {\r\n            try {\r\n                handler(unloadCtx, unloadState);\r\n            }\r\n            catch (e) {\r\n                _throwInternal(unloadCtx.diagLog(), 2 /* eLoggingSeverity.WARNING */, 73 /* _eInternalMessageId.PluginException */, \"Unexpected error calling unload handler - \" + dumpObj(e));\r\n            }\r\n        });\r\n        handlers = [];\r\n    }\r\n    return {\r\n        add: _addHandler,\r\n        run: _runHandlers\r\n    };\r\n}\r\n//# sourceMappingURL=UnloadHandlerContainer.js.map","/*\n * Application Insights JavaScript SDK - Core, 2.8.4\n * Copyright (c) Microsoft and contributors. All rights reserved.\n */\n\r\n\r\n\"use strict\";\r\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\r\nimport { createProcessTelemetryContext, createProcessTelemetryUnloadContext, createProcessTelemetryUpdateContext } from \"./ProcessTelemetryContext\";\r\nimport { arrForEach, isArray, isFunction, isNullOrUndefined, proxyFunctionAs, setValue } from \"./HelperFuncs\";\r\nimport { strExtensionConfig } from \"./Constants\";\r\nimport { createUnloadHandlerContainer } from \"./UnloadHandlerContainer\";\r\nimport { strDoTeardown, strIsInitialized, strSetNextPlugin } from \"./InternalConstants\";\r\nvar strGetPlugin = \"getPlugin\";\r\n/**\r\n * BaseTelemetryPlugin provides a basic implementation of the ITelemetryPlugin interface so that plugins\r\n * can avoid implementation the same set of boiler plate code as well as provide a base\r\n * implementation so that new default implementations can be added without breaking all plugins.\r\n */\r\nvar BaseTelemetryPlugin = /** @class */ (function () {\r\n    function BaseTelemetryPlugin() {\r\n        var _self = this; // Setting _self here as it's used outside of the dynamicProto as well\r\n        // NOTE!: DON'T set default values here, instead set them in the _initDefaults() function as it is also called during teardown()\r\n        var _isinitialized;\r\n        var _rootCtx; // Used as the root context, holding the current config and initialized core\r\n        var _nextPlugin; // Used for backward compatibility where plugins don't call the main pipeline\r\n        var _unloadHandlerContainer;\r\n        var _hooks;\r\n        _initDefaults();\r\n        dynamicProto(BaseTelemetryPlugin, _self, function (_self) {\r\n            _self.initialize = function (config, core, extensions, pluginChain) {\r\n                _setDefaults(config, core, pluginChain);\r\n                _isinitialized = true;\r\n            };\r\n            _self.teardown = function (unloadCtx, unloadState) {\r\n                // If this plugin has already been torn down (not operational) or is not initialized (core is not set)\r\n                // or the core being used for unload was not the same core used for initialization.\r\n                var core = _self.core;\r\n                if (!core || (unloadCtx && core !== unloadCtx.core())) {\r\n                    // Do Nothing as either the plugin is not initialized or was not initialized by the current core\r\n                    return;\r\n                }\r\n                var result;\r\n                var unloadDone = false;\r\n                var theUnloadCtx = unloadCtx || createProcessTelemetryUnloadContext(null, core, _nextPlugin && _nextPlugin[strGetPlugin] ? _nextPlugin[strGetPlugin]() : _nextPlugin);\r\n                var theUnloadState = unloadState || {\r\n                    reason: 0 /* TelemetryUnloadReason.ManualTeardown */,\r\n                    isAsync: false\r\n                };\r\n                function _unloadCallback() {\r\n                    if (!unloadDone) {\r\n                        unloadDone = true;\r\n                        _unloadHandlerContainer.run(theUnloadCtx, unloadState);\r\n                        // Remove all instrumentation hooks\r\n                        arrForEach(_hooks, function (fn) {\r\n                            fn.rm();\r\n                        });\r\n                        _hooks = [];\r\n                        if (result === true) {\r\n                            theUnloadCtx.processNext(theUnloadState);\r\n                        }\r\n                        _initDefaults();\r\n                    }\r\n                }\r\n                if (!_self[strDoTeardown] || _self[strDoTeardown](theUnloadCtx, theUnloadState, _unloadCallback) !== true) {\r\n                    _unloadCallback();\r\n                }\r\n                else {\r\n                    // Tell the caller that we will be calling processNext()\r\n                    result = true;\r\n                }\r\n                return result;\r\n            };\r\n            _self.update = function (updateCtx, updateState) {\r\n                // If this plugin has already been torn down (not operational) or is not initialized (core is not set)\r\n                // or the core being used for unload was not the same core used for initialization.\r\n                var core = _self.core;\r\n                if (!core || (updateCtx && core !== updateCtx.core())) {\r\n                    // Do Nothing\r\n                    return;\r\n                }\r\n                var result;\r\n                var updateDone = false;\r\n                var theUpdateCtx = updateCtx || createProcessTelemetryUpdateContext(null, core, _nextPlugin && _nextPlugin[strGetPlugin] ? _nextPlugin[strGetPlugin]() : _nextPlugin);\r\n                var theUpdateState = updateState || {\r\n                    reason: 0 /* TelemetryUpdateReason.Unknown */\r\n                };\r\n                function _updateCallback() {\r\n                    if (!updateDone) {\r\n                        updateDone = true;\r\n                        _setDefaults(theUpdateCtx.getCfg(), theUpdateCtx.core(), theUpdateCtx.getNext());\r\n                    }\r\n                }\r\n                if (!_self._doUpdate || _self._doUpdate(theUpdateCtx, theUpdateState, _updateCallback) !== true) {\r\n                    _updateCallback();\r\n                }\r\n                else {\r\n                    result = true;\r\n                }\r\n                return result;\r\n            };\r\n            _self._addHook = function (hooks) {\r\n                if (hooks) {\r\n                    if (isArray(hooks)) {\r\n                        _hooks = _hooks.concat(hooks);\r\n                    }\r\n                    else {\r\n                        _hooks.push(hooks);\r\n                    }\r\n                }\r\n            };\r\n            proxyFunctionAs(_self, \"_addUnloadCb\", function () { return _unloadHandlerContainer; }, \"add\");\r\n        });\r\n        // These are added after the dynamicProto so that are not moved to the prototype\r\n        _self.diagLog = function (itemCtx) {\r\n            return _getTelCtx(itemCtx).diagLog();\r\n        };\r\n        _self[strIsInitialized] = function () {\r\n            return _isinitialized;\r\n        };\r\n        _self.setInitialized = function (isInitialized) {\r\n            _isinitialized = isInitialized;\r\n        };\r\n        // _self.getNextPlugin = () => DO NOT IMPLEMENT\r\n        // Sub-classes of this base class *should* not be relying on this value and instead\r\n        // should use processNext() function. If you require access to the plugin use the\r\n        // IProcessTelemetryContext.getNext().getPlugin() while in the pipeline, Note getNext() may return null.\r\n        _self[strSetNextPlugin] = function (next) {\r\n            _nextPlugin = next;\r\n        };\r\n        _self.processNext = function (env, itemCtx) {\r\n            if (itemCtx) {\r\n                // Normal core execution sequence\r\n                itemCtx.processNext(env);\r\n            }\r\n            else if (_nextPlugin && isFunction(_nextPlugin.processTelemetry)) {\r\n                // Looks like backward compatibility or out of band processing. And as it looks\r\n                // like a ITelemetryPlugin or ITelemetryPluginChain, just call processTelemetry\r\n                _nextPlugin.processTelemetry(env, null);\r\n            }\r\n        };\r\n        _self._getTelCtx = _getTelCtx;\r\n        function _getTelCtx(currentCtx) {\r\n            if (currentCtx === void 0) { currentCtx = null; }\r\n            var itemCtx = currentCtx;\r\n            if (!itemCtx) {\r\n                var rootCtx = _rootCtx || createProcessTelemetryContext(null, {}, _self.core);\r\n                // tslint:disable-next-line: prefer-conditional-expression\r\n                if (_nextPlugin && _nextPlugin[strGetPlugin]) {\r\n                    // Looks like a chain object\r\n                    itemCtx = rootCtx.createNew(null, _nextPlugin[strGetPlugin]);\r\n                }\r\n                else {\r\n                    itemCtx = rootCtx.createNew(null, _nextPlugin);\r\n                }\r\n            }\r\n            return itemCtx;\r\n        }\r\n        function _setDefaults(config, core, pluginChain) {\r\n            if (config) {\r\n                // Make sure the extensionConfig exists\r\n                setValue(config, strExtensionConfig, [], null, isNullOrUndefined);\r\n            }\r\n            if (!pluginChain && core) {\r\n                // Get the first plugin from the core\r\n                pluginChain = core.getProcessTelContext().getNext();\r\n            }\r\n            var nextPlugin = _nextPlugin;\r\n            if (_nextPlugin && _nextPlugin[strGetPlugin]) {\r\n                // If it looks like a proxy/chain then get the plugin\r\n                nextPlugin = _nextPlugin[strGetPlugin]();\r\n            }\r\n            // Support legacy plugins where core was defined as a property\r\n            _self.core = core;\r\n            _rootCtx = createProcessTelemetryContext(pluginChain, config, core, nextPlugin);\r\n        }\r\n        function _initDefaults() {\r\n            _isinitialized = false;\r\n            _self.core = null;\r\n            _rootCtx = null;\r\n            _nextPlugin = null;\r\n            _hooks = [];\r\n            _unloadHandlerContainer = createUnloadHandlerContainer();\r\n        }\r\n    }\r\n// Removed Stub for BaseTelemetryPlugin.prototype.initialize.\r\n// Removed Stub for BaseTelemetryPlugin.prototype.teardown.\r\n// Removed Stub for BaseTelemetryPlugin.prototype.update.\r\n// Removed Stub for BaseTelemetryPlugin.prototype._addUnloadCb.\r\n// Removed Stub for BaseTelemetryPlugin.prototype._addHook.\r\n    return BaseTelemetryPlugin;\r\n}());\r\nexport { BaseTelemetryPlugin };\r\n//# sourceMappingURL=BaseTelemetryPlugin.js.map","/*\n * Application Insights JavaScript SDK - Core, 2.8.4\n * Copyright (c) Microsoft and contributors. All rights reserved.\n */\n\r\n\r\nexport var strIKey = \"iKey\";\r\nexport var strExtensionConfig = \"extensionConfig\";\r\n//# sourceMappingURL=Constants.js.map","/*\n * 1DS JS SDK Core, 3.2.3\n * Copyright (c) Microsoft and contributors. All rights reserved.\n * (Microsoft Internal Only)\n */\nvar _a;\r\n/**\r\n * Utils.ts\r\n * @author  Abhilash Panwar (abpanwar) Hector Hernandez (hectorh)\r\n * @copyright Microsoft 2018\r\n * File containing utility functions.\r\n */\r\nimport { objCreateFn, strShimObject } from \"@microsoft/applicationinsights-shims\";\r\nimport { getDocument, getNavigator, getWindow, getGlobalInst, objForEachKey, isUndefined, isNullOrUndefined, isNumber, isReactNative, isString, isBoolean, isArray, newGuid, isObject, perfNow, hasOwnProperty, addEventHandler, uaDisallowsSameSiteNone, strPrototype, objDefineAccessors, toISOString, strTrim, isFunction, objKeys, arrReduce, arrMap, arrIndexOf, arrForEach, strUndefined, strObject, areCookiesSupported, safeGetCookieMgr, generateW3CId, mwcRandom32, mwcRandomSeed, random32, randomValue, newId, isIE, dateNow, isError, isDate, isTypeof, strEndsWith, useXDomainRequest, isBeaconsSupported, addPageUnloadEventListener, } from \"@microsoft/applicationinsights-core-js\";\r\nexport var Version = '3.2.3';\r\nexport var FullVersionString = \"1DS-Web-JS-\" + Version;\r\n// Defining here so we don't need to take (import) the ApplicationInsights Common module\r\nvar strDisabledPropertyName = \"Microsoft_ApplicationInsights_BypassAjaxInstrumentation\";\r\nvar strWithCredentials = \"withCredentials\";\r\nvar strTimeout = \"timeout\";\r\n// If value is array just get the type for the first element\r\nvar _fieldTypeEventPropMap = (_a = {},\r\n    _a[0 /* FieldValueSanitizerType.NotSet */] = 0 /* eEventPropertyType.Unspecified */,\r\n    _a[2 /* FieldValueSanitizerType.Number */] = 6 /* eEventPropertyType.Double */,\r\n    _a[1 /* FieldValueSanitizerType.String */] = 1 /* eEventPropertyType.String */,\r\n    _a[3 /* FieldValueSanitizerType.Boolean */] = 7 /* eEventPropertyType.Bool */,\r\n    _a[4096 /* FieldValueSanitizerType.Array */ | 2 /* FieldValueSanitizerType.Number */] = 6 /* eEventPropertyType.Double */,\r\n    _a[4096 /* FieldValueSanitizerType.Array */ | 1 /* FieldValueSanitizerType.String */] = 1 /* eEventPropertyType.String */,\r\n    _a[4096 /* FieldValueSanitizerType.Array */ | 3 /* FieldValueSanitizerType.Boolean */] = 7 /* eEventPropertyType.Bool */,\r\n    _a);\r\n/**\r\n * @ignore\r\n */\r\n// let _uaDisallowsSameSiteNone = null;\r\nvar uInt8ArraySupported = null;\r\n// var _areCookiesAvailable: boolean | undefined;\r\n/**\r\n * Checks if document object is available\r\n */\r\nexport var isDocumentObjectAvailable = Boolean(getDocument());\r\n/**\r\n * Checks if window object is available\r\n */\r\nexport var isWindowObjectAvailable = Boolean(getWindow());\r\n/**\r\n * Checks if value is assigned to the given param.\r\n * @param value - The token from which the tenant id is to be extracted.\r\n * @returns True/false denoting if value is assigned to the param.\r\n */\r\nexport function isValueAssigned(value) {\r\n    /// <summary> takes a value and checks for undefined, null and empty string </summary>\r\n    /// <param type=\"any\"> value to be tested </param>\r\n    /// <returns> true if value is null undefined or emptyString </returns>\r\n    return !(value === \"\" || isNullOrUndefined(value));\r\n}\r\n/**\r\n * Gets the tenant id from the tenant token.\r\n * @param apiKey - The token from which the tenant id is to be extracted.\r\n * @returns The tenant id.\r\n */\r\nexport function getTenantId(apiKey) {\r\n    if (apiKey) {\r\n        var indexTenantId = apiKey.indexOf(\"-\");\r\n        if (indexTenantId > -1) {\r\n            return apiKey.substring(0, indexTenantId);\r\n        }\r\n    }\r\n    return \"\";\r\n}\r\n/**\r\n * Checks if Uint8Array are available in the current environment. Safari and Firefox along with\r\n * ReactNative are known to not support Uint8Array properly.\r\n * @returns True if available, false otherwise.\r\n */\r\nexport function isUint8ArrayAvailable() {\r\n    if (uInt8ArraySupported === null) {\r\n        uInt8ArraySupported = !isUndefined(Uint8Array) && !isSafariOrFirefox() && !isReactNative();\r\n    }\r\n    return uInt8ArraySupported;\r\n}\r\n/**\r\n * Checks if the value is a valid EventLatency.\r\n * @param value - The value that needs to be checked.\r\n * @returns True if the value is in AWTEventLatency, false otherwise.\r\n */\r\nexport function isLatency(value) {\r\n    if (value && isNumber(value) && value >= 1 /* EventLatencyValue.Normal */ && value <= 4 /* EventLatencyValue.Immediate */) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * Sanitizes the Property. It checks the that the property name and value are valid. It also\r\n * checks/populates the correct type and pii of the property value.\r\n * @param name - property name                          - The property name.\r\n * @param property - The property value or an IEventProperty containing value,\r\n * type ,pii and customer content.\r\n * @returns IEventProperty containing valid name, value, pii and type or null if invalid.\r\n */\r\nexport function sanitizeProperty(name, property, stringifyObjects) {\r\n    // Check that property is valid\r\n    if ((!property && !isValueAssigned(property)) || typeof name !== \"string\") {\r\n        return null;\r\n    }\r\n    // Perf optimization -- only need to get the type once not multiple times\r\n    var propType = typeof property;\r\n    // If the property isn't IEventProperty (and is either string, number, boolean or array), convert it into one.\r\n    if (propType === \"string\" || propType === \"number\" || propType === \"boolean\" || isArray(property)) {\r\n        property = { value: property };\r\n    }\r\n    else if (propType === \"object\" && !property.hasOwnProperty(\"value\")) {\r\n        property = { value: stringifyObjects ? JSON.stringify(property) : property };\r\n    }\r\n    else if (isNullOrUndefined(property.value)\r\n        || property.value === \"\" || (!isString(property.value)\r\n        && !isNumber(property.value) && !isBoolean(property.value)\r\n        && !isArray(property.value))) {\r\n        // Since property is IEventProperty, we need to validate its value\r\n        return null;\r\n    }\r\n    // We need to check that if the property value is an array, it is valid\r\n    if (isArray(property.value) &&\r\n        !isArrayValid(property.value)) {\r\n        return null;\r\n    }\r\n    // If either pii or cc is set convert value to string (since only string pii/cc is allowed).\r\n    // If the value is a complex type like an array that can't be converted to string we will drop\r\n    // the property.\r\n    if (!isNullOrUndefined(property.kind)) {\r\n        if (isArray(property.value) || !isValueKind(property.kind)) {\r\n            return null;\r\n        }\r\n        property.value = property.value.toString();\r\n    }\r\n    return property;\r\n}\r\nexport function getCommonSchemaMetaData(value, kind, type) {\r\n    var encodedTypeValue = -1;\r\n    if (!isUndefined(value)) {\r\n        if (kind > 0) {\r\n            if (kind === 32) {\r\n                // encode customer content. Value can only be string. bit 13-16 are for cc\r\n                encodedTypeValue = (1 << 13);\r\n            }\r\n            else if (kind <= 13) {\r\n                // encode PII. Value can only be string. bits 5-12 are for Pii\r\n                encodedTypeValue = (kind << 5);\r\n            }\r\n        }\r\n        // isDataType checks that the \"type\" is a number so we don't need to check for undefined\r\n        if (isDataType(type)) {\r\n            // Data Type is provided and valid, so use that\r\n            if (encodedTypeValue === -1) {\r\n                // Don't return -1\r\n                encodedTypeValue = 0;\r\n            }\r\n            encodedTypeValue |= type;\r\n        }\r\n        else {\r\n            var propType = _fieldTypeEventPropMap[getFieldValueType(value)] || -1;\r\n            if (encodedTypeValue !== -1 && propType !== -1) {\r\n                // pii exists so we must return correct type\r\n                encodedTypeValue |= propType;\r\n            }\r\n            else if (propType === 6 /* eEventPropertyType.Double */) {\r\n                encodedTypeValue = propType;\r\n            }\r\n        }\r\n    }\r\n    return encodedTypeValue;\r\n}\r\n/**\r\n * @deprecated - Use the core.getCookieMgr().disable()\r\n * Force the SDK not to store and read any data from cookies.\r\n * Overriding the applicationinsights-core version for tree-shaking\r\n */\r\nexport function disableCookies() {\r\n    safeGetCookieMgr(null).setEnabled(false);\r\n}\r\n/**\r\n * @deprecated - Use the oneDs.getCookieMgr().set()\r\n * Sets the value of a cookie.\r\n * @param name - Cookie name.\r\n * @param value - Cookie value.\r\n * @param days - Expiration days.\r\n */\r\nexport function setCookie(name, value, days) {\r\n    if (areCookiesSupported(null)) {\r\n        safeGetCookieMgr(null).set(name, value, days * 86400, null, \"/\");\r\n    }\r\n}\r\n/**\r\n * @deprecated - Use the oneDs.getCookieMgr().del()\r\n * Deletes a cookie, by setting its expiration to -1.\r\n * @param name - Cookie name to delete.\r\n */\r\nexport function deleteCookie(name) {\r\n    if (areCookiesSupported(null)) {\r\n        safeGetCookieMgr(null).del(name);\r\n    }\r\n}\r\n/**\r\n * @deprecated - Use the oneDs.getCookieMgr().get()\r\n * Gets the cookie value for the specified cookie.\r\n * if value is k1=v1&k2==v2 then will return 'v1' for key 'k1'\r\n * @param cookieName - Cookie name.\r\n */\r\nexport function getCookie(name) {\r\n    if (areCookiesSupported(null)) {\r\n        return getCookieValue(safeGetCookieMgr(null), name);\r\n    }\r\n    return \"\";\r\n}\r\n/**\r\n * Helper to get and decode the cookie value using decodeURIComponent, this is for historical\r\n * backward compatibility where the document.cookie value was decoded before parsing.\r\n * @param cookieMgr - The cookie manager to use\r\n * @param name - The name of the cookie to get\r\n * @param decode - A flag to indicate whether the cookie value should be decoded\r\n * @returns The decoded cookie value (if available) otherwise an empty string.\r\n */\r\nexport function getCookieValue(cookieMgr, name, decode) {\r\n    if (decode === void 0) { decode = true; }\r\n    var cookieValue;\r\n    if (cookieMgr) {\r\n        cookieValue = cookieMgr.get(name);\r\n        if (decode && cookieValue && decodeURIComponent) {\r\n            cookieValue = decodeURIComponent(cookieValue);\r\n        }\r\n    }\r\n    return cookieValue || \"\";\r\n}\r\n/**\r\n * Create a new guid.\r\n * @param style - The style of guid to generated, defaults to Digits\r\n * Digits (Default) : 32 digits separated by hyphens: 00000000-0000-0000-0000-000000000000\r\n * Braces - 32 digits separated by hyphens, enclosed in braces: {00000000-0000-0000-0000-000000000000}\r\n * Parentheses - 32 digits separated by hyphens, enclosed in parentheses: (00000000-0000-0000-0000-000000000000)\r\n * Numeric - 32 digits: 00000000000000000000000000000000\r\n * @returns The formatted guid.\r\n */\r\nexport function createGuid(style) {\r\n    if (style === void 0) { style = \"D\" /* GuidStyle.Digits */; }\r\n    var theGuid = newGuid();\r\n    if (style === \"B\" /* GuidStyle.Braces */) {\r\n        theGuid = \"{\" + theGuid + \"}\";\r\n    }\r\n    else if (style === \"P\" /* GuidStyle.Parentheses */) {\r\n        theGuid = \"(\" + theGuid + \")\";\r\n    }\r\n    else if (style === \"N\" /* GuidStyle.Numeric */) {\r\n        theGuid = theGuid.replace(/-/g, \"\");\r\n    }\r\n    return theGuid;\r\n}\r\n/**\r\n * Pass in the objects to merge as arguments.\r\n * @param obj1 - object to merge.  Set this argument to 'true' for a deep extend.\r\n * @param obj2 - object to merge.\r\n * @param obj3 - object to merge.\r\n * @param obj4 - object to merge.\r\n * @param obj5 - object to merge.\r\n * @returns The extended object.\r\n */\r\nexport function extend(obj, obj2, obj3, obj4, obj5) {\r\n    // Variables\r\n    var extended = {};\r\n    var deep = false;\r\n    var i = 0;\r\n    var length = arguments.length;\r\n    var objProto = Object[strPrototype];\r\n    var theArgs = arguments;\r\n    // Check if a deep merge\r\n    if (objProto.toString.call(theArgs[0]) === \"[object Boolean]\") {\r\n        deep = theArgs[0];\r\n        i++;\r\n    }\r\n    // Loop through each object and conduct a merge\r\n    for (; i < length; i++) {\r\n        var obj = theArgs[i];\r\n        objForEachKey(obj, function (prop, value) {\r\n            // If deep merge and property is an object, merge properties\r\n            if (deep && value && isObject(value)) {\r\n                if (isArray(value)) {\r\n                    extended[prop] = extended[prop] || [];\r\n                    arrForEach(value, function (arrayValue, arrayIndex) {\r\n                        if (arrayValue && isObject(arrayValue)) {\r\n                            extended[prop][arrayIndex] = extend(true, extended[prop][arrayIndex], arrayValue);\r\n                        }\r\n                        else {\r\n                            extended[prop][arrayIndex] = arrayValue;\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    extended[prop] = extend(true, extended[prop], value);\r\n                }\r\n            }\r\n            else {\r\n                extended[prop] = value;\r\n            }\r\n        });\r\n    }\r\n    return extended;\r\n}\r\nexport var getTime = perfNow;\r\nexport function isValueKind(value) {\r\n    // Always assume that it's a number (no type checking) for performance as this is used during the JSON serialization\r\n    if (value === 0 /* eValueKind.NotSet */ || ((value > 0 /* eValueKind.NotSet */ && value <= 13 /* eValueKind.Pii_IPV4AddressLegacy */) || value === 32 /* eValueKind.CustomerContent_GenericContent */)) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nfunction isDataType(value) {\r\n    // Remark: 0 returns false, but it doesn't affect encoding anyways\r\n    // Always assume that it's a number (no type checking) for performance as this is used during the JSON serialization\r\n    if (value >= 0 && value <= 9) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nfunction isSafariOrFirefox() {\r\n    var nav = getNavigator();\r\n    // If non-browser navigator will be undefined\r\n    if (!isUndefined(nav) && nav.userAgent) {\r\n        var ua = nav.userAgent.toLowerCase();\r\n        if ((ua.indexOf(\"safari\") >= 0 || ua.indexOf(\"firefox\") >= 0) && ua.indexOf(\"chrome\") < 0) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\nexport function isArrayValid(value) {\r\n    return value.length > 0;\r\n}\r\nexport function setProcessTelemetryTimings(event, identifier) {\r\n    var evt = event;\r\n    evt.timings = evt.timings || {};\r\n    evt.timings.processTelemetryStart = evt.timings.processTelemetryStart || {};\r\n    evt.timings.processTelemetryStart[identifier] = getTime();\r\n}\r\n/**\r\n * Returns a bitwise value for the FieldValueSanitizerType enum representing the decoded type of the passed value\r\n * @param value The value to determine the type\r\n */\r\nexport function getFieldValueType(value) {\r\n    var theType = 0 /* FieldValueSanitizerType.NotSet */;\r\n    if (value !== null && value !== undefined) {\r\n        var objType = typeof value;\r\n        if (objType === \"string\") {\r\n            theType = 1 /* FieldValueSanitizerType.String */;\r\n        }\r\n        else if (objType === \"number\") {\r\n            theType = 2 /* FieldValueSanitizerType.Number */;\r\n        }\r\n        else if (objType === \"boolean\") {\r\n            theType = 3 /* FieldValueSanitizerType.Boolean */;\r\n        }\r\n        else if (objType === strShimObject) {\r\n            theType = 4 /* FieldValueSanitizerType.Object */;\r\n            if (isArray(value)) {\r\n                theType = 4096 /* FieldValueSanitizerType.Array */;\r\n                if (value.length > 0) {\r\n                    // Empty arrays are not supported and are considered to be the same as null\r\n                    theType |= getFieldValueType(value[0]);\r\n                }\r\n            }\r\n            else if (hasOwnProperty(value, \"value\")) {\r\n                // Looks like an IEventProperty\r\n                theType = 8192 /* FieldValueSanitizerType.EventProperty */ | getFieldValueType(value.value);\r\n            }\r\n        }\r\n    }\r\n    return theType;\r\n}\r\nexport var Utils = {\r\n    Version: Version,\r\n    FullVersionString: FullVersionString,\r\n    strUndefined: strUndefined,\r\n    strObject: strObject,\r\n    Undefined: strUndefined,\r\n    arrForEach: arrForEach,\r\n    arrIndexOf: arrIndexOf,\r\n    arrMap: arrMap,\r\n    arrReduce: arrReduce,\r\n    objKeys: objKeys,\r\n    toISOString: toISOString,\r\n    isReactNative: isReactNative,\r\n    isString: isString,\r\n    isNumber: isNumber,\r\n    isBoolean: isBoolean,\r\n    isFunction: isFunction,\r\n    isArray: isArray,\r\n    isObject: isObject,\r\n    strTrim: strTrim,\r\n    isDocumentObjectAvailable: isDocumentObjectAvailable,\r\n    isWindowObjectAvailable: isWindowObjectAvailable,\r\n    isValueAssigned: isValueAssigned,\r\n    getTenantId: getTenantId,\r\n    isBeaconsSupported: isBeaconsSupported,\r\n    isUint8ArrayAvailable: isUint8ArrayAvailable,\r\n    isLatency: isLatency,\r\n    sanitizeProperty: sanitizeProperty,\r\n    getISOString: toISOString,\r\n    useXDomainRequest: useXDomainRequest,\r\n    getCommonSchemaMetaData: getCommonSchemaMetaData,\r\n    cookieAvailable: areCookiesSupported,\r\n    disallowsSameSiteNone: uaDisallowsSameSiteNone,\r\n    setCookie: setCookie,\r\n    deleteCookie: deleteCookie,\r\n    getCookie: getCookie,\r\n    createGuid: createGuid,\r\n    extend: extend,\r\n    getTime: getTime,\r\n    isValueKind: isValueKind,\r\n    isArrayValid: isArrayValid,\r\n    objDefineAccessors: objDefineAccessors,\r\n    addPageUnloadEventListener: addPageUnloadEventListener,\r\n    setProcessTelemetryTimings: setProcessTelemetryTimings,\r\n    addEventHandler: addEventHandler,\r\n    getFieldValueType: getFieldValueType,\r\n    strEndsWith: strEndsWith,\r\n    objForEachKey: objForEachKey\r\n};\r\n/**\r\n * Provides a collection of utility functions, included for backward compatibility with previous releases.\r\n * @deprecated Marking this instance as deprecated in favor of direct usage of the helper functions\r\n * as direct usage provides better tree-shaking and minification by avoiding the inclusion of the unused items\r\n * in your resulting code.\r\n * Overriding the applicationinsights-core version for tree-shaking\r\n */\r\nexport var CoreUtils = {\r\n    _canUseCookies: undefined,\r\n    isTypeof: isTypeof,\r\n    isUndefined: isUndefined,\r\n    isNullOrUndefined: isNullOrUndefined,\r\n    hasOwnProperty: hasOwnProperty,\r\n    isFunction: isFunction,\r\n    isObject: isObject,\r\n    isDate: isDate,\r\n    isArray: isArray,\r\n    isError: isError,\r\n    isString: isString,\r\n    isNumber: isNumber,\r\n    isBoolean: isBoolean,\r\n    toISOString: toISOString,\r\n    arrForEach: arrForEach,\r\n    arrIndexOf: arrIndexOf,\r\n    arrMap: arrMap,\r\n    arrReduce: arrReduce,\r\n    strTrim: strTrim,\r\n    objCreate: objCreateFn,\r\n    objKeys: objKeys,\r\n    objDefineAccessors: objDefineAccessors,\r\n    addEventHandler: addEventHandler,\r\n    dateNow: dateNow,\r\n    isIE: isIE,\r\n    disableCookies: disableCookies,\r\n    newGuid: newGuid,\r\n    perfNow: perfNow,\r\n    newId: newId,\r\n    randomValue: randomValue,\r\n    random32: random32,\r\n    mwcRandomSeed: mwcRandomSeed,\r\n    mwcRandom32: mwcRandom32,\r\n    generateW3CId: generateW3CId\r\n};\r\n/**\r\n * Helper to identify whether we are running in a chromium based browser environment\r\n */\r\nexport function isChromium() {\r\n    return !!getGlobalInst(\"chrome\");\r\n}\r\n/**\r\n * Create and open an XMLHttpRequest object\r\n * @param method - The request method\r\n * @param urlString - The url\r\n * @param withCredentials - Option flag indicating that credentials should be sent\r\n * @param disabled - Optional flag indicating that the XHR object should be marked as disabled and not tracked (default is false)\r\n * @param isSync - Optional flag indicating if the instance should be a synchronous request (defaults to false)\r\n * @param timeout - Optional value identifying the timeout value that should be assigned to the XHR request\r\n * @returns A new opened XHR request\r\n */\r\nexport function openXhr(method, urlString, withCredentials, disabled, isSync, timeout) {\r\n    if (disabled === void 0) { disabled = false; }\r\n    if (isSync === void 0) { isSync = false; }\r\n    function _wrapSetXhrProp(xhr, prop, value) {\r\n        try {\r\n            xhr[prop] = value;\r\n        }\r\n        catch (e) {\r\n            // - Wrapping as depending on the environment setting the property may fail (non-terminally)\r\n        }\r\n    }\r\n    var xhr = new XMLHttpRequest();\r\n    if (disabled) {\r\n        // Tag the instance so it's not tracked (trackDependency)\r\n        // If the environment has locked down the XMLHttpRequest (preventExtensions and/or freeze), this would\r\n        // cause the request to fail and we no telemetry would be sent\r\n        _wrapSetXhrProp(xhr, strDisabledPropertyName, disabled);\r\n    }\r\n    if (withCredentials) {\r\n        // Some libraries require that the withCredentials flag is set \"before\" open and\r\n        // - Wrapping as IE 10 has started throwing when setting before open\r\n        _wrapSetXhrProp(xhr, strWithCredentials, withCredentials);\r\n    }\r\n    xhr.open(method, urlString, !isSync);\r\n    if (withCredentials) {\r\n        // withCredentials should be set AFTER open (https://xhr.spec.whatwg.org/#the-withcredentials-attribute)\r\n        // And older firefox instances from 11+ will throw for sync events (current versions don't) which happens during unload processing\r\n        _wrapSetXhrProp(xhr, strWithCredentials, withCredentials);\r\n    }\r\n    // Only set the timeout for asynchronous requests as\r\n    // \"Timeout shouldn't be used for synchronous XMLHttpRequests requests used in a document environment or it will throw an InvalidAccessError exception.\"\"\r\n    // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/timeout\r\n    if (!isSync && timeout) {\r\n        _wrapSetXhrProp(xhr, strTimeout, timeout);\r\n    }\r\n    return xhr;\r\n}\r\n//# sourceMappingURL=Utils.js.map","/*\n * Application Insights JavaScript SDK - Core, 2.8.4\n * Copyright (c) Microsoft and contributors. All rights reserved.\n */\n\r\n\r\n\"use strict\";\r\nimport { objCreateFn, strShimUndefined } from \"@microsoft/applicationinsights-shims\";\r\nimport { _gblCookieMgr } from \"./CookieMgr\";\r\nimport { getPerformance, isIE } from \"./EnvUtils\";\r\nimport { arrForEach, arrIndexOf, arrMap, arrReduce, dateNow, hasOwnProperty, isArray, isBoolean, isDate, isError, isFunction, isNullOrUndefined, isNumber, isObject, isString, isTypeof, isUndefined, objDefineAccessors, objKeys, strTrim, toISOString } from \"./HelperFuncs\";\r\nimport { addEventHandler, attachEvent, detachEvent } from \"./EventHelpers\";\r\nimport { randomValue, random32, mwcRandomSeed, mwcRandom32, newId } from \"./RandomHelper\";\r\nimport { strEmpty } from \"./InternalConstants\";\r\nvar _cookieMgrs = null;\r\nvar _canUseCookies; // legacy supported config\r\n// Added to help with minfication\r\nexport var Undefined = strShimUndefined;\r\nexport function newGuid() {\r\n    function randomHexDigit() {\r\n        return randomValue(15); // Get a random value from 0..15\r\n    }\r\n    return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(GuidRegex, function (c) {\r\n        var r = (randomHexDigit() | 0), v = (c === \"x\" ? r : r & 0x3 | 0x8);\r\n        return v.toString(16);\r\n    });\r\n}\r\n/**\r\n * Return the current value of the Performance Api now() function (if available) and fallback to dateNow() if it is unavailable (IE9 or less)\r\n * https://caniuse.com/#search=performance.now\r\n */\r\nexport function perfNow() {\r\n    var perf = getPerformance();\r\n    if (perf && perf.now) {\r\n        return perf.now();\r\n    }\r\n    return dateNow();\r\n}\r\n/**\r\n * The strEndsWith() method determines whether a string ends with the characters of a specified string, returning true or false as appropriate.\r\n * @param value - The value to check whether it ends with the search value.\r\n * @param search - The characters to be searched for at the end of the value.\r\n * @returns true if the given search value is found at the end of the string, otherwise false.\r\n */\r\nexport function strEndsWith(value, search) {\r\n    if (value && search) {\r\n        var len = value.length;\r\n        var start = len - search.length;\r\n        return value.substring(start >= 0 ? start : 0, len) === search;\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * generate W3C trace id\r\n */\r\nexport function generateW3CId() {\r\n    var hexValues = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\"];\r\n    // rfc4122 version 4 UUID without dashes and with lowercase letters\r\n    var oct = strEmpty, tmp;\r\n    for (var a = 0; a < 4; a++) {\r\n        tmp = random32();\r\n        oct +=\r\n            hexValues[tmp & 0xF] +\r\n                hexValues[tmp >> 4 & 0xF] +\r\n                hexValues[tmp >> 8 & 0xF] +\r\n                hexValues[tmp >> 12 & 0xF] +\r\n                hexValues[tmp >> 16 & 0xF] +\r\n                hexValues[tmp >> 20 & 0xF] +\r\n                hexValues[tmp >> 24 & 0xF] +\r\n                hexValues[tmp >> 28 & 0xF];\r\n    }\r\n    // \"Set the two most significant bits (bits 6 and 7) of the clock_seq_hi_and_reserved to zero and one, respectively\"\r\n    var clockSequenceHi = hexValues[8 + (random32() & 0x03) | 0];\r\n    return oct.substr(0, 8) + oct.substr(9, 4) + \"4\" + oct.substr(13, 3) + clockSequenceHi + oct.substr(16, 3) + oct.substr(19, 12);\r\n}\r\n/**\r\n * Provides a collection of utility functions, included for backward compatibility with previous releases.\r\n * @deprecated Marking this instance as deprecated in favor of direct usage of the helper functions\r\n * as direct usage provides better tree-shaking and minification by avoiding the inclusion of the unused items\r\n * in your resulting code.\r\n */\r\nexport var CoreUtils = {\r\n    _canUseCookies: undefined,\r\n    isTypeof: isTypeof,\r\n    isUndefined: isUndefined,\r\n    isNullOrUndefined: isNullOrUndefined,\r\n    hasOwnProperty: hasOwnProperty,\r\n    isFunction: isFunction,\r\n    isObject: isObject,\r\n    isDate: isDate,\r\n    isArray: isArray,\r\n    isError: isError,\r\n    isString: isString,\r\n    isNumber: isNumber,\r\n    isBoolean: isBoolean,\r\n    toISOString: toISOString,\r\n    arrForEach: arrForEach,\r\n    arrIndexOf: arrIndexOf,\r\n    arrMap: arrMap,\r\n    arrReduce: arrReduce,\r\n    strTrim: strTrim,\r\n    objCreate: objCreateFn,\r\n    objKeys: objKeys,\r\n    objDefineAccessors: objDefineAccessors,\r\n    addEventHandler: addEventHandler,\r\n    dateNow: dateNow,\r\n    isIE: isIE,\r\n    disableCookies: disableCookies,\r\n    newGuid: newGuid,\r\n    perfNow: perfNow,\r\n    newId: newId,\r\n    randomValue: randomValue,\r\n    random32: random32,\r\n    mwcRandomSeed: mwcRandomSeed,\r\n    mwcRandom32: mwcRandom32,\r\n    generateW3CId: generateW3CId\r\n};\r\nvar GuidRegex = /[xy]/g;\r\nexport var EventHelper = {\r\n    Attach: attachEvent,\r\n    AttachEvent: attachEvent,\r\n    Detach: detachEvent,\r\n    DetachEvent: detachEvent\r\n};\r\n/**\r\n * Helper to support backward compatibility for users that use the legacy cookie handling functions and the use the internal\r\n * CoreUtils._canUseCookies global flag to enable/disable cookies usage.\r\n * Note: This has the following deliberate side-effects\r\n * - Creates the global (legacy) cookie manager if it does not already exist\r\n * - Attempts to add \"listeners\" to the CoreUtils._canUseCookies property to support the legacy usage\r\n * @param config\r\n * @param logger\r\n * @returns\r\n */\r\nexport function _legacyCookieMgr(config, logger) {\r\n    var cookieMgr = _gblCookieMgr(config, logger);\r\n    var legacyCanUseCookies = CoreUtils._canUseCookies;\r\n    if (_cookieMgrs === null) {\r\n        _cookieMgrs = [];\r\n        _canUseCookies = legacyCanUseCookies;\r\n        // Dynamically create get/set property accessors for backward compatibility for enabling / disabling cookies\r\n        // this WILL NOT work for ES3 browsers (< IE8)\r\n        objDefineAccessors(CoreUtils, \"_canUseCookies\", function () {\r\n            return _canUseCookies;\r\n        }, function (value) {\r\n            _canUseCookies = value;\r\n            arrForEach(_cookieMgrs, function (mgr) {\r\n                mgr.setEnabled(value);\r\n            });\r\n        });\r\n    }\r\n    if (arrIndexOf(_cookieMgrs, cookieMgr) === -1) {\r\n        _cookieMgrs.push(cookieMgr);\r\n    }\r\n    if (isBoolean(legacyCanUseCookies)) {\r\n        cookieMgr.setEnabled(legacyCanUseCookies);\r\n    }\r\n    if (isBoolean(_canUseCookies)) {\r\n        cookieMgr.setEnabled(_canUseCookies);\r\n    }\r\n    return cookieMgr;\r\n}\r\n/**\r\n * @deprecated - Use the core.getCookieMgr().disable()\r\n * Force the SDK not to store and read any data from cookies.\r\n */\r\nexport function disableCookies() {\r\n    _legacyCookieMgr().setEnabled(false);\r\n}\r\n/**\r\n * @deprecated - Use the core.getCookieMgr().isEnabled()\r\n * Helper method to tell if document.cookie object is available and whether it can be used.\r\n */\r\nexport function canUseCookies(logger) {\r\n    return _legacyCookieMgr(null, logger).isEnabled();\r\n}\r\n/**\r\n * @deprecated - Use the core.getCookieMgr().get()\r\n * helper method to access userId and sessionId cookie\r\n */\r\nexport function getCookie(logger, name) {\r\n    return _legacyCookieMgr(null, logger).get(name);\r\n}\r\n/**\r\n * @deprecated - Use the core.getCookieMgr().set()\r\n * helper method to set userId and sessionId cookie\r\n */\r\nexport function setCookie(logger, name, value, domain) {\r\n    _legacyCookieMgr(null, logger).set(name, value, null, domain);\r\n}\r\n/**\r\n * @deprecated - Use the core.getCookieMgr().del()\r\n * Deletes a cookie by setting it's expiration time in the past.\r\n * @param name - The name of the cookie to delete.\r\n */\r\nexport function deleteCookie(logger, name) {\r\n    return _legacyCookieMgr(null, logger).del(name);\r\n}\r\n//# sourceMappingURL=CoreUtils.js.map","/*\n * 1DS JS SDK POST plugin, 3.2.3\n * Copyright (c) Microsoft and contributors. All rights reserved.\n * (Microsoft Internal Only)\n */\n/**\r\n * Real Time profile (default profile). RealTime Latency events are sent every 1 sec and\r\n * Normal Latency events are sent every 2 sec.\r\n */\r\nexport var RT_PROFILE = \"REAL_TIME\";\r\n/**\r\n * Near Real Time profile. RealTime Latency events are sent every 3 sec and\r\n * Normal Latency events are sent every 6 sec.\r\n */\r\nexport var NRT_PROFILE = \"NEAR_REAL_TIME\";\r\n/**\r\n * Best Effort. RealTime Latency events are sent every 9 sec and\r\n * Normal Latency events are sent every 18 sec.\r\n */\r\nexport var BE_PROFILE = \"BEST_EFFORT\";\r\n//# sourceMappingURL=DataModels.js.map","/*\n * 1DS JS SDK POST plugin, 3.2.3\n * Copyright (c) Microsoft and contributors. All rights reserved.\n * (Microsoft Internal Only)\n */\nexport var Method = \"POST\";\r\nexport var DisabledPropertyName = \"Microsoft_ApplicationInsights_BypassAjaxInstrumentation\";\r\nexport var strDropped = \"drop\";\r\nexport var strSending = \"send\";\r\nexport var strRequeue = \"requeue\";\r\nexport var strResponseFail = \"rspFail\";\r\nexport var strOther = \"oth\";\r\nexport var defaultCacheControl = \"no-cache, no-store\";\r\nexport var defaultContentType = \"application/x-json-stream\";\r\nexport var strCacheControl = \"cache-control\";\r\nexport var strContentTypeHeader = \"content-type\";\r\nexport var strKillTokensHeader = \"kill-tokens\";\r\nexport var strKillDurationHeader = \"kill-duration\";\r\nexport var strKillDurationSecondsHeader = \"kill-duration-seconds\";\r\nexport var strTimeDeltaHeader = \"time-delta-millis\";\r\nexport var strClientVersion = \"client-version\";\r\nexport var strClientId = \"client-id\";\r\nexport var strTimeDeltaToApply = \"time-delta-to-apply-millis\";\r\nexport var strUploadTime = \"upload-time\";\r\nexport var strApiKey = \"apikey\";\r\nexport var strMsaDeviceTicket = \"AuthMsaDeviceTicket\";\r\nexport var strAuthXToken = \"AuthXToken\";\r\nexport var strSdkVersion = \"sdk-version\";\r\nexport var strNoResponseBody = \"NoResponseBody\";\r\nexport var strMsfpc = \"msfpc\";\r\n//# sourceMappingURL=Constants.js.map","/*\n * 1DS JS SDK POST plugin, 3.2.3\n * Copyright (c) Microsoft and contributors. All rights reserved.\n * (Microsoft Internal Only)\n */\nimport { isNullOrUndefined, isValueAssigned } from \"@microsoft/1ds-core-js\";\r\nimport { strMsfpc } from \"./Constants\";\r\nfunction _getEventMsfpc(theEvent) {\r\n    var intWeb = ((theEvent.ext || {})[\"intweb\"]);\r\n    if (intWeb && isValueAssigned(intWeb[strMsfpc])) {\r\n        return intWeb[strMsfpc];\r\n    }\r\n    return null;\r\n}\r\nfunction _getMsfpc(theEvents) {\r\n    var msfpc = null;\r\n    for (var lp = 0; msfpc === null && lp < theEvents.length; lp++) {\r\n        msfpc = _getEventMsfpc(theEvents[lp]);\r\n    }\r\n    return msfpc;\r\n}\r\n/**\r\n* This class defines a \"batch\" events related to a specific iKey, it is used by the PostChannel and HttpManager\r\n* to collect and transfer ownership of events without duplicating them in-memory. This reduces the previous\r\n* array duplication and shared ownership issues that occurred due to race conditions caused by the async nature\r\n* of sending requests.\r\n*/\r\nvar EventBatch = /** @class */ (function () {\r\n    /**\r\n     * Private constructor so that caller is forced to use the static create method.\r\n     * @param iKey - The iKey to associate with the events (not validated)\r\n     * @param addEvents - The optional collection of events to assign to this batch - defaults to an empty array.\r\n     */\r\n    function EventBatch(iKey, addEvents) {\r\n        var events = addEvents ? [].concat(addEvents) : [];\r\n        var _self = this;\r\n        var _msfpc = _getMsfpc(events);\r\n        _self.iKey = function () {\r\n            return iKey;\r\n        };\r\n        _self.Msfpc = function () {\r\n            // return the cached value unless it's undefined -- used to avoid cpu\r\n            return _msfpc || \"\";\r\n        };\r\n        _self.count = function () {\r\n            return events.length;\r\n        };\r\n        _self.events = function () {\r\n            return events;\r\n        };\r\n        _self.addEvent = function (theEvent) {\r\n            if (theEvent) {\r\n                events.push(theEvent);\r\n                if (!_msfpc) {\r\n                    // Not found so try and find one\r\n                    _msfpc = _getEventMsfpc(theEvent);\r\n                }\r\n                return true;\r\n            }\r\n            return false;\r\n        };\r\n        _self.split = function (fromEvent, numEvents) {\r\n            // Create a new batch with the same iKey\r\n            var theEvents;\r\n            if (fromEvent < events.length) {\r\n                var cnt = events.length - fromEvent;\r\n                if (!isNullOrUndefined(numEvents)) {\r\n                    cnt = numEvents < cnt ? numEvents : cnt;\r\n                }\r\n                theEvents = events.splice(fromEvent, cnt);\r\n                // reset the fetched msfpc value\r\n                _msfpc = _getMsfpc(events);\r\n            }\r\n            return new EventBatch(iKey, theEvents);\r\n        };\r\n    }\r\n    /**\r\n     * Creates a new Event Batch object\r\n     * @param iKey The iKey associated with this batch of events\r\n     */\r\n    EventBatch.create = function (iKey, theEvents) {\r\n        return new EventBatch(iKey, theEvents);\r\n    };\r\n    return EventBatch;\r\n}());\r\nexport { EventBatch };\r\n//# sourceMappingURL=EventBatch.js.map","/*\n * 1DS JS SDK POST plugin, 3.2.3\n * Copyright (c) Microsoft and contributors. All rights reserved.\n * (Microsoft Internal Only)\n */\n/**\r\n* Serializer.ts\r\n* @author Abhilash Panwar (abpanwar); Hector Hernandez (hectorh); Nev Wylie (newylie)\r\n* @copyright Microsoft 2018-2020\r\n*/\r\nimport { getTenantId, getCommonSchemaMetaData, isArray, sanitizeProperty, doPerf, isValueAssigned, strStartsWith, objForEachKey, arrIndexOf, } from \"@microsoft/1ds-core-js\";\r\nimport { EventBatch } from \"./EventBatch\";\r\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\r\n/**\r\n * Note: This is an optimization for V8-based browsers. When V8 concatenates a string,\r\n * the strings are only joined logically using a \"cons string\" or \"constructed/concatenated\r\n * string\". These containers keep references to one another and can result in very large\r\n * memory usage. For example, if a 2MB string is constructed by concatenating 4 bytes\r\n * together at a time, the memory usage will be ~44MB; so ~22x increase. The strings are\r\n * only joined together when an operation requiring their joining takes place, such as\r\n * substr(). This function is called when adding data to this buffer to ensure these\r\n * types of strings are periodically joined to reduce the memory footprint.\r\n * Setting to every 20 events as the JSON.stringify() may have joined many strings\r\n * and calling this too much causes a minor delay while processing.\r\n */\r\nvar _MAX_STRING_JOINS = 20;\r\nvar RequestSizeLimitBytes = 3984588; // approx 3.8 Mb\r\nvar BeaconRequestSizeLimitBytes = 65000; // approx 64kb (the current Edge, Firefox and Chrome max limit)\r\nvar MaxRecordSize = 2000000; // approx 2 Mb\r\nvar MaxBeaconRecordSize = Math.min(MaxRecordSize, BeaconRequestSizeLimitBytes);\r\nvar metadata = \"metadata\";\r\nvar f = \"f\";\r\nvar rCheckDot = /\\./;\r\n/**\r\n* Class to handle serialization of event and request.\r\n* Currently uses Bond for serialization. Please note that this may be subject to change.\r\n*/\r\nvar Serializer = /** @class */ (function () {\r\n    function Serializer(perfManager, valueSanitizer, stringifyObjects, enableCompoundKey) {\r\n        var strData = \"data\";\r\n        var strBaseData = \"baseData\";\r\n        var strExt = \"ext\";\r\n        var _checkForCompoundkey = !!enableCompoundKey;\r\n        var _processSubMetaData = true;\r\n        var _theSanitizer = valueSanitizer;\r\n        var _isReservedCache = {};\r\n        dynamicProto(Serializer, this, function (_self) {\r\n            _self.createPayload = function (retryCnt, isTeardown, isSync, useSendBeacon, sendReason, sendType) {\r\n                return {\r\n                    apiKeys: [],\r\n                    payloadBlob: \"\",\r\n                    overflow: null,\r\n                    sizeExceed: [],\r\n                    failedEvts: [],\r\n                    batches: [],\r\n                    numEvents: 0,\r\n                    retryCnt: retryCnt,\r\n                    isTeardown: isTeardown,\r\n                    isSync: isSync,\r\n                    isBeacon: useSendBeacon,\r\n                    sendType: sendType,\r\n                    sendReason: sendReason\r\n                };\r\n            };\r\n            _self.appendPayload = function (payload, theBatch, maxEventsPerBatch) {\r\n                var canAddEvents = payload && theBatch && !payload.overflow;\r\n                if (canAddEvents) {\r\n                    doPerf(perfManager, function () { return \"Serializer:appendPayload\"; }, function () {\r\n                        var theEvents = theBatch.events();\r\n                        var payloadBlob = payload.payloadBlob;\r\n                        var payloadEvents = payload.numEvents;\r\n                        var eventsAdded = false;\r\n                        var sizeExceeded = [];\r\n                        var failedEvts = [];\r\n                        var isBeaconPayload = payload.isBeacon;\r\n                        var requestMaxSize = isBeaconPayload ? BeaconRequestSizeLimitBytes : RequestSizeLimitBytes;\r\n                        var recordMaxSize = isBeaconPayload ? MaxBeaconRecordSize : MaxRecordSize;\r\n                        var lp = 0;\r\n                        var joinCount = 0;\r\n                        while (lp < theEvents.length) {\r\n                            var theEvent = theEvents[lp];\r\n                            if (theEvent) {\r\n                                if (payloadEvents >= maxEventsPerBatch) {\r\n                                    // Maximum events per payload reached, so don't add any more\r\n                                    payload.overflow = theBatch.split(lp);\r\n                                    break;\r\n                                }\r\n                                var eventBlob = _self.getEventBlob(theEvent);\r\n                                if (eventBlob && eventBlob.length <= recordMaxSize) {\r\n                                    // This event will fit into the payload\r\n                                    var blobLength = eventBlob.length;\r\n                                    var currentSize = payloadBlob.length;\r\n                                    if (currentSize + blobLength > requestMaxSize) {\r\n                                        // Request or batch size exceeded, so don't add any more to the payload\r\n                                        payload.overflow = theBatch.split(lp);\r\n                                        break;\r\n                                    }\r\n                                    if (payloadBlob) {\r\n                                        payloadBlob += \"\\n\";\r\n                                    }\r\n                                    payloadBlob += eventBlob;\r\n                                    joinCount++;\r\n                                    // v8 memory optimization only\r\n                                    if (joinCount > _MAX_STRING_JOINS) {\r\n                                        // this substr() should cause the constructed string to join\r\n                                        payloadBlob.substr(0, 1);\r\n                                        joinCount = 0;\r\n                                    }\r\n                                    eventsAdded = true;\r\n                                    payloadEvents++;\r\n                                }\r\n                                else {\r\n                                    if (eventBlob) {\r\n                                        // Single event size exceeded so remove from the batch\r\n                                        sizeExceeded.push(theEvent);\r\n                                    }\r\n                                    else {\r\n                                        failedEvts.push(theEvent);\r\n                                    }\r\n                                    // We also need to remove this event from the existing array, otherwise a notification will be sent\r\n                                    // indicating that it was successfully sent\r\n                                    theEvents.splice(lp, 1);\r\n                                    lp--;\r\n                                }\r\n                            }\r\n                            lp++;\r\n                        }\r\n                        if (sizeExceeded && sizeExceeded.length > 0) {\r\n                            payload.sizeExceed.push(EventBatch.create(theBatch.iKey(), sizeExceeded));\r\n                            // Remove the exceeded events from the batch\r\n                        }\r\n                        if (failedEvts && failedEvts.length > 0) {\r\n                            payload.failedEvts.push(EventBatch.create(theBatch.iKey(), failedEvts));\r\n                            // Remove the failed events from the batch\r\n                        }\r\n                        if (eventsAdded) {\r\n                            payload.batches.push(theBatch);\r\n                            payload.payloadBlob = payloadBlob;\r\n                            payload.numEvents = payloadEvents;\r\n                            var apiKey = theBatch.iKey();\r\n                            if (arrIndexOf(payload.apiKeys, apiKey) === -1) {\r\n                                payload.apiKeys.push(apiKey);\r\n                            }\r\n                        }\r\n                    }, function () { return ({ payload: payload, theBatch: { iKey: theBatch.iKey(), evts: theBatch.events() }, max: maxEventsPerBatch }); });\r\n                }\r\n                return canAddEvents;\r\n            };\r\n            _self.getEventBlob = function (eventData) {\r\n                try {\r\n                    return doPerf(perfManager, function () { return \"Serializer.getEventBlob\"; }, function () {\r\n                        var serializedEvent = {};\r\n                        // Adding as dynamic keys for v8 performance\r\n                        serializedEvent.name = eventData.name;\r\n                        serializedEvent.time = eventData.time;\r\n                        serializedEvent.ver = eventData.ver;\r\n                        serializedEvent.iKey = \"o:\" + getTenantId(eventData.iKey);\r\n                        // Assigning local var so usage in part b/c don't throw if there is no ext\r\n                        var serializedExt = {};\r\n                        // Part A\r\n                        var eventExt = eventData[strExt];\r\n                        if (eventExt) {\r\n                            // Only assign ext if the event had one (There are tests covering this use case)\r\n                            serializedEvent[strExt] = serializedExt;\r\n                            objForEachKey(eventExt, function (key, value) {\r\n                                var data = serializedExt[key] = {};\r\n                                // Don't include a metadata callback as we don't currently set metadata Part A fields\r\n                                _processPathKeys(value, data, \"ext.\" + key, true, null, null, true);\r\n                            });\r\n                        }\r\n                        var serializedData = serializedEvent[strData] = {};\r\n                        serializedData.baseType = eventData.baseType;\r\n                        var serializedBaseData = serializedData[strBaseData] = {};\r\n                        // Part B\r\n                        _processPathKeys(eventData.baseData, serializedBaseData, strBaseData, false, [strBaseData], function (pathKeys, name, value) {\r\n                            _addJSONPropertyMetaData(serializedExt, pathKeys, name, value);\r\n                        }, _processSubMetaData);\r\n                        // Part C\r\n                        _processPathKeys(eventData.data, serializedData, strData, false, [], function (pathKeys, name, value) {\r\n                            _addJSONPropertyMetaData(serializedExt, pathKeys, name, value);\r\n                        }, _processSubMetaData);\r\n                        return JSON.stringify(serializedEvent);\r\n                    }, function () { return ({ item: eventData }); });\r\n                }\r\n                catch (e) {\r\n                    return null;\r\n                }\r\n            };\r\n            function _isReservedField(path, name) {\r\n                var result = _isReservedCache[path];\r\n                if (result === undefined) {\r\n                    if (path.length >= 7) {\r\n                        // Do not allow the changing of fields located in the ext.metadata or ext.web extension\r\n                        result = strStartsWith(path, \"ext.metadata\") || strStartsWith(path, \"ext.web\");\r\n                    }\r\n                    _isReservedCache[path] = result;\r\n                }\r\n                return result;\r\n            }\r\n            function _processPathKeys(srcObj, target, thePath, checkReserved, metadataPathKeys, metadataCallback, processSubKeys) {\r\n                objForEachKey(srcObj, function (key, srcValue) {\r\n                    var prop = null;\r\n                    if (srcValue || isValueAssigned(srcValue)) {\r\n                        var path = thePath;\r\n                        var name_1 = key;\r\n                        var theMetaPathKeys = metadataPathKeys;\r\n                        var destObj = target;\r\n                        // Handle keys with embedded '.', like \"TestObject.testProperty\"\r\n                        if (_checkForCompoundkey && !checkReserved && rCheckDot.test(key)) {\r\n                            var subKeys = key.split(\".\");\r\n                            var keyLen = subKeys.length;\r\n                            if (keyLen > 1) {\r\n                                if (theMetaPathKeys) {\r\n                                    // Create a copy of the meta path keys so we can add the extra ones\r\n                                    theMetaPathKeys = theMetaPathKeys.slice();\r\n                                }\r\n                                for (var lp = 0; lp < keyLen - 1; lp++) {\r\n                                    var subKey = subKeys[lp];\r\n                                    // Add/reuse the sub key object\r\n                                    destObj = destObj[subKey] = destObj[subKey] || {};\r\n                                    path += \".\" + subKey;\r\n                                    if (theMetaPathKeys) {\r\n                                        theMetaPathKeys.push(subKey);\r\n                                    }\r\n                                }\r\n                                name_1 = subKeys[keyLen - 1];\r\n                            }\r\n                        }\r\n                        var isReserved = checkReserved && _isReservedField(path, name_1);\r\n                        if (!isReserved && _theSanitizer && _theSanitizer.handleField(path, name_1)) {\r\n                            prop = _theSanitizer.value(path, name_1, srcValue, stringifyObjects);\r\n                        }\r\n                        else {\r\n                            prop = sanitizeProperty(name_1, srcValue, stringifyObjects);\r\n                        }\r\n                        if (prop) {\r\n                            // Set the value\r\n                            var newValue = prop.value;\r\n                            destObj[name_1] = newValue;\r\n                            if (metadataCallback) {\r\n                                metadataCallback(theMetaPathKeys, name_1, prop);\r\n                            }\r\n                            if (processSubKeys && typeof newValue === \"object\" && !isArray(newValue)) {\r\n                                var newPath = theMetaPathKeys;\r\n                                if (newPath) {\r\n                                    newPath = newPath.slice();\r\n                                    newPath.push(name_1);\r\n                                }\r\n                                // Make sure we process sub objects as well (for value sanitization and metadata)\r\n                                _processPathKeys(srcValue, newValue, path + \".\" + name_1, checkReserved, newPath, metadataCallback, processSubKeys);\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n// Removed Stub for Serializer.prototype.createPayload.\r\n// Removed Stub for Serializer.prototype.appendPayload.\r\n// Removed Stub for Serializer.prototype.getEventBlob.\r\n// Removed Stub for Serializer.prototype.handleField.\r\n// Removed Stub for Serializer.prototype.getSanitizer.\r\n    return Serializer;\r\n}());\r\nexport { Serializer };\r\n/**\r\n * @ignore\r\n */\r\nfunction _addJSONPropertyMetaData(json, propKeys, name, propertyValue) {\r\n    if (propertyValue && json) {\r\n        var encodedTypeValue = getCommonSchemaMetaData(propertyValue.value, propertyValue.kind, propertyValue.propertyType);\r\n        if (encodedTypeValue > -1) {\r\n            // Add the root metadata\r\n            var metaData = json[metadata];\r\n            if (!metaData) {\r\n                // Sets the root 'f'\r\n                metaData = json[metadata] = { f: {} };\r\n            }\r\n            var metaTarget = metaData[f];\r\n            if (!metaTarget) {\r\n                // This can occur if someone has manually added an ext.metadata object\r\n                // Such as ext.metadata.privLevel and ext.metadata.privTags\r\n                metaTarget = metaData[f] = {};\r\n            }\r\n            // Traverse the metadata path and build each object (contains an 'f' key) -- if required\r\n            if (propKeys) {\r\n                for (var lp = 0; lp < propKeys.length; lp++) {\r\n                    var key = propKeys[lp];\r\n                    if (!metaTarget[key]) {\r\n                        metaTarget[key] = { f: {} };\r\n                    }\r\n                    var newTarget = metaTarget[key][f];\r\n                    if (!newTarget) {\r\n                        // Not expected, but can occur if the metadata context was pre-created as part of the event\r\n                        newTarget = metaTarget[key][f] = {};\r\n                    }\r\n                    metaTarget = newTarget;\r\n                }\r\n            }\r\n            metaTarget = metaTarget[name] = {};\r\n            if (isArray(propertyValue.value)) {\r\n                metaTarget[\"a\"] = {\r\n                    t: encodedTypeValue\r\n                };\r\n            }\r\n            else {\r\n                metaTarget[\"t\"] = encodedTypeValue;\r\n            }\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=Serializer.js.map","/*\n * 1DS JS SDK POST plugin, 3.2.3\n * Copyright (c) Microsoft and contributors. All rights reserved.\n * (Microsoft Internal Only)\n */\n/**\r\n* RetryPolicy.ts\r\n* @author Abhilash Panwar (abpanwar)\r\n* @copyright Microsoft 2018\r\n*/\r\nvar RandomizationLowerThreshold = 0.8;\r\nvar RandomizationUpperThreshold = 1.2;\r\nvar BaseBackoff = 3000;\r\nvar MaxBackoff = 600000;\r\n/**\r\n * Determine if the request should be retried for the given status code.\r\n * The below expression reads that we should only retry for:\r\n *      - HttpStatusCodes that are smaller than 300.\r\n *      - HttpStatusCodes greater or equal to 500 (except for 501-NotImplement\r\n *        and 505-HttpVersionNotSupport).\r\n *      - HttpStatusCode 408-RequestTimeout.\r\n *      - HttpStatusCode 429.\r\n * This is based on Microsoft.WindowsAzure.Storage.RetryPolicies.ExponentialRetry class\r\n * @param httpStatusCode - The status code returned for the request.\r\n * @returns True if request should be retried, false otherwise.\r\n */\r\nexport function retryPolicyShouldRetryForStatus(httpStatusCode) {\r\n    /* tslint:disable:triple-equals */\r\n    // Disabling triple-equals rule to avoid httpOverrides from failing because they are returning a string value\r\n    return !((httpStatusCode >= 300 && httpStatusCode < 500 && httpStatusCode != 408 && httpStatusCode != 429)\r\n        || (httpStatusCode == 501)\r\n        || (httpStatusCode == 505));\r\n    /* tslint:enable:triple-equals */\r\n}\r\n/**\r\n * Gets the number of milliseconds to back off before retrying the request. The\r\n * back off duration is exponentially scaled based on the number of retries already\r\n * done for the request.\r\n * @param retriesSoFar - The number of times the request has already been retried.\r\n * @returns The back off duration for the request before it can be retried.\r\n */\r\nexport function retryPolicyGetMillisToBackoffForRetry(retriesSoFar) {\r\n    var waitDuration = 0;\r\n    var minBackoff = BaseBackoff * RandomizationLowerThreshold;\r\n    var maxBackoff = BaseBackoff * RandomizationUpperThreshold;\r\n    var randomBackoff = Math.floor(Math.random() * (maxBackoff - minBackoff)) + minBackoff;\r\n    waitDuration = Math.pow(2, retriesSoFar) * randomBackoff;\r\n    return Math.min(waitDuration, MaxBackoff);\r\n}\r\n//# sourceMappingURL=RetryPolicy.js.map","/*\n * 1DS JS SDK POST plugin, 3.2.3\n * Copyright (c) Microsoft and contributors. All rights reserved.\n * (Microsoft Internal Only)\n */\n/**\r\n* KillSwitch.ts\r\n* @author Abhilash Panwar (abpanwar)\r\n* @copyright Microsoft 2018\r\n*/\r\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\r\nimport { arrForEach, strTrim, dateNow } from \"@microsoft/1ds-core-js\";\r\nvar SecToMsMultiplier = 1000;\r\n/**\r\n* Class to stop certain tenants sending events.\r\n*/\r\nvar KillSwitch = /** @class */ (function () {\r\n    function KillSwitch() {\r\n        var _killedTokenDictionary = {};\r\n        function _normalizeTenants(values) {\r\n            var result = [];\r\n            if (values) {\r\n                arrForEach(values, function (value) {\r\n                    result.push(strTrim(value));\r\n                });\r\n            }\r\n            return result;\r\n        }\r\n        dynamicProto(KillSwitch, this, function (_self) {\r\n            _self.setKillSwitchTenants = function (killTokens, killDuration) {\r\n                if (killTokens && killDuration) {\r\n                    try {\r\n                        var killedTokens = _normalizeTenants(killTokens.split(\",\"));\r\n                        if (killDuration === \"this-request-only\") {\r\n                            return killedTokens;\r\n                        }\r\n                        var durationMs = parseInt(killDuration, 10) * SecToMsMultiplier;\r\n                        for (var i = 0; i < killedTokens.length; ++i) {\r\n                            _killedTokenDictionary[killedTokens[i]] = dateNow() + durationMs;\r\n                        }\r\n                    }\r\n                    catch (ex) {\r\n                        return [];\r\n                    }\r\n                }\r\n                return [];\r\n            };\r\n            _self.isTenantKilled = function (tenantToken) {\r\n                var killDictionary = _killedTokenDictionary;\r\n                var name = strTrim(tenantToken);\r\n                if (killDictionary[name] !== undefined && killDictionary[name] > dateNow()) {\r\n                    return true;\r\n                }\r\n                delete killDictionary[name];\r\n                return false;\r\n            };\r\n        });\r\n    }\r\n// Removed Stub for KillSwitch.prototype.setKillSwitchTenants.\r\n// Removed Stub for KillSwitch.prototype.isTenantKilled.\r\n    return KillSwitch;\r\n}());\r\nexport default KillSwitch;\r\n//# sourceMappingURL=KillSwitch.js.map","/*\n * 1DS JS SDK POST plugin, 3.2.3\n * Copyright (c) Microsoft and contributors. All rights reserved.\n * (Microsoft Internal Only)\n */\n/**\r\n* ClockSkewManager.ts\r\n* @author Abhilash Panwar (abpanwar)\r\n* @copyright Microsoft 2018\r\n*/\r\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\r\n/**\r\n* Class to manage clock skew correction.\r\n*/\r\nvar ClockSkewManager = /** @class */ (function () {\r\n    function ClockSkewManager() {\r\n        var _allowRequestSending = true;\r\n        var _shouldAddClockSkewHeaders = true;\r\n        var _isFirstRequest = true;\r\n        var _clockSkewHeaderValue = \"use-collector-delta\";\r\n        var _clockSkewSet = false;\r\n        dynamicProto(ClockSkewManager, this, function (_self) {\r\n            /**\r\n             * Determine if requests can be sent.\r\n             * @returns True if requests can be sent, false otherwise.\r\n             */\r\n            _self.allowRequestSending = function () {\r\n                return _allowRequestSending;\r\n            };\r\n            /**\r\n             * Tells the ClockSkewManager that it should assume that the first request has now been sent,\r\n             * If this method had not yet been called AND the clock Skew had not been set this will set\r\n             * allowRequestSending to false until setClockSet() is called.\r\n             */\r\n            _self.firstRequestSent = function () {\r\n                if (_isFirstRequest) {\r\n                    _isFirstRequest = false;\r\n                    if (!_clockSkewSet) {\r\n                        // Block sending until we get the first clock Skew\r\n                        _allowRequestSending = false;\r\n                    }\r\n                }\r\n            };\r\n            /**\r\n             * Determine if clock skew headers should be added to the request.\r\n             * @returns True if clock skew headers should be added, false otherwise.\r\n             */\r\n            _self.shouldAddClockSkewHeaders = function () {\r\n                return _shouldAddClockSkewHeaders;\r\n            };\r\n            /**\r\n             * Gets the clock skew header value.\r\n             * @returns The clock skew header value.\r\n             */\r\n            _self.getClockSkewHeaderValue = function () {\r\n                return _clockSkewHeaderValue;\r\n            };\r\n            /**\r\n             * Sets the clock skew header value. Once clock skew is set this method\r\n             * is no-op.\r\n             * @param timeDeltaInMillis - Time delta to be saved as the clock skew header value.\r\n             */\r\n            _self.setClockSkew = function (timeDeltaInMillis) {\r\n                if (!_clockSkewSet) {\r\n                    if (timeDeltaInMillis) {\r\n                        _clockSkewHeaderValue = timeDeltaInMillis;\r\n                        _shouldAddClockSkewHeaders = true;\r\n                        _clockSkewSet = true;\r\n                    }\r\n                    else {\r\n                        _shouldAddClockSkewHeaders = false;\r\n                    }\r\n                    // Unblock sending\r\n                    _allowRequestSending = true;\r\n                }\r\n            };\r\n        });\r\n    }\r\n// Removed Stub for ClockSkewManager.prototype.allowRequestSending.\r\n// Removed Stub for ClockSkewManager.prototype.firstRequestSent.\r\n// Removed Stub for ClockSkewManager.prototype.shouldAddClockSkewHeaders.\r\n// Removed Stub for ClockSkewManager.prototype.getClockSkewHeaderValue.\r\n// Removed Stub for ClockSkewManager.prototype.setClockSkew.\r\n    return ClockSkewManager;\r\n}());\r\nexport default ClockSkewManager;\r\n//# sourceMappingURL=ClockSkewManager.js.map","/*\n * 1DS JS SDK POST plugin, 3.2.3\n * Copyright (c) Microsoft and contributors. All rights reserved.\n * (Microsoft Internal Only)\n */\nvar _a;\r\n/**\r\n* HttpManager.ts\r\n* @author Abhilash Panwar (abpanwar); Hector Hernandez (hectorh); Nev Wylie (newylie)\r\n* @copyright Microsoft 2018-2020\r\n*/\r\nimport { isReactNative, isValueAssigned, isString, getTime, arrForEach, getLocation, strTrim, isFetchSupported, isXhrSupported, isBeaconsSupported, FullVersionString, useXDomainRequest, strUndefined, getNavigator, doPerf, dateNow, isUndefined, isNullOrUndefined, objForEachKey, isNumber, isArray, dumpObj, objKeys, extend, hasOwnProperty, openXhr, _throwInternal } from \"@microsoft/1ds-core-js\";\r\nimport { Serializer } from \"./Serializer\";\r\nimport { retryPolicyGetMillisToBackoffForRetry, retryPolicyShouldRetryForStatus } from \"./RetryPolicy\";\r\nimport EVTKillSwitch from \"./KillSwitch\";\r\nimport EVTClockSkewManager from \"./ClockSkewManager\";\r\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\r\nimport { defaultCacheControl, defaultContentType, DisabledPropertyName, Method, strApiKey, strAuthXToken, strCacheControl, strClientId, strClientVersion, strContentTypeHeader, strDropped, strKillDurationHeader, strKillDurationSecondsHeader, strKillTokensHeader, strMsaDeviceTicket, strMsfpc, strNoResponseBody, strOther, strRequeue, strResponseFail, strSending, strTimeDeltaHeader, strTimeDeltaToApply, strUploadTime } from \"./Constants\";\r\nvar strSendAttempt = \"sendAttempt\";\r\nvar _noResponseQs = \"&\" + strNoResponseBody + \"=true\";\r\n/**\r\n * Identifies the default notification reason to the action names\r\n */\r\nvar _eventActionMap = (_a = {},\r\n    _a[1 /* EventBatchNotificationReason.Paused */] = strRequeue,\r\n    _a[100 /* EventBatchNotificationReason.RequeueEvents */] = strRequeue,\r\n    _a[200 /* EventBatchNotificationReason.Complete */] = \"sent\",\r\n    _a[8004 /* EventBatchNotificationReason.KillSwitch */] = strDropped,\r\n    _a[8003 /* EventBatchNotificationReason.SizeLimitExceeded */] = strDropped,\r\n    _a);\r\nvar _collectorQsHeaders = {};\r\nvar _collectorHeaderToQs = {};\r\nfunction _addCollectorHeaderQsMapping(qsName, headerName, allowQs) {\r\n    _collectorQsHeaders[qsName] = headerName;\r\n    if (allowQs !== false) {\r\n        _collectorHeaderToQs[headerName] = qsName;\r\n    }\r\n}\r\n_addCollectorHeaderQsMapping(strMsaDeviceTicket, strMsaDeviceTicket, false);\r\n_addCollectorHeaderQsMapping(strClientVersion, strClientVersion);\r\n_addCollectorHeaderQsMapping(strClientId, \"Client-Id\");\r\n_addCollectorHeaderQsMapping(strApiKey, strApiKey);\r\n_addCollectorHeaderQsMapping(strTimeDeltaToApply, strTimeDeltaToApply);\r\n_addCollectorHeaderQsMapping(strUploadTime, strUploadTime);\r\n_addCollectorHeaderQsMapping(strAuthXToken, strAuthXToken);\r\nfunction _getResponseText(xhr) {\r\n    try {\r\n        return xhr.responseText;\r\n    }\r\n    catch (e) {\r\n        // Best effort, as XHR may throw while XDR wont so just ignore\r\n    }\r\n    return \"\";\r\n}\r\nfunction _hasHeader(headers, header) {\r\n    var hasHeader = false;\r\n    if (headers && header) {\r\n        var keys = objKeys(headers);\r\n        if (keys && keys.length > 0) {\r\n            var lowerHeader = header.toLowerCase();\r\n            for (var lp = 0; lp < keys.length; lp++) {\r\n                var value = keys[lp];\r\n                if (value && hasOwnProperty(header, value) &&\r\n                    value.toLowerCase() === lowerHeader) {\r\n                    hasHeader = true;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return hasHeader;\r\n}\r\nfunction _addRequestDetails(details, name, value, useHeaders) {\r\n    if (name && value && value.length > 0) {\r\n        if (useHeaders && _collectorQsHeaders[name]) {\r\n            details.hdrs[_collectorQsHeaders[name]] = value;\r\n            details.useHdrs = true;\r\n        }\r\n        else {\r\n            details.url += \"&\" + name + \"=\" + value;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Class managing the sending of requests.\r\n */\r\nvar HttpManager = /** @class */ (function () {\r\n    /**\r\n     * @constructor\r\n     * @param requestQueue   - The queue that contains the requests to be sent.\r\n     */\r\n    function HttpManager(maxEventsPerBatch, maxConnections, maxRequestRetriesBeforeBackoff, actions, timeoutOverride) {\r\n        this._responseHandlers = [];\r\n        var _urlString = \"?cors=true&\" + strContentTypeHeader.toLowerCase() + \"=\" + defaultContentType;\r\n        var _killSwitch = new EVTKillSwitch();\r\n        var _paused = false;\r\n        var _clockSkewManager = new EVTClockSkewManager();\r\n        var _useBeacons = false;\r\n        var _outstandingRequests = 0; // Holds the number of outstanding async requests that have not returned a response yet\r\n        var _postManager;\r\n        var _sendInterfaces;\r\n        var _core;\r\n        var _customHttpInterface = true;\r\n        var _queryStringParameters = [];\r\n        var _headers = {};\r\n        var _batchQueue = [];\r\n        var _serializer = null;\r\n        var _enableEventTimings = false;\r\n        var _cookieMgr;\r\n        var _isUnloading = false;\r\n        var _useHeaders = false;\r\n        var _xhrTimeout;\r\n        var _disableXhrSync;\r\n        dynamicProto(HttpManager, this, function (_self) {\r\n            var _sendCredentials = true;\r\n            _self.initialize = function (endpointUrl, core, postChannel, httpInterface, channelConfig) {\r\n                var _a;\r\n                if (!channelConfig) {\r\n                    channelConfig = {};\r\n                }\r\n                _urlString = endpointUrl + _urlString;\r\n                _useHeaders = !isUndefined(channelConfig.avoidOptions) ? !channelConfig.avoidOptions : true;\r\n                _core = core;\r\n                _cookieMgr = core.getCookieMgr();\r\n                _enableEventTimings = !_core.config.disableEventTimings;\r\n                var enableCompoundKey = !!_core.config.enableCompoundKey;\r\n                _postManager = postChannel;\r\n                var valueSanitizer = channelConfig.valueSanitizer;\r\n                var stringifyObjects = channelConfig.stringifyObjects;\r\n                if (!isUndefined(channelConfig.enableCompoundKey)) {\r\n                    enableCompoundKey = !!channelConfig.enableCompoundKey;\r\n                }\r\n                _xhrTimeout = channelConfig.xhrTimeout;\r\n                _disableXhrSync = channelConfig.disableXhrSync;\r\n                _useBeacons = !isReactNative(); // Only use beacons if not running in React Native\r\n                _serializer = new Serializer(_core, valueSanitizer, stringifyObjects, enableCompoundKey);\r\n                var syncHttpInterface = httpInterface;\r\n                var beaconHttpInterface = channelConfig.alwaysUseXhrOverride ? httpInterface : null;\r\n                var fetchSyncHttpInterface = channelConfig.alwaysUseXhrOverride ? httpInterface : null;\r\n                if (!httpInterface) {\r\n                    _customHttpInterface = false;\r\n                    var location_1 = getLocation();\r\n                    if (location_1 && location_1.protocol && location_1.protocol.toLowerCase() === \"file:\") {\r\n                        // Special case where a local html file fails with a CORS error on Chromium browsers\r\n                        _sendCredentials = false;\r\n                    }\r\n                    var theTransports = [];\r\n                    if (isReactNative()) {\r\n                        // Use Fetch or XDR/XHR\r\n                        theTransports = [2 /* TransportType.Fetch */, 1 /* TransportType.Xhr */];\r\n                    }\r\n                    else {\r\n                        // Use XDR/XHR, Fetch or beacons\r\n                        theTransports = [1 /* TransportType.Xhr */, 2 /* TransportType.Fetch */, 3 /* TransportType.Beacon */];\r\n                    }\r\n                    // Prefix any user requested transport(s) values\r\n                    var configTransports = channelConfig.transports;\r\n                    if (configTransports) {\r\n                        if (isNumber(configTransports)) {\r\n                            theTransports = [configTransports].concat(theTransports);\r\n                        }\r\n                        else if (isArray(configTransports)) {\r\n                            theTransports = configTransports.concat(theTransports);\r\n                        }\r\n                    }\r\n                    httpInterface = _getSenderInterface(theTransports, false);\r\n                    syncHttpInterface = _getSenderInterface(theTransports, true);\r\n                    if (!httpInterface) {\r\n                        _postManager.diagLog().warnToConsole(\"No available transport to send events\");\r\n                    }\r\n                }\r\n                _sendInterfaces = (_a = {},\r\n                    _a[0 /* EventSendType.Batched */] = httpInterface,\r\n                    _a[1 /* EventSendType.Synchronous */] = syncHttpInterface || _getSenderInterface([1 /* TransportType.Xhr */, 2 /* TransportType.Fetch */, 3 /* TransportType.Beacon */], true),\r\n                    _a[2 /* EventSendType.SendBeacon */] = beaconHttpInterface || _getSenderInterface([3 /* TransportType.Beacon */, 2 /* TransportType.Fetch */], true) || syncHttpInterface || _getSenderInterface([1 /* TransportType.Xhr */], true),\r\n                    _a[3 /* EventSendType.SyncFetch */] = fetchSyncHttpInterface || _getSenderInterface([2 /* TransportType.Fetch */, 3 /* TransportType.Beacon */], true) || syncHttpInterface || _getSenderInterface([1 /* TransportType.Xhr */], true),\r\n                    _a);\r\n            };\r\n            // Special internal method to allow the DebugPlugin to hook embedded objects\r\n            function _getSenderInterface(transports, syncSupport) {\r\n                var transportType = 0 /* TransportType.NotSet */;\r\n                var sendPostFunc = null;\r\n                var lp = 0;\r\n                while (sendPostFunc == null && lp < transports.length) {\r\n                    transportType = transports[lp];\r\n                    if (transportType === 1 /* TransportType.Xhr */) {\r\n                        if (useXDomainRequest()) {\r\n                            sendPostFunc = _xdrSendPost;\r\n                        }\r\n                        else if (isXhrSupported()) {\r\n                            sendPostFunc = _xhrSendPost;\r\n                        }\r\n                    }\r\n                    else if (transportType === 2 /* TransportType.Fetch */ && isFetchSupported(syncSupport)) {\r\n                        sendPostFunc = _fetchSendPost;\r\n                    }\r\n                    else if (_useBeacons && transportType === 3 /* TransportType.Beacon */ && isBeaconsSupported()) {\r\n                        sendPostFunc = _beaconSendPost;\r\n                    }\r\n                    lp++;\r\n                }\r\n                if (sendPostFunc) {\r\n                    return {\r\n                        _transport: transportType,\r\n                        _isSync: syncSupport,\r\n                        sendPOST: sendPostFunc\r\n                    };\r\n                }\r\n                return null;\r\n            }\r\n            _self[\"_getDbgPlgTargets\"] = function () {\r\n                return [_sendInterfaces[0 /* EventSendType.Batched */], _killSwitch, _serializer, _sendInterfaces];\r\n            };\r\n            function _xdrSendPost(payload, oncomplete, sync) {\r\n                // It doesn't support custom headers, so no action is taken with current requestHeaders\r\n                var xdr = new XDomainRequest();\r\n                xdr.open(Method, payload.urlString);\r\n                if (payload.timeout) {\r\n                    xdr.timeout = payload.timeout;\r\n                }\r\n                // can't get the status code in xdr.\r\n                xdr.onload = function () {\r\n                    // we will assume onload means the request succeeded.\r\n                    var response = _getResponseText(xdr);\r\n                    _doOnComplete(oncomplete, 200, {}, response);\r\n                    _handleCollectorResponse(response);\r\n                };\r\n                // we will assume onerror means we need to drop the events.\r\n                xdr.onerror = function () {\r\n                    _doOnComplete(oncomplete, 400, {});\r\n                };\r\n                // we will assume ontimeout means we need to retry the events.\r\n                xdr.ontimeout = function () {\r\n                    _doOnComplete(oncomplete, 500, {});\r\n                };\r\n                // https://cypressnorth.com/web-programming-and-development/internet-explorer-aborting-ajax-requests-fixed/\r\n                // tslint:disable-next-line:no-empty\r\n                xdr.onprogress = function () { };\r\n                if (sync) {\r\n                    xdr.send(payload.data);\r\n                }\r\n                else {\r\n                    timeoutOverride.set(function () {\r\n                        xdr.send(payload.data);\r\n                    }, 0);\r\n                }\r\n            }\r\n            function _fetchSendPost(payload, oncomplete, sync) {\r\n                var _a;\r\n                var theUrl = payload.urlString;\r\n                var ignoreResponse = false;\r\n                var responseHandled = false;\r\n                var requestInit = (_a = {\r\n                        body: payload.data,\r\n                        method: Method\r\n                    },\r\n                    _a[DisabledPropertyName] = true,\r\n                    _a);\r\n                if (sync) {\r\n                    requestInit.keepalive = true;\r\n                    if (payload._sendReason === 2 /* SendRequestReason.Unload */) {\r\n                        // As a sync request (during unload), it is unlikely that we will get a chance to process the response so\r\n                        // just like beacon send assume that the events have been accepted and processed\r\n                        ignoreResponse = true;\r\n                        theUrl += _noResponseQs;\r\n                    }\r\n                }\r\n                if (_sendCredentials) {\r\n                    // Don't send credentials when URL is file://\r\n                    requestInit.credentials = \"include\";\r\n                }\r\n                // Only add headers if there are headers to add, due to issue with some polyfills\r\n                if (payload.headers && objKeys(payload.headers).length > 0) {\r\n                    requestInit.headers = payload.headers;\r\n                }\r\n                fetch(theUrl, requestInit).then(function (response) {\r\n                    var headerMap = {};\r\n                    var responseText = \"\";\r\n                    if (response.headers) {\r\n                        response.headers.forEach(function (value, name) {\r\n                            headerMap[name] = value;\r\n                        });\r\n                    }\r\n                    if (response.body) {\r\n                        response.text().then(function (text) {\r\n                            responseText = text;\r\n                        });\r\n                    }\r\n                    if (!responseHandled) {\r\n                        responseHandled = true;\r\n                        _doOnComplete(oncomplete, response.status, headerMap, responseText);\r\n                        _handleCollectorResponse(responseText);\r\n                    }\r\n                })[\"catch\"](function (error) {\r\n                    // In case there is an error in the request. Set the status to 0\r\n                    // so that the events can be retried later.\r\n                    if (!responseHandled) {\r\n                        responseHandled = true;\r\n                        _doOnComplete(oncomplete, 0, {});\r\n                    }\r\n                });\r\n                if (ignoreResponse && !responseHandled) {\r\n                    // Assume success during unload processing\r\n                    responseHandled = true;\r\n                    _doOnComplete(oncomplete, 200, {});\r\n                }\r\n                if (!responseHandled && payload.timeout > 0) {\r\n                    // Simulate timeout\r\n                    timeoutOverride.set(function () {\r\n                        if (!responseHandled) {\r\n                            // Assume a 500 response (which will cause a retry)\r\n                            responseHandled = true;\r\n                            _doOnComplete(oncomplete, 500, {});\r\n                        }\r\n                    }, payload.timeout);\r\n                }\r\n            }\r\n            function _xhrSendPost(payload, oncomplete, sync) {\r\n                var theUrl = payload.urlString;\r\n                function _appendHeader(theHeaders, xhr, name) {\r\n                    if (!theHeaders[name] && xhr && xhr.getResponseHeader) {\r\n                        var value = xhr.getResponseHeader(name);\r\n                        if (value) {\r\n                            theHeaders[name] = strTrim(value);\r\n                        }\r\n                    }\r\n                    return theHeaders;\r\n                }\r\n                function _getAllResponseHeaders(xhr) {\r\n                    var theHeaders = {};\r\n                    if (!xhr.getAllResponseHeaders) {\r\n                        // Firefox 2-63 doesn't have getAllResponseHeaders function but it does have getResponseHeader\r\n                        // Only call these if getAllResponseHeaders doesn't exist, otherwise we can get invalid response errors\r\n                        // as collector is not currently returning the correct header to allow JS to access these headers\r\n                        theHeaders = _appendHeader(theHeaders, xhr, strTimeDeltaHeader);\r\n                        theHeaders = _appendHeader(theHeaders, xhr, strKillDurationHeader);\r\n                        theHeaders = _appendHeader(theHeaders, xhr, strKillDurationSecondsHeader);\r\n                    }\r\n                    else {\r\n                        theHeaders = _convertAllHeadersToMap(xhr.getAllResponseHeaders());\r\n                    }\r\n                    return theHeaders;\r\n                }\r\n                function xhrComplete(xhr, responseTxt) {\r\n                    _doOnComplete(oncomplete, xhr.status, _getAllResponseHeaders(xhr), responseTxt);\r\n                }\r\n                if (sync && payload.disableXhrSync) {\r\n                    sync = false;\r\n                }\r\n                var xhrRequest = openXhr(Method, theUrl, _sendCredentials, true, sync, payload.timeout);\r\n                // Set custom headers (e.g. gzip) here (after open())\r\n                objForEachKey(payload.headers, function (name, value) {\r\n                    xhrRequest.setRequestHeader(name, value);\r\n                });\r\n                xhrRequest.onload = function () {\r\n                    var response = _getResponseText(xhrRequest);\r\n                    xhrComplete(xhrRequest, response);\r\n                    _handleCollectorResponse(response);\r\n                };\r\n                xhrRequest.onerror = function () {\r\n                    xhrComplete(xhrRequest);\r\n                };\r\n                xhrRequest.ontimeout = function () {\r\n                    xhrComplete(xhrRequest);\r\n                };\r\n                xhrRequest.send(payload.data);\r\n            }\r\n            function _doOnComplete(oncomplete, status, headers, response) {\r\n                try {\r\n                    oncomplete(status, headers, response);\r\n                }\r\n                catch (e) {\r\n                    _throwInternal(_postManager.diagLog(), 2 /* eLoggingSeverity.WARNING */, 518 /* _eExtendedInternalMessageId.SendPostOnCompleteFailure */, dumpObj(e));\r\n                }\r\n            }\r\n            function _beaconSendPost(payload, oncomplete, sync) {\r\n                // Custom headers not supported in sendBeacon payload.headers would be ignored\r\n                var internalPayloadData = payload;\r\n                var status = 200;\r\n                var thePayload = internalPayloadData._thePayload;\r\n                var theUrl = payload.urlString + _noResponseQs;\r\n                try {\r\n                    var nav_1 = getNavigator();\r\n                    if (!nav_1.sendBeacon(theUrl, payload.data)) {\r\n                        if (thePayload) {\r\n                            // Failed to send entire payload so try and split data and try to send as much events as possible\r\n                            var droppedBatches_1 = [];\r\n                            arrForEach(thePayload.batches, function (theBatch) {\r\n                                if (droppedBatches_1 && theBatch && theBatch.count() > 0) {\r\n                                    var theEvents = theBatch.events();\r\n                                    for (var lp = 0; lp < theEvents.length; lp++) {\r\n                                        if (!nav_1.sendBeacon(theUrl, _serializer.getEventBlob(theEvents[lp]))) {\r\n                                            // Can't send anymore, so split the batch and drop the rest\r\n                                            droppedBatches_1.push(theBatch.split(lp));\r\n                                            break;\r\n                                        }\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    // Remove all of the events from the existing batch in the payload as the copy includes the original\r\n                                    droppedBatches_1.push(theBatch.split(0));\r\n                                }\r\n                            });\r\n                            _sendBatchesNotification(droppedBatches_1, 8003 /* EventBatchNotificationReason.SizeLimitExceeded */, thePayload.sendType, true);\r\n                        }\r\n                        else {\r\n                            status = 0;\r\n                        }\r\n                    }\r\n                }\r\n                catch (ex) {\r\n                    _postManager.diagLog().warnToConsole(\"Failed to send telemetry using sendBeacon API. Ex:\" + dumpObj(ex));\r\n                    status = 0;\r\n                }\r\n                finally {\r\n                    _doOnComplete(oncomplete, status, {}, \"\");\r\n                }\r\n            }\r\n            function _isBeaconPayload(sendType) {\r\n                // Sync Fetch has the same payload limitation as sendBeacon -- 64kb limit, so treat both as a beacon send\r\n                return sendType === 2 /* EventSendType.SendBeacon */ || sendType === 3 /* EventSendType.SyncFetch */;\r\n            }\r\n            function _adjustSendType(sendType) {\r\n                if (_isUnloading && _isBeaconPayload(sendType)) {\r\n                    sendType = 2 /* EventSendType.SendBeacon */;\r\n                }\r\n                return sendType;\r\n            }\r\n            _self.addQueryStringParameter = function (name, value) {\r\n                for (var i = 0; i < _queryStringParameters.length; i++) {\r\n                    if (_queryStringParameters[i].name === name) {\r\n                        _queryStringParameters[i].value = value;\r\n                        return;\r\n                    }\r\n                }\r\n                _queryStringParameters.push({ name: name, value: value });\r\n            };\r\n            _self.addHeader = function (name, value) {\r\n                _headers[name] = value;\r\n            };\r\n            _self.canSendRequest = function () {\r\n                return _hasIdleConnection() && _clockSkewManager.allowRequestSending();\r\n            };\r\n            _self.sendQueuedRequests = function (sendType, sendReason) {\r\n                if (isUndefined(sendType)) {\r\n                    sendType = 0 /* EventSendType.Batched */;\r\n                }\r\n                if (_isUnloading) {\r\n                    sendType = _adjustSendType(sendType);\r\n                    sendReason = 2 /* SendRequestReason.Unload */;\r\n                }\r\n                if (_canSendPayload(_batchQueue, sendType, 0)) {\r\n                    _sendBatches(_clearQueue(), 0, false, sendType, sendReason || 0 /* SendRequestReason.Undefined */);\r\n                }\r\n            };\r\n            _self.isCompletelyIdle = function () {\r\n                return !_paused && _outstandingRequests === 0 && _batchQueue.length === 0;\r\n            };\r\n            _self.setUnloading = function (value) {\r\n                _isUnloading = value;\r\n            };\r\n            _self.addBatch = function (theBatch) {\r\n                if (theBatch && theBatch.count() > 0) {\r\n                    // Try and kill the event faster\r\n                    if (_killSwitch.isTenantKilled(theBatch.iKey())) {\r\n                        return false;\r\n                    }\r\n                    _batchQueue.push(theBatch);\r\n                }\r\n                return true;\r\n            };\r\n            /**\r\n             * Queue all the remaining requests to be sent. The requests will be\r\n             * sent using HTML5 Beacons if they are available.\r\n             */\r\n            _self.teardown = function () {\r\n                if (_batchQueue.length > 0) {\r\n                    _sendBatches(_clearQueue(), 0, true, 2 /* EventSendType.SendBeacon */, 2 /* SendRequestReason.Unload */);\r\n                }\r\n            };\r\n            /**\r\n             * Pause the sending of requests. No new requests will be sent.\r\n             */\r\n            _self.pause = function () {\r\n                _paused = true;\r\n            };\r\n            /**\r\n             * Resume the sending of requests.\r\n             */\r\n            _self.resume = function () {\r\n                _paused = false;\r\n                _self.sendQueuedRequests(0 /* EventSendType.Batched */, 4 /* SendRequestReason.Resumed */);\r\n            };\r\n            /**\r\n             * Sends a request synchronously to the Aria collector. This api is used to send\r\n             * a request containing a single immediate event.\r\n             *\r\n             * @param batch - The request to be sent.\r\n             * @param sendReason   - The token used to send the request.\r\n             */\r\n            _self.sendSynchronousBatch = function (batch, sendType, sendReason) {\r\n                // This will not take into account the max connections restriction. Since this is sync, we can\r\n                // only send one of this request at a time and thus should not worry about multiple connections\r\n                // being used to send synchronous events.\r\n                // Increment active connection since we are still going to use a connection to send the request.\r\n                if (batch && batch.count() > 0) {\r\n                    if (isNullOrUndefined(sendType)) {\r\n                        sendType = 1 /* EventSendType.Synchronous */;\r\n                    }\r\n                    if (_isUnloading) {\r\n                        sendType = _adjustSendType(sendType);\r\n                        sendReason = 2 /* SendRequestReason.Unload */;\r\n                    }\r\n                    // For sync requests we will not wait for the clock skew.\r\n                    _sendBatches([batch], 0, false, sendType, sendReason || 0 /* SendRequestReason.Undefined */);\r\n                }\r\n            };\r\n            function _hasIdleConnection() {\r\n                return !_paused && _outstandingRequests < maxConnections;\r\n            }\r\n            function _clearQueue() {\r\n                var theQueue = _batchQueue;\r\n                _batchQueue = [];\r\n                return theQueue;\r\n            }\r\n            function _canSendPayload(theBatches, sendType, retryCnt) {\r\n                var result = false;\r\n                if (theBatches && theBatches.length > 0 && !_paused && _sendInterfaces[sendType] && _serializer) {\r\n                    // Always attempt to send synchronous events don't wait for idle or clockSkew\r\n                    // and don't block retry requests if clockSkew is not yet set\r\n                    result = (sendType !== 0 /* EventSendType.Batched */) || (_hasIdleConnection() && (retryCnt > 0 || _clockSkewManager.allowRequestSending()));\r\n                }\r\n                return result;\r\n            }\r\n            function _createDebugBatches(theBatches) {\r\n                var values = {};\r\n                if (theBatches) {\r\n                    arrForEach(theBatches, function (theBatch, idx) {\r\n                        values[idx] = {\r\n                            iKey: theBatch.iKey(),\r\n                            evts: theBatch.events()\r\n                        };\r\n                    });\r\n                }\r\n                return values;\r\n            }\r\n            function _sendBatches(theBatches, retryCount, isTeardown, sendType, sendReason) {\r\n                if (!theBatches || theBatches.length === 0) {\r\n                    // Nothing to do\r\n                    return;\r\n                }\r\n                if (_paused) {\r\n                    _sendBatchesNotification(theBatches, 1 /* EventBatchNotificationReason.Paused */, sendType);\r\n                    return;\r\n                }\r\n                // Make sure that if we are unloading the sendType is a supported version\r\n                sendType = _adjustSendType(sendType);\r\n                try {\r\n                    var orgBatches_1 = theBatches;\r\n                    var isSynchronous_1 = sendType !== 0 /* EventSendType.Batched */;\r\n                    doPerf(_core, function () { return \"HttpManager:_sendBatches\"; }, function (perfEvt) {\r\n                        if (perfEvt) {\r\n                            // Perf Monitoring is enabled, so create a \"Quick\" copy of the original batches so we still report\r\n                            // the original values as part of the perfEvent. This is because theBatches uses .shift() to remove each\r\n                            // batch as they are processed - removing from the original array, so by the time the _createDebugBatches()\r\n                            // function is called the passed in value has changed and therefore the reported value for the perfEvent is incorrect\r\n                            theBatches = theBatches.slice(0);\r\n                        }\r\n                        var droppedBatches = [];\r\n                        var thePayload = null;\r\n                        var serializationStart = getTime();\r\n                        var sendInterface = _sendInterfaces[sendType] || (isSynchronous_1 ? _sendInterfaces[1 /* EventSendType.Synchronous */] : _sendInterfaces[0 /* EventSendType.Batched */]);\r\n                        // Sync Fetch has the same payload limitation as sendBeacon -- 64kb limit\r\n                        var isBeaconTransport = (_isUnloading || _isBeaconPayload(sendType) || (sendInterface && sendInterface._transport === 3 /* TransportType.Beacon */)) && _canUseSendBeaconApi();\r\n                        while (_canSendPayload(theBatches, sendType, retryCount)) {\r\n                            var theBatch = theBatches.shift();\r\n                            if (theBatch && theBatch.count() > 0) {\r\n                                if (!_killSwitch.isTenantKilled(theBatch.iKey())) {\r\n                                    // Make sure we have a payload object\r\n                                    thePayload = thePayload || _serializer.createPayload(retryCount, isTeardown, isSynchronous_1, isBeaconTransport, sendReason, sendType);\r\n                                    // Add the batch to the current payload\r\n                                    if (!_serializer.appendPayload(thePayload, theBatch, maxEventsPerBatch)) {\r\n                                        // Entire batch was not added so send the payload and retry adding this batch\r\n                                        _doPayloadSend(thePayload, serializationStart, getTime(), sendReason);\r\n                                        serializationStart = getTime();\r\n                                        theBatches = [theBatch].concat(theBatches);\r\n                                        thePayload = null;\r\n                                    }\r\n                                    else if (thePayload.overflow !== null) {\r\n                                        // Total Payload size was exceeded so send the payload and add the unsent as the next batch to send\r\n                                        theBatches = [thePayload.overflow].concat(theBatches);\r\n                                        thePayload.overflow = null;\r\n                                        _doPayloadSend(thePayload, serializationStart, getTime(), sendReason);\r\n                                        serializationStart = getTime();\r\n                                        thePayload = null;\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    droppedBatches.push(theBatch);\r\n                                }\r\n                            }\r\n                        }\r\n                        // Make sure to flush any remaining payload\r\n                        if (thePayload) {\r\n                            _doPayloadSend(thePayload, serializationStart, getTime(), sendReason);\r\n                        }\r\n                        if (theBatches.length > 0) {\r\n                            // Add any unsent batches back to the head of the queue\r\n                            _batchQueue = theBatches.concat(_batchQueue);\r\n                        }\r\n                        // Now send notification about any dropped events\r\n                        _sendBatchesNotification(droppedBatches, 8004 /* EventBatchNotificationReason.KillSwitch */, sendType);\r\n                    }, function () { return ({ batches: _createDebugBatches(orgBatches_1), retryCount: retryCount, isTeardown: isTeardown, isSynchronous: isSynchronous_1, sendReason: sendReason, useSendBeacon: _isBeaconPayload(sendType), sendType: sendType }); }, !isSynchronous_1);\r\n                }\r\n                catch (ex) {\r\n                    _throwInternal(_postManager.diagLog(), 2 /* eLoggingSeverity.WARNING */, 48 /* _eInternalMessageId.CannotSerializeObject */, \"Unexpected Exception sending batch: \" + dumpObj(ex));\r\n                }\r\n            }\r\n            function _buildRequestDetails(thePayload, useHeaders) {\r\n                var requestDetails = {\r\n                    url: _urlString,\r\n                    hdrs: {},\r\n                    useHdrs: false // Assume no headers\r\n                };\r\n                if (!useHeaders) {\r\n                    // Attempt to map headers to a query string if possible\r\n                    objForEachKey(_headers, function (name, value) {\r\n                        if (_collectorHeaderToQs[name]) {\r\n                            _addRequestDetails(requestDetails, _collectorHeaderToQs[name], value, false);\r\n                        }\r\n                        else {\r\n                            // No mapping, so just include in the headers anyway (may not get sent if using sendBeacon())\r\n                            requestDetails.hdrs[name] = value;\r\n                            requestDetails.useHdrs = true;\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    // Copy the pre-defined headers into the payload headers\r\n                    requestDetails.hdrs = extend(requestDetails.hdrs, _headers);\r\n                    requestDetails.useHdrs = (objKeys(requestDetails.hdrs).length > 0);\r\n                }\r\n                _addRequestDetails(requestDetails, strClientId, \"NO_AUTH\", useHeaders);\r\n                _addRequestDetails(requestDetails, strClientVersion, FullVersionString, useHeaders);\r\n                var apiQsKeys = \"\";\r\n                arrForEach(thePayload.apiKeys, function (apiKey) {\r\n                    if (apiQsKeys.length > 0) {\r\n                        apiQsKeys += \",\";\r\n                    }\r\n                    apiQsKeys += apiKey;\r\n                });\r\n                _addRequestDetails(requestDetails, strApiKey, apiQsKeys, useHeaders);\r\n                _addRequestDetails(requestDetails, strUploadTime, dateNow().toString(), useHeaders);\r\n                var msfpc = _getMsfpc(thePayload);\r\n                if (isValueAssigned(msfpc)) {\r\n                    requestDetails.url += \"&ext.intweb.msfpc=\" + msfpc;\r\n                }\r\n                if (_clockSkewManager.shouldAddClockSkewHeaders()) {\r\n                    _addRequestDetails(requestDetails, strTimeDeltaToApply, _clockSkewManager.getClockSkewHeaderValue(), useHeaders);\r\n                }\r\n                if (_core.getWParam) {\r\n                    var wParam = _core.getWParam();\r\n                    if (wParam >= 0) {\r\n                        requestDetails.url += \"&w=\" + wParam;\r\n                    }\r\n                }\r\n                for (var i = 0; i < _queryStringParameters.length; i++) {\r\n                    requestDetails.url += \"&\" + _queryStringParameters[i].name + \"=\" + _queryStringParameters[i].value;\r\n                }\r\n                return requestDetails;\r\n            }\r\n            function _canUseSendBeaconApi() {\r\n                return !_customHttpInterface && _useBeacons && isBeaconsSupported();\r\n            }\r\n            function _setTimingValue(timings, name, value) {\r\n                timings[name] = timings[name] || {};\r\n                timings[name][_postManager.identifier] = value;\r\n            }\r\n            function _doPayloadSend(thePayload, serializationStart, serializationCompleted, sendReason) {\r\n                if (thePayload && thePayload.payloadBlob && thePayload.payloadBlob.length > 0) {\r\n                    var useSendHook_1 = !!_self.sendHook;\r\n                    var sendInterface_1 = _sendInterfaces[thePayload.sendType];\r\n                    // Send all data using a beacon style transport if closing mode is on or channel was teared down\r\n                    if (!_isBeaconPayload(thePayload.sendType) && thePayload.isBeacon && thePayload.sendReason === 2 /* SendRequestReason.Unload */) {\r\n                        sendInterface_1 = _sendInterfaces[2 /* EventSendType.SendBeacon */] || _sendInterfaces[3 /* EventSendType.SyncFetch */] || sendInterface_1;\r\n                    }\r\n                    var useHeaders_1 = _useHeaders;\r\n                    // Disable header usage if we know we are using sendBeacon as additional headers are not supported\r\n                    if (thePayload.isBeacon || sendInterface_1._transport === 3 /* TransportType.Beacon */) {\r\n                        useHeaders_1 = false;\r\n                    }\r\n                    var requestDetails_1 = _buildRequestDetails(thePayload, useHeaders_1);\r\n                    useHeaders_1 = useHeaders_1 || requestDetails_1.useHdrs;\r\n                    var sendEventStart_1 = getTime();\r\n                    doPerf(_core, function () { return \"HttpManager:_doPayloadSend\"; }, function () {\r\n                        // Increment the send attempt count and add timings after packaging (So it's not serialized in the 1st attempt)\r\n                        for (var batchLp = 0; batchLp < thePayload.batches.length; batchLp++) {\r\n                            var theBatch = thePayload.batches[batchLp];\r\n                            var theEvents = theBatch.events();\r\n                            for (var evtLp = 0; evtLp < theEvents.length; evtLp++) {\r\n                                var telemetryItem = theEvents[evtLp];\r\n                                if (_enableEventTimings) {\r\n                                    var timings = telemetryItem.timings = telemetryItem.timings || {};\r\n                                    _setTimingValue(timings, \"sendEventStart\", sendEventStart_1);\r\n                                    _setTimingValue(timings, \"serializationStart\", serializationStart);\r\n                                    _setTimingValue(timings, \"serializationCompleted\", serializationCompleted);\r\n                                }\r\n                                telemetryItem[strSendAttempt] > 0 ? telemetryItem[strSendAttempt]++ : telemetryItem[strSendAttempt] = 1;\r\n                            }\r\n                        }\r\n                        // Note: always sending this notification in a synchronous manner.\r\n                        _sendBatchesNotification(thePayload.batches, (1000 /* EventBatchNotificationReason.SendingUndefined */ + (sendReason || 0 /* SendRequestReason.Undefined */)), thePayload.sendType, true);\r\n                        // Disabling the use of const because of Issue: \r\n                        // - Task 9227844: [1DS] Some environments and packagers automatically \"freeze\" objects which are defined as const which causes any mutations to throw\r\n                        // eslint-disable-next-line prefer-const\r\n                        var orgPayloadData = {\r\n                            data: thePayload.payloadBlob,\r\n                            urlString: requestDetails_1.url,\r\n                            headers: requestDetails_1.hdrs,\r\n                            _thePayload: thePayload,\r\n                            _sendReason: sendReason,\r\n                            timeout: _xhrTimeout\r\n                        };\r\n                        if (!isUndefined(_disableXhrSync)) {\r\n                            orgPayloadData.disableXhrSync = !!_disableXhrSync;\r\n                        }\r\n                        // Only automatically add the following headers if already sending headers and we are not attempting to avoid an options call\r\n                        if (useHeaders_1) {\r\n                            if (!_hasHeader(orgPayloadData.headers, strCacheControl)) {\r\n                                orgPayloadData.headers[strCacheControl] = defaultCacheControl;\r\n                            }\r\n                            if (!_hasHeader(orgPayloadData.headers, strContentTypeHeader)) {\r\n                                orgPayloadData.headers[strContentTypeHeader] = defaultContentType;\r\n                            }\r\n                        }\r\n                        var sender = null;\r\n                        if (sendInterface_1) {\r\n                            // Send sync requests if the request is immediate or we are tearing down telemetry.\r\n                            sender = function (payload) {\r\n                                // Notify the clock skew manager that we are sending the first request (Potentially blocking all further requests)\r\n                                _clockSkewManager.firstRequestSent();\r\n                                var onComplete = function (status, headers) {\r\n                                    _retryRequestIfNeeded(status, headers, thePayload, sendReason);\r\n                                };\r\n                                var isSync = thePayload.isTeardown || thePayload.isSync;\r\n                                try {\r\n                                    sendInterface_1.sendPOST(payload, onComplete, isSync);\r\n                                    if (_self.sendListener) {\r\n                                        // Send the original payload to the listener\r\n                                        _self.sendListener(orgPayloadData, payload, isSync, thePayload.isBeacon);\r\n                                    }\r\n                                }\r\n                                catch (ex) {\r\n                                    _postManager.diagLog().warnToConsole(\"Unexpected exception sending payload. Ex:\" + dumpObj(ex));\r\n                                    _doOnComplete(onComplete, 0, {});\r\n                                }\r\n                            };\r\n                        }\r\n                        doPerf(_core, function () { return \"HttpManager:_doPayloadSend.sender\"; }, function () {\r\n                            if (sender) {\r\n                                if (thePayload.sendType === 0 /* EventSendType.Batched */) {\r\n                                    _outstandingRequests++;\r\n                                }\r\n                                // Only call the hook if it's defined and we are not using sendBeacon as additional headers are not supported\r\n                                if (useSendHook_1 && !thePayload.isBeacon && sendInterface_1._transport !== 3 /* TransportType.Beacon */) {\r\n                                    // Create a new IPayloadData that is sent into the hook method, so that the hook method\r\n                                    // can't change the object references to the orgPayloadData (it can still change the content -- mainly the headers)\r\n                                    // Disabling the use of const because of Issue: \r\n                                    // - Task 9227844: [1DS] Some environments and packagers automatically \"freeze\" objects which are defined as const which causes any mutations to throw\r\n                                    // eslint-disable-next-line prefer-const\r\n                                    var hookData_1 = {\r\n                                        data: orgPayloadData.data,\r\n                                        urlString: orgPayloadData.urlString,\r\n                                        headers: extend({}, orgPayloadData.headers),\r\n                                        timeout: orgPayloadData.timeout,\r\n                                        disableXhrSync: orgPayloadData.disableXhrSync\r\n                                    };\r\n                                    var senderCalled_1 = false;\r\n                                    doPerf(_core, function () { return \"HttpManager:_doPayloadSend.sendHook\"; }, function () {\r\n                                        try {\r\n                                            _self.sendHook(hookData_1, function (payload) {\r\n                                                senderCalled_1 = true;\r\n                                                // Add back the internal properties\r\n                                                if (!_customHttpInterface && !payload._thePayload) {\r\n                                                    payload._thePayload = payload._thePayload || orgPayloadData._thePayload;\r\n                                                    payload._sendReason = payload._sendReason || orgPayloadData._sendReason;\r\n                                                }\r\n                                                sender(payload);\r\n                                            }, thePayload.isSync || thePayload.isTeardown);\r\n                                        }\r\n                                        catch (ex) {\r\n                                            if (!senderCalled_1) {\r\n                                                // The hook never called the sender -- assume that it never will\r\n                                                sender(orgPayloadData);\r\n                                            }\r\n                                        }\r\n                                    });\r\n                                }\r\n                                else {\r\n                                    sender(orgPayloadData);\r\n                                }\r\n                            }\r\n                        });\r\n                    }, function () { return ({ thePayload: thePayload, serializationStart: serializationStart, serializationCompleted: serializationCompleted, sendReason: sendReason }); }, thePayload.isSync);\r\n                }\r\n                if (thePayload.sizeExceed && thePayload.sizeExceed.length > 0) {\r\n                    // Ensure that we send any discard events for oversize events even when there was no payload to send\r\n                    _sendBatchesNotification(thePayload.sizeExceed, 8003 /* EventBatchNotificationReason.SizeLimitExceeded */, thePayload.sendType);\r\n                }\r\n                if (thePayload.failedEvts && thePayload.failedEvts.length > 0) {\r\n                    // Ensure that we send any discard events for events that could not be serialized even when there was no payload to send\r\n                    _sendBatchesNotification(thePayload.failedEvts, 8002 /* EventBatchNotificationReason.InvalidEvent */, thePayload.sendType);\r\n                }\r\n            }\r\n            function _addEventCompletedTimings(theEvents, sendEventCompleted) {\r\n                if (_enableEventTimings) {\r\n                    arrForEach(theEvents, function (theEvent) {\r\n                        var timings = theEvent.timings = theEvent.timings || {};\r\n                        _setTimingValue(timings, \"sendEventCompleted\", sendEventCompleted);\r\n                    });\r\n                }\r\n            }\r\n            function _retryRequestIfNeeded(status, headers, thePayload, sendReason) {\r\n                var reason = 9000 /* EventBatchNotificationReason.ResponseFailure */;\r\n                var droppedBatches = null;\r\n                var isRetrying = false;\r\n                var backOffTrans = false;\r\n                try {\r\n                    var shouldRetry = true;\r\n                    if (typeof status !== strUndefined) {\r\n                        if (headers) {\r\n                            _clockSkewManager.setClockSkew(headers[strTimeDeltaHeader]);\r\n                            var killDuration = headers[strKillDurationHeader] || headers[\"kill-duration-seconds\"];\r\n                            arrForEach(_killSwitch.setKillSwitchTenants(headers[strKillTokensHeader], killDuration), function (killToken) {\r\n                                arrForEach(thePayload.batches, function (theBatch) {\r\n                                    if (theBatch.iKey() === killToken) {\r\n                                        // Make sure we have initialized the array\r\n                                        droppedBatches = droppedBatches || [];\r\n                                        // Create a copy of the batch with all of the events (and more importantly the action functions)\r\n                                        var removedEvents = theBatch.split(0);\r\n                                        // And then remove the events for the payload batch and reduce the actual number of processed\r\n                                        thePayload.numEvents -= removedEvents.count();\r\n                                        droppedBatches.push(removedEvents);\r\n                                    }\r\n                                });\r\n                            });\r\n                        }\r\n                        // Disabling triple-equals rule to avoid httpOverrides from failing because they are returning a string value\r\n                        // tslint:disable-next-line:triple-equals\r\n                        if (status == 200 || status == 204) {\r\n                            // Response was successfully sent\r\n                            reason = 200 /* EventBatchNotificationReason.Complete */;\r\n                            return;\r\n                        }\r\n                        if (!retryPolicyShouldRetryForStatus(status) || thePayload.numEvents <= 0) {\r\n                            // Only retry for specific response codes and if there is still events after kill switch processing\r\n                            shouldRetry = false;\r\n                        }\r\n                        // Derive the notification response from the HttpStatus Code\r\n                        reason = 9000 /* EventBatchNotificationReason.ResponseFailure */ + (status % 1000);\r\n                    }\r\n                    if (shouldRetry) {\r\n                        // The events should be retried -- so change notification to requeue them\r\n                        reason = 100 /* EventBatchNotificationReason.RequeueEvents */;\r\n                        var retryCount_1 = thePayload.retryCnt;\r\n                        if (thePayload.sendType === 0 /* EventSendType.Batched */) {\r\n                            // attempt to resend the entire batch\r\n                            if (retryCount_1 < maxRequestRetriesBeforeBackoff) {\r\n                                isRetrying = true;\r\n                                _doAction(function () {\r\n                                    // try to resend the same batches\r\n                                    if (thePayload.sendType === 0 /* EventSendType.Batched */) {\r\n                                        // Reduce the outstanding request count (if this was an async request) as we didn't reduce the count\r\n                                        // previously and we are about to reschedule our retry attempt and we want an attempt to send\r\n                                        // to occur, it's also required to ensure that a follow up handleRequestFinished() call occurs\r\n                                        _outstandingRequests--;\r\n                                    }\r\n                                    _sendBatches(thePayload.batches, retryCount_1 + 1, thePayload.isTeardown, _isUnloading ? 2 /* EventSendType.SendBeacon */ : thePayload.sendType, 5 /* SendRequestReason.Retry */);\r\n                                }, _isUnloading, retryPolicyGetMillisToBackoffForRetry(retryCount_1));\r\n                            }\r\n                            else {\r\n                                backOffTrans = true;\r\n                                if (_isUnloading) {\r\n                                    // we are unloading so don't try and requeue the events otherwise let the events get requeued and resent during the backoff sending\r\n                                    // This will also cause the events to be purged based on the priority (if necessary)\r\n                                    reason = 8001 /* EventBatchNotificationReason.NonRetryableStatus */;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                finally {\r\n                    if (!isRetrying) {\r\n                        // Make sure the clockSkewManager doesn't blocking further sending of requests once we have a proper response\r\n                        // This won't override any previously sent clock Skew value\r\n                        _clockSkewManager.setClockSkew();\r\n                        _handleRequestFinished(thePayload, reason, sendReason, backOffTrans);\r\n                    }\r\n                    _sendBatchesNotification(droppedBatches, 8004 /* EventBatchNotificationReason.KillSwitch */, thePayload.sendType);\r\n                }\r\n            }\r\n            function _handleRequestFinished(thePayload, batchReason, sendReason, backOffTrans) {\r\n                try {\r\n                    if (backOffTrans) {\r\n                        // Slow down the transmission requests\r\n                        _postManager._backOffTransmission();\r\n                    }\r\n                    if (batchReason === 200 /* EventBatchNotificationReason.Complete */) {\r\n                        if (!backOffTrans && !thePayload.isSync) {\r\n                            // We have a successful async response, so the lets open the floodgates\r\n                            // The reason for checking isSync is to avoid unblocking if beacon send occurred as it\r\n                            // doesn't wait for a response.\r\n                            _postManager._clearBackOff();\r\n                        }\r\n                        _addCompleteTimings(thePayload.batches);\r\n                    }\r\n                    // Send the notifications synchronously\r\n                    _sendBatchesNotification(thePayload.batches, batchReason, thePayload.sendType, true);\r\n                }\r\n                finally {\r\n                    if (thePayload.sendType === 0 /* EventSendType.Batched */) {\r\n                        // we always need to decrement this value otherwise the httpmanager locks up and won't send any more events\r\n                        _outstandingRequests--;\r\n                        // Don't try to send additional queued events if this is a retry operation as the retried\r\n                        // response will eventually call _handleRequestFinished for the retried event\r\n                        if (sendReason !== 5 /* SendRequestReason.Retry */) {\r\n                            // Try and send any other queued batched events\r\n                            _self.sendQueuedRequests(thePayload.sendType, sendReason);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            function _addCompleteTimings(theBatches) {\r\n                if (_enableEventTimings) {\r\n                    var sendEventCompleted_1 = getTime();\r\n                    arrForEach(theBatches, function (theBatch) {\r\n                        if (theBatch && theBatch.count() > 0) {\r\n                            _addEventCompletedTimings(theBatch.events(), sendEventCompleted_1);\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n            function _doAction(cb, isSync, interval) {\r\n                if (isSync) {\r\n                    cb();\r\n                }\r\n                else {\r\n                    timeoutOverride.set(cb, interval);\r\n                }\r\n            }\r\n            /**\r\n            * Converts the XHR getAllResponseHeaders to a map containing the header key and value.\r\n            */\r\n            // tslint:disable-next-line: align\r\n            function _convertAllHeadersToMap(headersString) {\r\n                var headers = {};\r\n                if (isString(headersString)) {\r\n                    var headersArray = strTrim(headersString).split(/[\\r\\n]+/);\r\n                    arrForEach(headersArray, function (headerEntry) {\r\n                        if (headerEntry) {\r\n                            var idx = headerEntry.indexOf(\": \");\r\n                            if (idx !== -1) {\r\n                                // The new spec has the headers returning all as lowercase -- but not all browsers do this yet\r\n                                var header = strTrim(headerEntry.substring(0, idx)).toLowerCase();\r\n                                var value = strTrim(headerEntry.substring(idx + 1));\r\n                                headers[header] = value;\r\n                            }\r\n                            else {\r\n                                headers[strTrim(headerEntry)] = 1;\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n                return headers;\r\n            }\r\n            function _getMsfpc(thePayload) {\r\n                for (var lp = 0; lp < thePayload.batches.length; lp++) {\r\n                    var msfpc = thePayload.batches[lp].Msfpc();\r\n                    if (msfpc) {\r\n                        return encodeURIComponent(msfpc);\r\n                    }\r\n                }\r\n                return \"\";\r\n            }\r\n            function _handleCollectorResponse(responseText) {\r\n                var responseHandlers = _self._responseHandlers;\r\n                try {\r\n                    for (var i = 0; i < responseHandlers.length; i++) {\r\n                        try {\r\n                            responseHandlers[i](responseText);\r\n                        }\r\n                        catch (e) {\r\n                            _throwInternal(_postManager.diagLog(), 1 /* eLoggingSeverity.CRITICAL */, 519 /* _eExtendedInternalMessageId.PostResponseHandler */, \"Response handler failed: \" + e);\r\n                        }\r\n                    }\r\n                    if (responseText) {\r\n                        var response = JSON.parse(responseText);\r\n                        if (isValueAssigned(response.webResult) && isValueAssigned(response.webResult[strMsfpc])) {\r\n                            // Set cookie\r\n                            _cookieMgr.set(\"MSFPC\", response.webResult[strMsfpc], 365 * 86400);\r\n                        }\r\n                    }\r\n                }\r\n                catch (ex) {\r\n                    // Doing nothing\r\n                }\r\n            }\r\n            function _sendBatchesNotification(theBatches, batchReason, sendType, sendSync) {\r\n                if (theBatches && theBatches.length > 0 && actions) {\r\n                    var theAction_1 = actions[_getNotificationAction(batchReason)];\r\n                    if (theAction_1) {\r\n                        var isSyncRequest_1 = sendType !== 0 /* EventSendType.Batched */;\r\n                        doPerf(_core, function () { return \"HttpManager:_sendBatchesNotification\"; }, function () {\r\n                            _doAction(function () {\r\n                                try {\r\n                                    theAction_1.call(actions, theBatches, batchReason, isSyncRequest_1, sendType);\r\n                                }\r\n                                catch (e) {\r\n                                    _throwInternal(_postManager.diagLog(), 1 /* eLoggingSeverity.CRITICAL */, 74 /* _eInternalMessageId.NotificationException */, \"send request notification failed: \" + e);\r\n                                }\r\n                            }, sendSync || isSyncRequest_1, 0);\r\n                        }, function () { return ({ batches: _createDebugBatches(theBatches), reason: batchReason, isSync: isSyncRequest_1, sendSync: sendSync, sendType: sendType }); }, !isSyncRequest_1);\r\n                    }\r\n                }\r\n            }\r\n            function _getNotificationAction(reason) {\r\n                var action = _eventActionMap[reason];\r\n                if (!isValueAssigned(action)) {\r\n                    action = strOther;\r\n                    if (reason >= 9000 /* EventBatchNotificationReason.ResponseFailure */ && reason <= 9999 /* EventBatchNotificationReason.ResponseFailureMax */) {\r\n                        action = strResponseFail;\r\n                    }\r\n                    else if (reason >= 8000 /* EventBatchNotificationReason.EventsDropped */ && reason <= 8999 /* EventBatchNotificationReason.EventsDroppedMax */) {\r\n                        action = strDropped;\r\n                    }\r\n                    else if (reason >= 1000 /* EventBatchNotificationReason.SendingUndefined */ && reason <= 1999 /* EventBatchNotificationReason.SendingEventMax */) {\r\n                        action = strSending;\r\n                    }\r\n                }\r\n                return action;\r\n            }\r\n        });\r\n    }\r\n// Removed Stub for HttpManager.prototype.initialize.\r\n// Removed Stub for HttpManager.prototype.addQueryStringParameter.\r\n// Removed Stub for HttpManager.prototype.addHeader.\r\n// Removed Stub for HttpManager.prototype.addBatch.\r\n// Removed Stub for HttpManager.prototype.canSendRequest.\r\n// Removed Stub for HttpManager.prototype.sendQueuedRequests.\r\n// Removed Stub for HttpManager.prototype.isCompletelyIdle.\r\n// Removed Stub for HttpManager.prototype.setUnloading.\r\n// Removed Stub for HttpManager.prototype.teardown.\r\n// Removed Stub for HttpManager.prototype.pause.\r\n// Removed Stub for HttpManager.prototype.resume.\r\n// Removed Stub for HttpManager.prototype.sendSynchronousBatch.\r\n    return HttpManager;\r\n}());\r\nexport { HttpManager };\r\n//# sourceMappingURL=HttpManager.js.map","/*\n * 1DS JS SDK POST plugin, 3.2.3\n * Copyright (c) Microsoft and contributors. All rights reserved.\n * (Microsoft Internal Only)\n */\n/**\r\n * TimeoutOverrideWrapper.ts\r\n * @author  Nev Wylie (newylie)\r\n * @copyright Microsoft 2022\r\n * Simple internal timeout wrapper\r\n */\r\nexport function defaultSetTimeout(callback, ms) {\r\n    var args = [];\r\n    for (var _i = 2; _i < arguments.length; _i++) {\r\n        args[_i - 2] = arguments[_i];\r\n    }\r\n    return setTimeout(callback, ms, args);\r\n}\r\nexport function defaultClearTimeout(timeoutId) {\r\n    clearTimeout(timeoutId);\r\n}\r\nexport function createTimeoutWrapper(argSetTimeout, argClearTimeout) {\r\n    return {\r\n        set: argSetTimeout || defaultSetTimeout,\r\n        clear: argClearTimeout || defaultClearTimeout\r\n    };\r\n}\r\n//# sourceMappingURL=TimeoutOverrideWrapper.js.map","/*\n * 1DS JS SDK POST plugin, 3.2.3\n * Copyright (c) Microsoft and contributors. All rights reserved.\n * (Microsoft Internal Only)\n */\nimport { __extendsFn as __extends } from \"@microsoft/applicationinsights-shims\";\r\n/**\r\n* PostManager.ts\r\n* @author Abhilash Panwar (abpanwar); Hector Hernandez (hectorh); Nev Wylie (newylie)\r\n* @copyright Microsoft 2018-2020\r\n*/\r\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\r\nimport { BaseTelemetryPlugin, EventsDiscardedReason, isValueAssigned, setProcessTelemetryTimings, arrForEach, doPerf, objForEachKey, optimizeObject, isChromium, getWindow, isNumber, mergeEvtNamespace, createUniqueNamespace, addPageUnloadEventListener, addPageHideEventListener, addPageShowEventListener, removePageUnloadEventListener, removePageHideEventListener, removePageShowEventListener, _throwInternal, objDefineAccessors } from \"@microsoft/1ds-core-js\";\r\nimport { RT_PROFILE, NRT_PROFILE, BE_PROFILE, } from \"./DataModels\";\r\nimport { EventBatch } from \"./EventBatch\";\r\nimport { HttpManager } from \"./HttpManager\";\r\nimport { retryPolicyGetMillisToBackoffForRetry } from \"./RetryPolicy\";\r\nimport { strMsaDeviceTicket } from \"./Constants\";\r\nimport { createTimeoutWrapper } from \"./TimeoutOverrideWrapper\";\r\nvar FlushCheckTimer = 0.250; // This needs to be in seconds, so this is 250ms\r\nvar MaxNumberEventPerBatch = 500;\r\nvar EventsDroppedAtOneTime = 20;\r\nvar MaxSendAttempts = 6;\r\nvar MaxSyncUnloadSendAttempts = 2; // Assuming 2 based on beforeunload and unload\r\nvar MaxBackoffCount = 4;\r\nvar MaxConnections = 2;\r\nvar MaxRequestRetriesBeforeBackoff = 1;\r\nvar strEventsDiscarded = \"eventsDiscarded\";\r\nvar strOverrideInstrumentationKey = \"overrideInstrumentationKey\";\r\nvar strMaxEventRetryAttempts = \"maxEventRetryAttempts\";\r\nvar strMaxUnloadEventRetryAttempts = \"maxUnloadEventRetryAttempts\";\r\nvar strAddUnloadCb = \"addUnloadCb\";\r\n/**\r\n * Class that manages adding events to inbound queues and batching of events\r\n * into requests.\r\n */\r\nvar PostChannel = /** @class */ (function (_super) {\r\n    __extends(PostChannel, _super);\r\n    function PostChannel() {\r\n        var _this = _super.call(this) || this;\r\n        _this.identifier = \"PostChannel\";\r\n        _this.priority = 1011;\r\n        _this.version = '3.2.3';\r\n        var _config;\r\n        var _isTeardownCalled = false;\r\n        var _flushCallbackQueue = [];\r\n        var _flushCallbackTimerId = null;\r\n        var _paused = false;\r\n        var _immediateQueueSize = 0;\r\n        var _immediateQueueSizeLimit = 500;\r\n        var _queueSize = 0;\r\n        var _queueSizeLimit = 10000;\r\n        var _profiles = {};\r\n        var _currentProfile = RT_PROFILE;\r\n        var _scheduledTimerId = null;\r\n        var _immediateTimerId = null;\r\n        var _currentBackoffCount = 0;\r\n        var _timerCount = 0;\r\n        var _xhrOverride;\r\n        var _httpManager;\r\n        var _batchQueues = {};\r\n        var _autoFlushEventsLimit;\r\n        // either MaxBatchSize * (1+ Max Connections) or _queueLimit / 6 (where 3 latency Queues [normal, realtime, cost deferred] * 2 [allow half full -- allow for retry])\r\n        var _autoFlushBatchLimit;\r\n        var _delayedBatchSendLatency = -1;\r\n        var _delayedBatchReason;\r\n        var _optimizeObject = true;\r\n        var _isPageUnloadTriggered = false;\r\n        var _maxEventSendAttempts = MaxSendAttempts;\r\n        var _maxUnloadEventSendAttempts = MaxSyncUnloadSendAttempts;\r\n        var _evtNamespace;\r\n        var _timeoutWrapper;\r\n        dynamicProto(PostChannel, _this, function (_self, _base) {\r\n            _initDefaults();\r\n            // Special internal method to allow the DebugPlugin to hook embedded objects\r\n            _self[\"_getDbgPlgTargets\"] = function () {\r\n                return [_httpManager];\r\n            };\r\n            _self.initialize = function (coreConfig, core, extensions) {\r\n                doPerf(core, function () { return \"PostChannel:initialize\"; }, function () {\r\n                    var extendedCore = core;\r\n                    _base.initialize(coreConfig, core, extensions);\r\n                    try {\r\n                        var hasAddUnloadCb = !!core[strAddUnloadCb];\r\n                        _evtNamespace = mergeEvtNamespace(createUniqueNamespace(_self.identifier), core.evtNamespace && core.evtNamespace());\r\n                        var ctx = _self._getTelCtx();\r\n                        coreConfig.extensionConfig[_self.identifier] = coreConfig.extensionConfig[_self.identifier] || {};\r\n                        _config = ctx.getExtCfg(_self.identifier);\r\n                        _timeoutWrapper = createTimeoutWrapper(_config.setTimeoutOverride, _config.clearTimeoutOverride);\r\n                        // Only try and use the optimizeObject() if this appears to be a chromium based browser and it has not been explicitly disabled\r\n                        _optimizeObject = !_config.disableOptimizeObj && isChromium();\r\n                        _hookWParam(extendedCore);\r\n                        if (_config.eventsLimitInMem > 0) {\r\n                            _queueSizeLimit = _config.eventsLimitInMem;\r\n                        }\r\n                        if (_config.immediateEventLimit > 0) {\r\n                            _immediateQueueSizeLimit = _config.immediateEventLimit;\r\n                        }\r\n                        if (_config.autoFlushEventsLimit > 0) {\r\n                            _autoFlushEventsLimit = _config.autoFlushEventsLimit;\r\n                        }\r\n                        if (isNumber(_config[strMaxEventRetryAttempts])) {\r\n                            _maxEventSendAttempts = _config[strMaxEventRetryAttempts];\r\n                        }\r\n                        if (isNumber(_config[strMaxUnloadEventRetryAttempts])) {\r\n                            _maxUnloadEventSendAttempts = _config[strMaxUnloadEventRetryAttempts];\r\n                        }\r\n                        _setAutoLimits();\r\n                        if (_config.httpXHROverride && _config.httpXHROverride.sendPOST) {\r\n                            _xhrOverride = _config.httpXHROverride;\r\n                        }\r\n                        if (isValueAssigned(coreConfig.anonCookieName)) {\r\n                            _httpManager.addQueryStringParameter(\"anoncknm\", coreConfig.anonCookieName);\r\n                        }\r\n                        _httpManager.sendHook = _config.payloadPreprocessor;\r\n                        _httpManager.sendListener = _config.payloadListener;\r\n                        // Override endpointUrl if provided in Post config\r\n                        var endpointUrl = _config.overrideEndpointUrl ? _config.overrideEndpointUrl : coreConfig.endpointUrl;\r\n                        _self._notificationManager = coreConfig.extensionConfig.NotificationManager;\r\n                        _httpManager.initialize(endpointUrl, _self.core, _self, _xhrOverride, _config);\r\n                        var excludePageUnloadEvents = coreConfig.disablePageUnloadEvents || [];\r\n                        // When running in Web browsers try to send all telemetry if page is unloaded\r\n                        addPageUnloadEventListener(_handleUnloadEvents, excludePageUnloadEvents, _evtNamespace);\r\n                        addPageHideEventListener(_handleUnloadEvents, excludePageUnloadEvents, _evtNamespace);\r\n                        addPageShowEventListener(_handleShowEvents, coreConfig.disablePageShowEvents, _evtNamespace);\r\n                    }\r\n                    catch (e) {\r\n                        // resetting the initialized state because of failure\r\n                        _self.setInitialized(false);\r\n                        throw e;\r\n                    }\r\n                }, function () { return ({ coreConfig: coreConfig, core: core, extensions: extensions }); });\r\n            };\r\n            _self.processTelemetry = function (ev, itemCtx) {\r\n                setProcessTelemetryTimings(ev, _self.identifier);\r\n                itemCtx = _self._getTelCtx(itemCtx);\r\n                // Get the channel instance from the current request/instance\r\n                var channelConfig = itemCtx.getExtCfg(_self.identifier);\r\n                // DisableTelemetry was defined in the config provided during initialization\r\n                var disableTelemetry = !!_config.disableTelemetry;\r\n                if (channelConfig) {\r\n                    // DisableTelemetry is defined in the config for this request/instance\r\n                    disableTelemetry = disableTelemetry || !!channelConfig.disableTelemetry;\r\n                }\r\n                var event = ev;\r\n                if (!disableTelemetry && !_isTeardownCalled) {\r\n                    // Override iKey if provided in Post config if provided for during initialization\r\n                    if (_config[strOverrideInstrumentationKey]) {\r\n                        event.iKey = _config[strOverrideInstrumentationKey];\r\n                    }\r\n                    // Override iKey if provided in Post config if provided for this instance\r\n                    if (channelConfig && channelConfig[strOverrideInstrumentationKey]) {\r\n                        event.iKey = channelConfig[strOverrideInstrumentationKey];\r\n                    }\r\n                    _addEventToQueues(event, true);\r\n                    if (_isPageUnloadTriggered) {\r\n                        // Unload event has been received so we need to try and flush new events\r\n                        _releaseAllQueues(2 /* EventSendType.SendBeacon */, 2 /* SendRequestReason.Unload */);\r\n                    }\r\n                    else {\r\n                        _scheduleTimer();\r\n                    }\r\n                }\r\n                _self.processNext(event, itemCtx);\r\n            };\r\n            _self._doTeardown = function (unloadCtx, unloadState) {\r\n                _releaseAllQueues(2 /* EventSendType.SendBeacon */, 2 /* SendRequestReason.Unload */);\r\n                _isTeardownCalled = true;\r\n                _httpManager.teardown();\r\n                removePageUnloadEventListener(null, _evtNamespace);\r\n                removePageHideEventListener(null, _evtNamespace);\r\n                removePageShowEventListener(null, _evtNamespace);\r\n                // Just register to remove all events associated with this namespace\r\n                _initDefaults();\r\n            };\r\n            function _hookWParam(extendedCore) {\r\n                var existingGetWParamMethod = extendedCore.getWParam;\r\n                extendedCore.getWParam = function () {\r\n                    var wparam = 0;\r\n                    if (_config.ignoreMc1Ms0CookieProcessing) {\r\n                        wparam = wparam | 2;\r\n                    }\r\n                    return wparam | existingGetWParamMethod();\r\n                };\r\n            }\r\n            // Moving event handlers out from the initialize closure so that any local variables can be garbage collected\r\n            function _handleUnloadEvents(evt) {\r\n                var theEvt = evt || getWindow().event; // IE 8 does not pass the event\r\n                if (theEvt.type !== \"beforeunload\") {\r\n                    // Only set the unload trigger if not beforeunload event as beforeunload can be cancelled while the other events can't\r\n                    _isPageUnloadTriggered = true;\r\n                    _httpManager.setUnloading(_isPageUnloadTriggered);\r\n                }\r\n                _releaseAllQueues(2 /* EventSendType.SendBeacon */, 2 /* SendRequestReason.Unload */);\r\n            }\r\n            function _handleShowEvents(evt) {\r\n                // Handle the page becoming visible again\r\n                _isPageUnloadTriggered = false;\r\n                _httpManager.setUnloading(_isPageUnloadTriggered);\r\n            }\r\n            function _addEventToQueues(event, append) {\r\n                // If send attempt field is undefined we should set it to 0.\r\n                if (!event.sendAttempt) {\r\n                    event.sendAttempt = 0;\r\n                }\r\n                // Add default latency\r\n                if (!event.latency) {\r\n                    event.latency = 1 /* EventLatencyValue.Normal */;\r\n                }\r\n                // Remove extra AI properties if present\r\n                if (event.ext && event.ext[\"trace\"]) {\r\n                    delete (event.ext[\"trace\"]);\r\n                }\r\n                if (event.ext && event.ext[\"user\"] && event.ext[\"user\"][\"id\"]) {\r\n                    delete (event.ext[\"user\"][\"id\"]);\r\n                }\r\n                // v8 performance optimization for iterating over the keys\r\n                if (_optimizeObject) {\r\n                    event.ext = optimizeObject(event.ext);\r\n                    if (event.baseData) {\r\n                        event.baseData = optimizeObject(event.baseData);\r\n                    }\r\n                    if (event.data) {\r\n                        event.data = optimizeObject(event.data);\r\n                    }\r\n                }\r\n                if (event.sync) {\r\n                    // If the transmission is backed off then do not send synchronous events.\r\n                    // We will convert these events to Real time latency instead.\r\n                    if (_currentBackoffCount || _paused) {\r\n                        event.latency = 3 /* EventLatencyValue.RealTime */;\r\n                        event.sync = false;\r\n                    }\r\n                    else {\r\n                        // Log the event synchronously\r\n                        if (_httpManager) {\r\n                            // v8 performance optimization for iterating over the keys\r\n                            if (_optimizeObject) {\r\n                                event = optimizeObject(event);\r\n                            }\r\n                            _httpManager.sendSynchronousBatch(EventBatch.create(event.iKey, [event]), event.sync === true ? 1 /* EventSendType.Synchronous */ : event.sync, 3 /* SendRequestReason.SyncEvent */);\r\n                            return;\r\n                        }\r\n                    }\r\n                }\r\n                var evtLatency = event.latency;\r\n                var queueSize = _queueSize;\r\n                var queueLimit = _queueSizeLimit;\r\n                if (evtLatency === 4 /* EventLatencyValue.Immediate */) {\r\n                    queueSize = _immediateQueueSize;\r\n                    queueLimit = _immediateQueueSizeLimit;\r\n                }\r\n                var eventDropped = false;\r\n                // Only add the event if the queue isn't full or it's a direct event (which don't add to the queue sizes)\r\n                if (queueSize < queueLimit) {\r\n                    eventDropped = !_addEventToProperQueue(event, append);\r\n                }\r\n                else {\r\n                    var dropLatency = 1 /* EventLatencyValue.Normal */;\r\n                    var dropNumber = EventsDroppedAtOneTime;\r\n                    if (evtLatency === 4 /* EventLatencyValue.Immediate */) {\r\n                        // Only drop other immediate events as they are not technically sharing the general queue\r\n                        dropLatency = 4 /* EventLatencyValue.Immediate */;\r\n                        dropNumber = 1;\r\n                    }\r\n                    // Drop old event from lower or equal latency\r\n                    eventDropped = true;\r\n                    if (_dropEventWithLatencyOrLess(event.iKey, event.latency, dropLatency, dropNumber)) {\r\n                        eventDropped = !_addEventToProperQueue(event, append);\r\n                    }\r\n                }\r\n                if (eventDropped) {\r\n                    // Can't drop events from current queues because the all the slots are taken by queues that are being flushed.\r\n                    _notifyEvents(strEventsDiscarded, [event], EventsDiscardedReason.QueueFull);\r\n                }\r\n            }\r\n            _self.setEventQueueLimits = function (eventLimit, autoFlushLimit) {\r\n                _queueSizeLimit = eventLimit > 0 ? eventLimit : 10000;\r\n                _autoFlushEventsLimit = autoFlushLimit > 0 ? autoFlushLimit : 0;\r\n                _setAutoLimits();\r\n                // We only do this check here as during normal event addition if the queue is > then events start getting dropped\r\n                var doFlush = _queueSize > eventLimit;\r\n                if (!doFlush && _autoFlushBatchLimit > 0) {\r\n                    // Check the auto flush max batch size\r\n                    for (var latency = 1 /* EventLatencyValue.Normal */; !doFlush && latency <= 3 /* EventLatencyValue.RealTime */; latency++) {\r\n                        var batchQueue = _batchQueues[latency];\r\n                        if (batchQueue && batchQueue.batches) {\r\n                            arrForEach(batchQueue.batches, function (theBatch) {\r\n                                if (theBatch && theBatch.count() >= _autoFlushBatchLimit) {\r\n                                    // If any 1 batch is > than the limit then trigger an auto flush\r\n                                    doFlush = true;\r\n                                }\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n                _performAutoFlush(true, doFlush);\r\n            };\r\n            _self.pause = function () {\r\n                _clearScheduledTimer();\r\n                _paused = true;\r\n                _httpManager.pause();\r\n            };\r\n            _self.resume = function () {\r\n                _paused = false;\r\n                _httpManager.resume();\r\n                _scheduleTimer();\r\n            };\r\n            _self.addResponseHandler = function (responseHandler) {\r\n                _httpManager._responseHandlers.push(responseHandler);\r\n            };\r\n            _self._loadTransmitProfiles = function (profiles) {\r\n                _resetTransmitProfiles();\r\n                objForEachKey(profiles, function (profileName, profileValue) {\r\n                    var profLen = profileValue.length;\r\n                    if (profLen >= 2) {\r\n                        var directValue = (profLen > 2 ? profileValue[2] : 0);\r\n                        profileValue.splice(0, profLen - 2);\r\n                        // Make sure if a higher latency is set to not send then don't send lower latency\r\n                        if (profileValue[1] < 0) {\r\n                            profileValue[0] = -1;\r\n                        }\r\n                        // Make sure each latency is multiple of the latency higher then it. If not a multiple\r\n                        // we round up so that it becomes a multiple.\r\n                        if (profileValue[1] > 0 && profileValue[0] > 0) {\r\n                            var timerMultiplier = profileValue[0] / profileValue[1];\r\n                            profileValue[0] = Math.ceil(timerMultiplier) * profileValue[1];\r\n                        }\r\n                        // Add back the direct profile timeout\r\n                        if (directValue >= 0 && profileValue[1] >= 0 && directValue > profileValue[1]) {\r\n                            // Make sure if it's not disabled (< 0) then make sure it's not larger than RealTime\r\n                            directValue = profileValue[1];\r\n                        }\r\n                        profileValue.push(directValue);\r\n                        _profiles[profileName] = profileValue;\r\n                    }\r\n                });\r\n            };\r\n            _self.flush = function (async, callback, sendReason) {\r\n                if (async === void 0) { async = true; }\r\n                if (!_paused) {\r\n                    sendReason = sendReason || 1 /* SendRequestReason.ManualFlush */;\r\n                    if (async) {\r\n                        if (_flushCallbackTimerId == null) {\r\n                            // Clear the normal schedule timer as we are going to try and flush ASAP\r\n                            _clearScheduledTimer();\r\n                            // Move all queued events to the HttpManager so that we don't discard new events (Auto flush scenario)\r\n                            _queueBatches(1 /* EventLatencyValue.Normal */, 0 /* EventSendType.Batched */, sendReason);\r\n                            _flushCallbackTimerId = _createTimer(function () {\r\n                                _flushCallbackTimerId = null;\r\n                                _flushImpl(callback, sendReason);\r\n                            }, 0);\r\n                        }\r\n                        else {\r\n                            // Even if null (no callback) this will ensure after the flushImpl finishes waiting\r\n                            // for a completely idle connection it will attempt to re-flush any queued events on the next cycle\r\n                            _flushCallbackQueue.push(callback);\r\n                        }\r\n                    }\r\n                    else {\r\n                        // Clear the normal schedule timer as we are going to try and flush ASAP\r\n                        var cleared = _clearScheduledTimer();\r\n                        // Now cause all queued events to be sent synchronously\r\n                        _sendEventsForLatencyAndAbove(1 /* EventLatencyValue.Normal */, 1 /* EventSendType.Synchronous */, sendReason);\r\n                        if (callback !== null && callback !== undefined) {\r\n                            callback();\r\n                        }\r\n                        if (cleared) {\r\n                            // restart the normal event timer if it was cleared\r\n                            _scheduleTimer();\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n            _self.setMsaAuthTicket = function (ticket) {\r\n                _httpManager.addHeader(strMsaDeviceTicket, ticket);\r\n            };\r\n            _self.hasEvents = _hasEvents;\r\n            _self._setTransmitProfile = function (profileName) {\r\n                if (_currentProfile !== profileName && _profiles[profileName] !== undefined) {\r\n                    _clearScheduledTimer();\r\n                    _currentProfile = profileName;\r\n                    _scheduleTimer();\r\n                }\r\n            };\r\n            /**\r\n             * Batch and send events currently in the queue for the given latency.\r\n             * @param latency - Latency for which to send events.\r\n             */\r\n            function _sendEventsForLatencyAndAbove(latency, sendType, sendReason) {\r\n                var queued = _queueBatches(latency, sendType, sendReason);\r\n                // Always trigger the request as while the post channel may not have queued additional events, the httpManager may already have waiting events\r\n                _httpManager.sendQueuedRequests(sendType, sendReason);\r\n                return queued;\r\n            }\r\n            function _hasEvents() {\r\n                return _queueSize > 0;\r\n            }\r\n            /**\r\n             * Try to schedule the timer after which events will be sent. If there are\r\n             * no events to be sent, or there is already a timer scheduled, or the\r\n             * http manager doesn't have any idle connections this method is no-op.\r\n             */\r\n            function _scheduleTimer() {\r\n                // If we had previously attempted to send requests, but the http manager didn't have any idle connections then the requests where delayed\r\n                // so try and requeue then again now\r\n                if (_delayedBatchSendLatency >= 0 && _queueBatches(_delayedBatchSendLatency, 0 /* EventSendType.Batched */, _delayedBatchReason)) {\r\n                    _httpManager.sendQueuedRequests(0 /* EventSendType.Batched */, _delayedBatchReason);\r\n                }\r\n                if (_immediateQueueSize > 0 && !_immediateTimerId && !_paused) {\r\n                    // During initialization _profiles enforce that the direct [2] is less than real time [1] timer value\r\n                    // If the immediateTimeout is disabled the immediate events will be sent with Real Time events\r\n                    var immediateTimeOut = _profiles[_currentProfile][2];\r\n                    if (immediateTimeOut >= 0) {\r\n                        _immediateTimerId = _createTimer(function () {\r\n                            _immediateTimerId = null;\r\n                            // Only try to send direct events\r\n                            _sendEventsForLatencyAndAbove(4 /* EventLatencyValue.Immediate */, 0 /* EventSendType.Batched */, 1 /* SendRequestReason.NormalSchedule */);\r\n                            _scheduleTimer();\r\n                        }, immediateTimeOut);\r\n                    }\r\n                }\r\n                // During initialization the _profiles enforce that the normal [0] is a multiple of the real time [1] timer value\r\n                var timeOut = _profiles[_currentProfile][1];\r\n                if (!_scheduledTimerId && !_flushCallbackTimerId && timeOut >= 0 && !_paused) {\r\n                    if (_hasEvents()) {\r\n                        _scheduledTimerId = _createTimer(function () {\r\n                            _scheduledTimerId = null;\r\n                            _sendEventsForLatencyAndAbove(_timerCount === 0 ? 3 /* EventLatencyValue.RealTime */ : 1 /* EventLatencyValue.Normal */, 0 /* EventSendType.Batched */, 1 /* SendRequestReason.NormalSchedule */);\r\n                            // Increment the count for next cycle\r\n                            _timerCount++;\r\n                            _timerCount %= 2;\r\n                            _scheduleTimer();\r\n                        }, timeOut);\r\n                    }\r\n                    else {\r\n                        _timerCount = 0;\r\n                    }\r\n                }\r\n            }\r\n            _self._backOffTransmission = function () {\r\n                if (_currentBackoffCount < MaxBackoffCount) {\r\n                    _currentBackoffCount++;\r\n                    _clearScheduledTimer();\r\n                    _scheduleTimer();\r\n                }\r\n            };\r\n            _self._clearBackOff = function () {\r\n                if (_currentBackoffCount) {\r\n                    _currentBackoffCount = 0;\r\n                    _clearScheduledTimer();\r\n                    _scheduleTimer();\r\n                }\r\n            };\r\n            function _initDefaults() {\r\n                _config = null;\r\n                _isTeardownCalled = false;\r\n                _flushCallbackQueue = [];\r\n                _flushCallbackTimerId = null;\r\n                _paused = false;\r\n                _immediateQueueSize = 0;\r\n                _immediateQueueSizeLimit = 500;\r\n                _queueSize = 0;\r\n                _queueSizeLimit = 10000;\r\n                _profiles = {};\r\n                _currentProfile = RT_PROFILE;\r\n                _scheduledTimerId = null;\r\n                _immediateTimerId = null;\r\n                _currentBackoffCount = 0;\r\n                _timerCount = 0;\r\n                _xhrOverride = null;\r\n                _batchQueues = {};\r\n                _autoFlushEventsLimit = undefined;\r\n                // either MaxBatchSize * (1+ Max Connections) or _queueLimit / 6 (where 3 latency Queues [normal, realtime, cost deferred] * 2 [allow half full -- allow for retry])\r\n                _autoFlushBatchLimit = 0;\r\n                _delayedBatchSendLatency = -1;\r\n                _delayedBatchReason = null;\r\n                _optimizeObject = true;\r\n                _isPageUnloadTriggered = false;\r\n                _maxEventSendAttempts = MaxSendAttempts;\r\n                _maxUnloadEventSendAttempts = MaxSyncUnloadSendAttempts;\r\n                _evtNamespace = null;\r\n                _timeoutWrapper = createTimeoutWrapper();\r\n                _httpManager = new HttpManager(MaxNumberEventPerBatch, MaxConnections, MaxRequestRetriesBeforeBackoff, {\r\n                    requeue: _requeueEvents,\r\n                    send: _sendingEvent,\r\n                    sent: _eventsSentEvent,\r\n                    drop: _eventsDropped,\r\n                    rspFail: _eventsResponseFail,\r\n                    oth: _otherEvent\r\n                }, _timeoutWrapper);\r\n                _initializeProfiles();\r\n                _clearQueues();\r\n                _setAutoLimits();\r\n            }\r\n            function _createTimer(theTimerFunc, timeOut) {\r\n                // If the transmission is backed off make the timer at least 1 sec to allow for back off.\r\n                if (timeOut === 0 && _currentBackoffCount) {\r\n                    timeOut = 1;\r\n                }\r\n                var timerMultiplier = 1000;\r\n                if (_currentBackoffCount) {\r\n                    timerMultiplier = retryPolicyGetMillisToBackoffForRetry(_currentBackoffCount - 1);\r\n                }\r\n                return _timeoutWrapper.set(theTimerFunc, timeOut * timerMultiplier);\r\n            }\r\n            function _clearScheduledTimer() {\r\n                if (_scheduledTimerId !== null) {\r\n                    _timeoutWrapper.clear(_scheduledTimerId);\r\n                    _scheduledTimerId = null;\r\n                    _timerCount = 0;\r\n                    return true;\r\n                }\r\n                return false;\r\n            }\r\n            // Try to send all queued events using beacons if available\r\n            function _releaseAllQueues(sendType, sendReason) {\r\n                _clearScheduledTimer();\r\n                // Cancel all flush callbacks\r\n                if (_flushCallbackTimerId) {\r\n                    _timeoutWrapper.clear(_flushCallbackTimerId);\r\n                    _flushCallbackTimerId = null;\r\n                }\r\n                if (!_paused) {\r\n                    // Queue all the remaining requests to be sent. The requests will be sent using HTML5 Beacons if they are available.\r\n                    _sendEventsForLatencyAndAbove(1 /* EventLatencyValue.Normal */, sendType, sendReason);\r\n                }\r\n            }\r\n            /**\r\n             * Add empty queues for all latencies in the inbound queues map. This is called\r\n             * when Transmission Manager is being flushed. This ensures that new events added\r\n             * after flush are stored separately till we flush the current events.\r\n             */\r\n            function _clearQueues() {\r\n                _batchQueues[4 /* EventLatencyValue.Immediate */] = {\r\n                    batches: [],\r\n                    iKeyMap: {}\r\n                };\r\n                _batchQueues[3 /* EventLatencyValue.RealTime */] = {\r\n                    batches: [],\r\n                    iKeyMap: {}\r\n                };\r\n                _batchQueues[2 /* EventLatencyValue.CostDeferred */] = {\r\n                    batches: [],\r\n                    iKeyMap: {}\r\n                };\r\n                _batchQueues[1 /* EventLatencyValue.Normal */] = {\r\n                    batches: [],\r\n                    iKeyMap: {}\r\n                };\r\n            }\r\n            function _getEventBatch(iKey, latency, create) {\r\n                var batchQueue = _batchQueues[latency];\r\n                if (!batchQueue) {\r\n                    latency = 1 /* EventLatencyValue.Normal */;\r\n                    batchQueue = _batchQueues[latency];\r\n                }\r\n                var eventBatch = batchQueue.iKeyMap[iKey];\r\n                if (!eventBatch && create) {\r\n                    eventBatch = EventBatch.create(iKey);\r\n                    batchQueue.batches.push(eventBatch);\r\n                    batchQueue.iKeyMap[iKey] = eventBatch;\r\n                }\r\n                return eventBatch;\r\n            }\r\n            function _performAutoFlush(isAsync, doFlush) {\r\n                // Only perform the auto flush check if the httpManager has an idle connection and we are not in a backoff situation\r\n                if (_httpManager.canSendRequest() && !_currentBackoffCount) {\r\n                    if (_autoFlushEventsLimit > 0 && _queueSize > _autoFlushEventsLimit) {\r\n                        // Force flushing\r\n                        doFlush = true;\r\n                    }\r\n                    if (doFlush && _flushCallbackTimerId == null) {\r\n                        // Auto flush the queue\r\n                        _self.flush(isAsync, null, 20 /* SendRequestReason.MaxQueuedEvents */);\r\n                    }\r\n                }\r\n            }\r\n            function _addEventToProperQueue(event, append) {\r\n                // v8 performance optimization for iterating over the keys\r\n                if (_optimizeObject) {\r\n                    event = optimizeObject(event);\r\n                }\r\n                var latency = event.latency;\r\n                var eventBatch = _getEventBatch(event.iKey, latency, true);\r\n                if (eventBatch.addEvent(event)) {\r\n                    if (latency !== 4 /* EventLatencyValue.Immediate */) {\r\n                        _queueSize++;\r\n                        // Check for auto flushing based on total events in the queue, but not for requeued or retry events\r\n                        if (append && event.sendAttempt === 0) {\r\n                            // Force the flushing of the batch if the batch (specific iKey / latency combination) reaches it's auto flush limit\r\n                            _performAutoFlush(!event.sync, _autoFlushBatchLimit > 0 && eventBatch.count() >= _autoFlushBatchLimit);\r\n                        }\r\n                    }\r\n                    else {\r\n                        // Direct events don't need auto flushing as they are scheduled (by default) for immediate delivery\r\n                        _immediateQueueSize++;\r\n                    }\r\n                    return true;\r\n                }\r\n                return false;\r\n            }\r\n            function _dropEventWithLatencyOrLess(iKey, latency, currentLatency, dropNumber) {\r\n                while (currentLatency <= latency) {\r\n                    var eventBatch = _getEventBatch(iKey, latency, true);\r\n                    if (eventBatch && eventBatch.count() > 0) {\r\n                        // Dropped oldest events from lowest possible latency\r\n                        var droppedEvents = eventBatch.split(0, dropNumber);\r\n                        var droppedCount = droppedEvents.count();\r\n                        if (droppedCount > 0) {\r\n                            if (currentLatency === 4 /* EventLatencyValue.Immediate */) {\r\n                                _immediateQueueSize -= droppedCount;\r\n                            }\r\n                            else {\r\n                                _queueSize -= droppedCount;\r\n                            }\r\n                            _notifyBatchEvents(strEventsDiscarded, [droppedEvents], EventsDiscardedReason.QueueFull);\r\n                            return true;\r\n                        }\r\n                    }\r\n                    currentLatency++;\r\n                }\r\n                // Unable to drop any events -- lets just make sure the queue counts are correct to avoid exhaustion\r\n                _resetQueueCounts();\r\n                return false;\r\n            }\r\n            /**\r\n             * Internal helper to reset the queue counts, used as a backstop to avoid future queue exhaustion errors\r\n             * that might occur because of counting issues.\r\n             */\r\n            function _resetQueueCounts() {\r\n                var immediateQueue = 0;\r\n                var normalQueue = 0;\r\n                var _loop_1 = function (latency) {\r\n                    var batchQueue = _batchQueues[latency];\r\n                    if (batchQueue && batchQueue.batches) {\r\n                        arrForEach(batchQueue.batches, function (theBatch) {\r\n                            if (latency === 4 /* EventLatencyValue.Immediate */) {\r\n                                immediateQueue += theBatch.count();\r\n                            }\r\n                            else {\r\n                                normalQueue += theBatch.count();\r\n                            }\r\n                        });\r\n                    }\r\n                };\r\n                for (var latency = 1 /* EventLatencyValue.Normal */; latency <= 4 /* EventLatencyValue.Immediate */; latency++) {\r\n                    _loop_1(latency);\r\n                }\r\n                _queueSize = normalQueue;\r\n                _immediateQueueSize = immediateQueue;\r\n            }\r\n            function _queueBatches(latency, sendType, sendReason) {\r\n                var eventsQueued = false;\r\n                var isAsync = sendType === 0 /* EventSendType.Batched */;\r\n                // Only queue batches (to the HttpManager) if this is a sync request or the httpManager has an idle connection\r\n                // Thus keeping the events within the PostChannel until the HttpManager has a connection available\r\n                // This is so we can drop \"old\" events if the queue is getting full because we can't successfully send events\r\n                if (!isAsync || _httpManager.canSendRequest()) {\r\n                    doPerf(_self.core, function () { return \"PostChannel._queueBatches\"; }, function () {\r\n                        var droppedEvents = [];\r\n                        var latencyToProcess = 4 /* EventLatencyValue.Immediate */;\r\n                        while (latencyToProcess >= latency) {\r\n                            var batchQueue = _batchQueues[latencyToProcess];\r\n                            if (batchQueue && batchQueue.batches && batchQueue.batches.length > 0) {\r\n                                arrForEach(batchQueue.batches, function (theBatch) {\r\n                                    // Add the batch to the http manager to send the requests\r\n                                    if (!_httpManager.addBatch(theBatch)) {\r\n                                        // The events from this iKey are being dropped (killed)\r\n                                        droppedEvents = droppedEvents.concat(theBatch.events());\r\n                                    }\r\n                                    else {\r\n                                        eventsQueued = eventsQueued || (theBatch && theBatch.count() > 0);\r\n                                    }\r\n                                    if (latencyToProcess === 4 /* EventLatencyValue.Immediate */) {\r\n                                        _immediateQueueSize -= theBatch.count();\r\n                                    }\r\n                                    else {\r\n                                        _queueSize -= theBatch.count();\r\n                                    }\r\n                                });\r\n                                // Remove all batches from this Queue\r\n                                batchQueue.batches = [];\r\n                                batchQueue.iKeyMap = {};\r\n                            }\r\n                            latencyToProcess--;\r\n                        }\r\n                        if (droppedEvents.length > 0) {\r\n                            _notifyEvents(strEventsDiscarded, droppedEvents, EventsDiscardedReason.KillSwitch);\r\n                        }\r\n                        if (eventsQueued && _delayedBatchSendLatency >= latency) {\r\n                            // We have queued events at the same level as the delayed values so clear the setting\r\n                            _delayedBatchSendLatency = -1;\r\n                            _delayedBatchReason = 0 /* SendRequestReason.Undefined */;\r\n                        }\r\n                    }, function () { return ({ latency: latency, sendType: sendType, sendReason: sendReason }); }, !isAsync);\r\n                }\r\n                else {\r\n                    // remember the min latency so that we can re-trigger later\r\n                    _delayedBatchSendLatency = _delayedBatchSendLatency >= 0 ? Math.min(_delayedBatchSendLatency, latency) : latency;\r\n                    _delayedBatchReason = Math.max(_delayedBatchReason, sendReason);\r\n                }\r\n                return eventsQueued;\r\n            }\r\n            /**\r\n             * This is the callback method is called as part of the manual flushing process.\r\n             * @param callback\r\n             * @param sendReason\r\n             */\r\n            function _flushImpl(callback, sendReason) {\r\n                // Add any additional queued events and cause all queued events to be sent asynchronously\r\n                _sendEventsForLatencyAndAbove(1 /* EventLatencyValue.Normal */, 0 /* EventSendType.Batched */, sendReason);\r\n                // All events (should) have been queue -- lets just make sure the queue counts are correct to avoid queue exhaustion (previous bug #9685112)\r\n                _resetQueueCounts();\r\n                _waitForIdleManager(function () {\r\n                    // Only called AFTER the httpManager does not have any outstanding requests\r\n                    if (callback) {\r\n                        callback();\r\n                    }\r\n                    if (_flushCallbackQueue.length > 0) {\r\n                        _flushCallbackTimerId = _createTimer(function () {\r\n                            _flushCallbackTimerId = null;\r\n                            _flushImpl(_flushCallbackQueue.shift(), sendReason);\r\n                        }, 0);\r\n                    }\r\n                    else {\r\n                        // No more flush requests\r\n                        _flushCallbackTimerId = null;\r\n                        // Restart the normal timer schedule\r\n                        _scheduleTimer();\r\n                    }\r\n                });\r\n            }\r\n            function _waitForIdleManager(callback) {\r\n                if (_httpManager.isCompletelyIdle()) {\r\n                    callback();\r\n                }\r\n                else {\r\n                    _flushCallbackTimerId = _createTimer(function () {\r\n                        _flushCallbackTimerId = null;\r\n                        _waitForIdleManager(callback);\r\n                    }, FlushCheckTimer);\r\n                }\r\n            }\r\n            /**\r\n             * Resets the transmit profiles to the default profiles of Real Time, Near Real Time\r\n             * and Best Effort. This removes all the custom profiles that were loaded.\r\n             */\r\n            function _resetTransmitProfiles() {\r\n                _clearScheduledTimer();\r\n                _initializeProfiles();\r\n                _currentProfile = RT_PROFILE;\r\n                _scheduleTimer();\r\n            }\r\n            function _initializeProfiles() {\r\n                _profiles = {};\r\n                _profiles[RT_PROFILE] = [2, 1, 0];\r\n                _profiles[NRT_PROFILE] = [6, 3, 0];\r\n                _profiles[BE_PROFILE] = [18, 9, 0];\r\n            }\r\n            /**\r\n             * The notification handler for requeue events\r\n             * @ignore\r\n             */\r\n            function _requeueEvents(batches, reason) {\r\n                var droppedEvents = [];\r\n                var maxSendAttempts = _maxEventSendAttempts;\r\n                if (_isPageUnloadTriggered) {\r\n                    // If a page unlaod has been triggered reduce the number of times we try to \"retry\"\r\n                    maxSendAttempts = _maxUnloadEventSendAttempts;\r\n                }\r\n                arrForEach(batches, function (theBatch) {\r\n                    if (theBatch && theBatch.count() > 0) {\r\n                        arrForEach(theBatch.events(), function (theEvent) {\r\n                            if (theEvent) {\r\n                                // Check if the request being added back is for a sync event in which case mark it no longer a sync event\r\n                                if (theEvent.sync) {\r\n                                    theEvent.latency = 4 /* EventLatencyValue.Immediate */;\r\n                                    theEvent.sync = false;\r\n                                }\r\n                                if (theEvent.sendAttempt < maxSendAttempts) {\r\n                                    // Reset the event timings\r\n                                    setProcessTelemetryTimings(theEvent, _self.identifier);\r\n                                    _addEventToQueues(theEvent, false);\r\n                                }\r\n                                else {\r\n                                    droppedEvents.push(theEvent);\r\n                                }\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n                if (droppedEvents.length > 0) {\r\n                    _notifyEvents(strEventsDiscarded, droppedEvents, EventsDiscardedReason.NonRetryableStatus);\r\n                }\r\n                if (_isPageUnloadTriggered) {\r\n                    // Unload event has been received so we need to try and flush new events\r\n                    _releaseAllQueues(2 /* EventSendType.SendBeacon */, 2 /* SendRequestReason.Unload */);\r\n                }\r\n            }\r\n            function _callNotification(evtName, theArgs) {\r\n                var manager = (_self._notificationManager || {});\r\n                var notifyFunc = manager[evtName];\r\n                if (notifyFunc) {\r\n                    try {\r\n                        notifyFunc.apply(manager, theArgs);\r\n                    }\r\n                    catch (e) {\r\n                        _throwInternal(_self.diagLog(), 1 /* eLoggingSeverity.CRITICAL */, 74 /* _eInternalMessageId.NotificationException */, evtName + \" notification failed: \" + e);\r\n                    }\r\n                }\r\n            }\r\n            function _notifyEvents(evtName, theEvents) {\r\n                var extraArgs = [];\r\n                for (var _i = 2; _i < arguments.length; _i++) {\r\n                    extraArgs[_i - 2] = arguments[_i];\r\n                }\r\n                if (theEvents && theEvents.length > 0) {\r\n                    _callNotification(evtName, [theEvents].concat(extraArgs));\r\n                }\r\n            }\r\n            function _notifyBatchEvents(evtName, batches) {\r\n                var extraArgs = [];\r\n                for (var _i = 2; _i < arguments.length; _i++) {\r\n                    extraArgs[_i - 2] = arguments[_i];\r\n                }\r\n                if (batches && batches.length > 0) {\r\n                    arrForEach(batches, function (theBatch) {\r\n                        if (theBatch && theBatch.count() > 0) {\r\n                            _callNotification(evtName, [theBatch.events()].concat(extraArgs));\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n            /**\r\n             * The notification handler for when batches are about to be sent\r\n             * @ignore\r\n             */\r\n            function _sendingEvent(batches, reason, isSyncRequest) {\r\n                if (batches && batches.length > 0) {\r\n                    _callNotification(\"eventsSendRequest\", [(reason >= 1000 /* EventBatchNotificationReason.SendingUndefined */ && reason <= 1999 /* EventBatchNotificationReason.SendingEventMax */ ?\r\n                            reason - 1000 /* EventBatchNotificationReason.SendingUndefined */ :\r\n                            0 /* SendRequestReason.Undefined */), isSyncRequest !== true]);\r\n                }\r\n            }\r\n            /**\r\n             * This event represents that a batch of events have been successfully sent and a response received\r\n             * @param batches The notification handler for when the batches have been successfully sent\r\n             * @param reason For this event the reason will always be EventBatchNotificationReason.Complete\r\n             */\r\n            function _eventsSentEvent(batches, reason) {\r\n                _notifyBatchEvents(\"eventsSent\", batches, reason);\r\n                // Try and schedule the processing timer if we have events\r\n                _scheduleTimer();\r\n            }\r\n            function _eventsDropped(batches, reason) {\r\n                _notifyBatchEvents(strEventsDiscarded, batches, (reason >= 8000 /* EventBatchNotificationReason.EventsDropped */ && reason <= 8999 /* EventBatchNotificationReason.EventsDroppedMax */ ?\r\n                    reason - 8000 /* EventBatchNotificationReason.EventsDropped */ :\r\n                    EventsDiscardedReason.Unknown));\r\n            }\r\n            function _eventsResponseFail(batches) {\r\n                _notifyBatchEvents(strEventsDiscarded, batches, EventsDiscardedReason.NonRetryableStatus);\r\n                // Try and schedule the processing timer if we have events\r\n                _scheduleTimer();\r\n            }\r\n            function _otherEvent(batches, reason) {\r\n                _notifyBatchEvents(strEventsDiscarded, batches, EventsDiscardedReason.Unknown);\r\n                // Try and schedule the processing timer if we have events\r\n                _scheduleTimer();\r\n            }\r\n            function _setAutoLimits() {\r\n                if (!_config || !_config.disableAutoBatchFlushLimit) {\r\n                    _autoFlushBatchLimit = Math.max(MaxNumberEventPerBatch * (MaxConnections + 1), _queueSizeLimit / 6);\r\n                }\r\n                else {\r\n                    _autoFlushBatchLimit = 0;\r\n                }\r\n            }\r\n            // Provided for backward compatibility they are not \"expected\" to be in current use but they are public\r\n            objDefineAccessors(_self, \"_setTimeoutOverride\", function () { return _timeoutWrapper.set; }, function (value) {\r\n                // Recreate the timeout wrapper\r\n                _timeoutWrapper = createTimeoutWrapper(value, _timeoutWrapper.clear);\r\n            });\r\n            objDefineAccessors(_self, \"_clearTimeoutOverride\", function () { return _timeoutWrapper.clear; }, function (value) {\r\n                // Recreate the timeout wrapper\r\n                _timeoutWrapper = createTimeoutWrapper(_timeoutWrapper.set, value);\r\n            });\r\n        });\r\n        return _this;\r\n    }\r\n// Removed Stub for PostChannel.prototype.initialize.\r\n// Removed Stub for PostChannel.prototype.processTelemetry.\r\n// Removed Stub for PostChannel.prototype.setEventQueueLimits.\r\n// Removed Stub for PostChannel.prototype.pause.\r\n// Removed Stub for PostChannel.prototype.resume.\r\n// Removed Stub for PostChannel.prototype.addResponseHandler.\r\n// Removed Stub for PostChannel.prototype.flush.\r\n// Removed Stub for PostChannel.prototype.setMsaAuthTicket.\r\n// Removed Stub for PostChannel.prototype.hasEvents.\r\n// Removed Stub for PostChannel.prototype._loadTransmitProfiles.\r\n// Removed Stub for PostChannel.prototype._setTransmitProfile.\r\n// Removed Stub for PostChannel.prototype._backOffTransmission.\r\n// Removed Stub for PostChannel.prototype._clearBackOff.\r\n    return PostChannel;\r\n}(BaseTelemetryPlugin));\r\nexport default PostChannel;\r\n//# sourceMappingURL=PostChannel.js.map"],"names":["strShimFunction","strShimObject","strShimUndefined","strShimPrototype","strShimHasOwnProperty","ObjClass","Object","ObjProto","ObjAssign","ObjDefineProperty","ObjHasOwnProperty","_cachedGlobal","getGlobal","useCached","globalThis","self","window","global","throwTypeError","message","TypeError","extendStaticsFn","d","b","__proto__","Array","p","Constructor","Prototype","strFunction","DynInstFuncTable","DynProxyTag","DynClassName","DynInstChkTag","DynAllowInstChkTag","DynProtoDefaultOptions","UnknownValue","str__Proto","DynProtoBaseProto","DynProtoCurrent","strUseBaseInst","strSetInstFuncs","Obj","_objGetPrototypeOf","_objGetOwnProps","_dynamicNames","_hasOwnProperty","obj","prop","hasOwnProperty","call","_isObjectOrArrayPrototype","target","_isObjectArrayOrFunctionPrototype","Function","_getObjProto","curProto","newProto","_forEachProp","func","props","name_1","push","length","lp","_isDynamicCandidate","funcName","skipOwn","_throwTypeError","_hasVisited","values","value","_getObjName","unknownValue","name","dynamicProto","theClass","delegateFunc","options","thisTarget","instFuncs","proto","baseInstFuncs","instFuncs_1","classProto","className","visited","thisProto","_checkPrototype","perfOptions","useBaseInst","undefined","setInstanceFunc","_instFuncProxy","funcHost","instFuncTable","theFunc","apply","arguments","baseFuncs","baseProto","_getBaseFuncs","dynProtoProxy","protoFunc","currentDynProtoProxy","instFunc","canAddInst","objProto","e","_getInstFunc","this","setInstFuncs","strEmpty","strIsInitialized","strTeardown","strCore","strUpdate","strDisabled","strDoTeardown","cStrStartsWith","strIndexOf","cStrTrim","strToString","strConstructor","_objDefineProperty","_objFreeze","freeze","_objKeys","keys","StringProto","String","_strTrim","_strStartsWith","_isArray","isArray","_objToString","_fnToString","_objFunctionString","rCamelCase","rNormalizeInvalid","rLeadingNumeric","isUndefined","isNullOrUndefined","isObject","isFunction","normalizeJsName","isString","replace","_all","letter","toUpperCase","match","objForEachKey","callbackfn","strStartsWith","checkValue","result","_strStartsWithPoly","chkLen","strContains","search","indexOf","isNumber","isBoolean","isPlainObject","arrForEach","arr","thisArg","len","idx","arrIndexOf","searchElement","fromIndex","from","Math","max","abs","strTrim","str","_objKeysHasDontEnumBug","toString","propertyIsEnumerable","_objKeysDontEnums","objKeys","objType","dontEnumsLength","objDefineAccessors","getProp","setProp","descriptor","enumerable","configurable","get","set","objFreeze","dateNow","dt","Date","now","getTime","optimizeObject","theObject","enumClass","Unknown","NonRetryableStatus","InvalidEvent","SizeLimitExceeded","KillSwitch","QueueFull","field","EventsDiscardedReason","strWindow","strDocument","strNavigator","strLocation","strJSON","strReactNative","strXMLHttpRequest","_isTrident","_navUserAgentCheck","_useXDomainRequest","_beaconsSupported","_hasProperty","property","supported","getGlobalInst","gbl","hasWindow","getWindow","getDocument","document","hasNavigator","navigator","getNavigator","hasJSON","JSON","getJSON","isReactNative","nav","product","dumpObj","object","objectTypeDump","propertyValueDump","stack","stringify","isBeaconsSupported","sendBeacon","isXhrSupported","isSupported","_aiNamespace","_sanitizeDiagnosticText","text","_logToConsole","logFunc","theConsole","console","_InternalLogMessage","dataType","msgId","msg","isUserAct","properties","messageId","strProps","diagnosticText","DiagnosticLogger","config","identifier","queue","_messageCount","_messageLogged","_self","_getConfigValue","defValue","_debugExtMsg","data","ns","dbgExt","disableDbgExt","diagLog","consoleLoggingLevel","telemetryLoggingLevel","maxInternalMessageLimit","enableDebugExceptions","throwInternal","severity","logLevel","messageKey","logInternalMessage","warnToConsole","errorToConsole","resetInternalMessageCount","throttleLimitMessage","throttleMessage","logMessage","_throwInternal","logger","PerfEvent","ParentContextKey","ChildrenContextKey","payloadDetails","isAsync","theDetails_1","accessorDefined","start","isChildEvt","getCtx","key","setCtx","complete","childTime","childEvts","childEvt","time","exTime","payload","doPerfActiveKey","doPerf","mgrSource","getSource","details","perfMgr","children","perfEvt","currentActive","create","ex","fire","UInt32Mask","MaxUInt32","_mwcSeeded","_mwcW","_mwcZ","random32","signed","seedValue","c","getRandomValues","Uint32Array","userAgent","toLowerCase","random","floor","instanceName","maxLength","number","chars","base64chars","newId","_dataUid","_canAcceptData","nodeType","createUniqueNamespace","includeVersion","createElmNodeData","id","accept","addDefault","theCache","_createAccessor","_getCache","kill","strAttachEvent","strAddEventHelper","strDetachEvent","strRemoveEventListener","strEvents","strVisibilityChangeEvt","strPageHide","strPageShow","strBeforeUnload","strPageHideNamespace","strPageShowNamespace","rRemoveEmptyNs","rRemoveTrailingEmptyNs","_guid","elmNodeData","eventNamespace","_normalizeNamespace","_getEvtNamespace","eventName","evtNamespace","theNamespace_1","parsedEvent","exec","type","split","sort","join","_getRegisteredEvents","evtName","aiEvts","_doDetach","handlerRef","useCapture","_doUnregister","events","unRegFn","theEvent","handler","capture","splice","mergeEvtNamespace","theNamespace","namespaces","concat","eventOn","registeredEvent","guid","eventOff","evtName_1","found_1","regEvent","eventCache","evtType","_addEventListeners","listener","excludeEvents","added","callback","doc","w","removeEventListeners","pluginStateData","_getPluginState","plugin","strTelemetryPluginChain","strHasRunFlags","strGetTelCtx","_chainId","_createInternalContext","telemetryChain","core","startAt","_nextProxy","_onComplete","context","proxy","getPlugin","getNext","createTelemetryProxyChain","_getNextProxyStart","_next","onComplete","nextProxy","completeDetails","args","ctx","getCfg","getExtCfg","_getExtCfg","getConfig","defaultValue","theValue","extConfig","hasNext","setNext","nextPlugin","iterate","cb","that","_i","mergeDefault","theConfig","newConfig_1","extensionConfig","objExtend","theArgs","extended","argLen","deep","newValue","isNewArray","clone","arg","isArgArray","isArgObj","cfgValue","createProcessTelemetryContext","internalContext","processNext","env","processTelemetry","createNew","plugins","lastProxy_1","firstProxy","add","thePlugin","newProxy","createTelemetryPluginProxy","_setNext","hasProcessTelemetry","hasSetNext","setNextPlugin","chainId","priority","proxyChain","itemCtx","_processChain","pluginState","teardown","item","unload","unloadCtx","unloadState","pluginCore","hasRun","update","updateCtx","updateState","_id","processPluginFn","hasRunContext","nextId","error","hasNextRun","createUnloadHandlerContainer","handlers","run","strGetPlugin","BaseTelemetryPlugin","_isinitialized","_rootCtx","_nextPlugin","_unloadHandlerContainer","_hooks","_getTelCtx","currentCtx","rootCtx","_setDefaults","pluginChain","getProcessTelContext","_initDefaults","source","srcFunc","src","initialize","extensions","unloadDone","theUnloadCtx","theUnloadState","createProcessTelemetryUnloadContext","reason","_unloadCallback","fn","rm","updateDone","theUpdateCtx","createProcessTelemetryUpdateContext","_doUpdate","_updateCallback","_addHook","hooks","originalArguments","setInitialized","isInitialized","next","strDisabledPropertyName","strWithCredentials","strTimeout","_fieldTypeEventPropMap","_a","isValueAssigned","getCommonSchemaMetaData","kind","encodedTypeValue","propType","getFieldValueType","theType","extend","i","strPrototype","arrayValue","arrayIndex","perf","setProcessTelemetryTimings","event","evt","timings","processTelemetryStart","RT_PROFILE","Method","strDropped","strRequeue","defaultContentType","strCacheControl","strContentTypeHeader","strKillDurationHeader","strTimeDeltaHeader","strClientVersion","strClientId","strTimeDeltaToApply","strUploadTime","strApiKey","strMsaDeviceTicket","strAuthXToken","strMsfpc","_getEventMsfpc","intWeb","ext","_getMsfpc","theEvents","msfpc","EventBatch","iKey","addEvents","_msfpc","Msfpc","count","addEvent","fromEvent","numEvents","cnt","metadata","rCheckDot","Serializer","perfManager","valueSanitizer","stringifyObjects","enableCompoundKey","strBaseData","_checkForCompoundkey","_theSanitizer","_isReservedCache","_processPathKeys","srcObj","thePath","checkReserved","metadataPathKeys","metadataCallback","processSubKeys","srcValue","path","theMetaPathKeys","destObj","test","subKeys","keyLen","slice","subKey","handleField","sanitizeProperty","newPath","createPayload","retryCnt","isTeardown","isSync","useSendBeacon","sendReason","sendType","apiKeys","payloadBlob","overflow","sizeExceed","failedEvts","batches","isBeacon","appendPayload","theBatch","maxEventsPerBatch","canAddEvents","payloadEvents","eventsAdded","sizeExceeded","isBeaconPayload","requestMaxSize","recordMaxSize","joinCount","eventBlob","getEventBlob","blobLength","substr","apiKey","evts","eventData","serializedEvent","serializedExt","ver","indexTenantId","substring","getTenantId","eventExt","serializedData","serializedBaseData","baseType","baseData","pathKeys","_addJSONPropertyMetaData","json","propKeys","propertyValue","propertyType","metaData","metaTarget","f","t","RandomizationLowerThreshold","RandomizationUpperThreshold","BaseBackoff","MaxBackoff","retryPolicyGetMillisToBackoffForRetry","retriesSoFar","minBackoff","min","pow","EVTKillSwitch","_killedTokenDictionary","setKillSwitchTenants","killTokens","killDuration","killedTokens","durationMs","parseInt","isTenantKilled","tenantToken","killDictionary","EVTClockSkewManager","ClockSkewManager","_allowRequestSending","_shouldAddClockSkewHeaders","_isFirstRequest","_clockSkewHeaderValue","_clockSkewSet","allowRequestSending","firstRequestSent","shouldAddClockSkewHeaders","getClockSkewHeaderValue","setClockSkew","timeDeltaInMillis","strSendAttempt","_noResponseQs","_eventActionMap","_collectorQsHeaders","_collectorHeaderToQs","_addCollectorHeaderQsMapping","qsName","headerName","allowQs","_getResponseText","xhr","responseText","_hasHeader","headers","header","hasHeader","lowerHeader","_addRequestDetails","useHeaders","hdrs","useHdrs","url","HttpManager","maxConnections","maxRequestRetriesBeforeBackoff","actions","timeoutOverride","_responseHandlers","_postManager","_sendInterfaces","_core","_cookieMgr","_xhrTimeout","_disableXhrSync","_urlString","_killSwitch","_paused","_clockSkewManager","_useBeacons","_outstandingRequests","_customHttpInterface","_queryStringParameters","_headers","_batchQueue","_serializer","_enableEventTimings","_isUnloading","_useHeaders","_sendCredentials","_getSenderInterface","transports","syncSupport","transportType","sendPostFunc","XDomainRequest","_xdrSendPost","_xhrSendPost","withKeepAlive","request","isFetchSupported","_fetchSendPost","_beaconSendPost","_transport","_isSync","sendPOST","oncomplete","sync","xdr","open","urlString","timeout","onload","response","_doOnComplete","_handleCollectorResponse","onerror","ontimeout","onprogress","send","requestInit","theUrl","ignoreResponse","responseHandled","body","method","keepalive","_sendReason","credentials","fetch","then","headerMap","forEach","status","_appendHeader","theHeaders","getResponseHeader","xhrComplete","responseTxt","headersString","getAllResponseHeaders","headerEntry","disableXhrSync","withCredentials","disabled","XMLHttpRequest","_wrapSetXhrProp","xhrRequest","setRequestHeader","thePayload","_thePayload","droppedBatches_1","nav_1","_sendBatchesNotification","_isBeaconPayload","_adjustSendType","_hasIdleConnection","_clearQueue","theQueue","_canSendPayload","theBatches","_createDebugBatches","_sendBatches","retryCount","orgBatches_1","isSynchronous_1","droppedBatches","serializationStart","sendInterface","isBeaconTransport","shift","_doPayloadSend","isSynchronous","_setTimingValue","serializationCompleted","useSendHook_1","sendInterface_1","requestDetails_1","useHeaders_1","sendEventStart_1","sendHook","requestDetails","apiQsKeys","encodeURIComponent","getWParam","wParam","_buildRequestDetails","batchLp","evtLp","telemetryItem","orgPayloadData","sender","_retryRequestIfNeeded","sendEventCompleted_1","isRetrying","backOffTrans","retryCount_1","shouldRetry","strUndefined","killToken","removedEvents","_doAction","_handleRequestFinished","batchReason","_backOffTransmission","_clearBackOff","sendEventCompleted","sendQueuedRequests","sendListener","hookData_1","senderCalled_1","interval","responseHandlers","parse","webResult","sendSync","theAction_1","isSyncRequest_1","action","endpointUrl","postChannel","httpInterface","channelConfig","avoidOptions","getCookieMgr","disableEventTimings","theTransports","syncHttpInterface","xhrTimeout","beaconHttpInterface","alwaysUseXhrOverride","fetchSyncHttpInterface","location_1","location","protocol","configTransports","addQueryStringParameter","addHeader","canSendRequest","isCompletelyIdle","setUnloading","addBatch","pause","resume","sendSynchronousBatch","batch","defaultSetTimeout","ms","setTimeout","defaultClearTimeout","timeoutId","clearTimeout","createTimeoutWrapper","argSetTimeout","argClearTimeout","clear","_super","strEventsDiscarded","strOverrideInstrumentationKey","strMaxEventRetryAttempts","strMaxUnloadEventRetryAttempts","PostChannel","_config","_xhrOverride","_httpManager","_autoFlushEventsLimit","_autoFlushBatchLimit","_delayedBatchReason","_evtNamespace","_timeoutWrapper","_this","_isTeardownCalled","version","_flushCallbackQueue","_flushCallbackTimerId","_immediateQueueSize","_immediateQueueSizeLimit","_queueSize","_queueSizeLimit","_profiles","_currentProfile","_scheduledTimerId","_immediateTimerId","_currentBackoffCount","_timerCount","_batchQueues","_delayedBatchSendLatency","_optimizeObject","_isPageUnloadTriggered","_maxEventSendAttempts","_maxUnloadEventSendAttempts","_base","_handleUnloadEvents","_releaseAllQueues","_handleShowEvents","_addEventToQueues","append","sendAttempt","latency","evtLatency","queueSize","queueLimit","eventDropped","_addEventToProperQueue","dropLatency","dropNumber","currentLatency","eventBatch","_getEventBatch","droppedEvents","droppedCount","_notifyBatchEvents","_resetQueueCounts","_dropEventWithLatencyOrLess","_notifyEvents","_sendEventsForLatencyAndAbove","_queueBatches","_scheduleTimer","immediateTimeOut","_createTimer","timeOut","requeue","_requeueEvents","_sendingEvent","sent","_eventsSentEvent","drop","_eventsDropped","rspFail","_eventsResponseFail","oth","_otherEvent","_initializeProfiles","iKeyMap","_setAutoLimits","theTimerFunc","timerMultiplier","_clearScheduledTimer","batchQueue","_performAutoFlush","doFlush","flush","immediateQueue","normalQueue","_loop_1","eventsQueued","latencyToProcess","REAL_TIME","NEAR_REAL_TIME","BEST_EFFORT","maxSendAttempts","_callNotification","manager","_notificationManager","notifyFunc","extraArgs","isSyncRequest","disableAutoBatchFlushLimit","MaxNumberEventPerBatch","coreConfig","existingGetWParamMethod","extendedCore","setTimeoutOverride","clearTimeoutOverride","disableOptimizeObj","wparam","ignoreMc1Ms0CookieProcessing","eventsLimitInMem","immediateEventLimit","autoFlushEventsLimit","httpXHROverride","anonCookieName","payloadPreprocessor","payloadListener","overrideEndpointUrl","excludePageUnloadEvents","NotificationManager","disablePageUnloadEvents","addPageHideEventListener","newNamespaces","pageUnloadAdded","visibilityState","addPageShowEventListener","pageShowAdded","disablePageShowEvents","ev","disableTelemetry","_doTeardown","setEventQueueLimits","eventLimit","autoFlushLimit","addResponseHandler","responseHandler","_loadTransmitProfiles","profiles","profileName","profileValue","directValue","profLen","ceil","async","_flushImpl","_waitForIdleManager","cleared","setMsaAuthTicket","ticket","hasEvents","_setTransmitProfile","__","constructor","PostChannel$1"],"mappings":"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"}