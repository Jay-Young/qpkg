{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://debug-server-ready/external commonjs \"vscode\"","webpack://debug-server-ready/external node-commonjs \"crypto\"","webpack://debug-server-ready/external node-commonjs \"util\"","webpack://debug-server-ready/webpack/bootstrap","webpack://debug-server-ready/./src/extension.ts"],"sourcesContent":["module.exports = require(\"vscode\");","module.exports = require(\"crypto\");","module.exports = require(\"util\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as vscode from 'vscode';\nimport * as util from 'util';\nimport { randomUUID } from 'crypto';\n\nconst PATTERN = 'listening on.* (https?://\\\\S+|[0-9]+)'; // matches \"listening on port 3000\" or \"Now listening on: https://localhost:5001\"\nconst URI_PORT_FORMAT = 'http://localhost:%s';\nconst URI_FORMAT = '%s';\nconst WEB_ROOT = '${workspaceFolder}';\n\ninterface ServerReadyAction {\n\tpattern: string;\n\taction?: 'openExternally' | 'debugWithChrome' | 'debugWithEdge' | 'startDebugging';\n\turiFormat?: string;\n\twebRoot?: string;\n\tname?: string;\n\tkillOnServerStop?: boolean;\n}\n\n// Escape codes, compiled from https://invisible-island.net/xterm/ctlseqs/ctlseqs.html#h3-Functions-using-CSI-_-ordered-by-the-final-character_s_\nconst CSI_SEQUENCE = /(:?\\x1b\\[|\\x9B)[=?>!]?[\\d;:]*[\"$#'* ]?[a-zA-Z@^`{}|~]/g;\n\n/**\n * Froms vs/base/common/strings.ts in core\n * @see https://github.com/microsoft/vscode/blob/22a2a0e833175c32a2005b977d7fbd355582e416/src/vs/base/common/strings.ts#L736\n */\nfunction removeAnsiEscapeCodes(str: string): string {\n\tif (str) {\n\t\tstr = str.replace(CSI_SEQUENCE, '');\n\t}\n\n\treturn str;\n}\n\nclass Trigger {\n\tprivate a = false;\n\n\tpublic get hasFired() {\n\t\treturn this.a;\n\t}\n\n\tpublic fire() {\n\t\tthis.a = true;\n\t}\n}\n\nclass ServerReadyDetector extends vscode.Disposable {\n\n\tprivate static a = new Map<vscode.DebugSession, ServerReadyDetector>();\n\tprivate static b: vscode.Disposable | undefined;\n\n\tprivate c: Trigger;\n\tprivate f?: number;\n\tprivate g: RegExp;\n\tprivate h: vscode.Disposable[] = [];\n\tprivate i = new Set<vscode.Disposable>([]);\n\n\tstatic start(session: vscode.DebugSession): ServerReadyDetector | undefined {\n\t\tif (session.configuration.serverReadyAction) {\n\t\t\tlet detector = ServerReadyDetector.a.get(session);\n\t\t\tif (!detector) {\n\t\t\t\tdetector = new ServerReadyDetector(session);\n\t\t\t\tServerReadyDetector.a.set(session, detector);\n\t\t\t}\n\t\t\treturn detector;\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tstatic stop(session: vscode.DebugSession): void {\n\t\tconst detector = ServerReadyDetector.a.get(session);\n\t\tif (detector) {\n\t\t\tServerReadyDetector.a.delete(session);\n\t\t\tdetector.dispose();\n\t\t}\n\t}\n\n\tstatic rememberShellPid(session: vscode.DebugSession, pid: number) {\n\t\tconst detector = ServerReadyDetector.a.get(session);\n\t\tif (detector) {\n\t\t\tdetector.f = pid;\n\t\t}\n\t}\n\n\tstatic async startListeningTerminalData() {\n\t\tif (!this.b) {\n\t\t\tthis.b = vscode.window.onDidWriteTerminalData(async e => {\n\n\t\t\t\t// first find the detector with a matching pid\n\t\t\t\tconst pid = await e.terminal.processId;\n\t\t\t\tconst str = removeAnsiEscapeCodes(e.data);\n\t\t\t\tfor (const [, detector] of this.a) {\n\t\t\t\t\tif (detector.f === pid) {\n\t\t\t\t\t\tdetector.detectPattern(str);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// if none found, try all detectors until one matches\n\t\t\t\tfor (const [, detector] of this.a) {\n\t\t\t\t\tif (detector.detectPattern(str)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate constructor(private j: vscode.DebugSession) {\n\t\tsuper(() => this.k());\n\n\t\t// Re-used the triggered of the parent session, if one exists\n\t\tif (j.parentSession) {\n\t\t\tthis.c = ServerReadyDetector.start(j.parentSession)?.c ?? new Trigger();\n\t\t} else {\n\t\t\tthis.c = new Trigger();\n\t\t}\n\n\t\tthis.g = new RegExp(j.configuration.serverReadyAction.pattern || PATTERN, 'i');\n\t}\n\n\tprivate k() {\n\t\tthis.h.forEach(d => d.dispose());\n\t\tthis.h = [];\n\t}\n\n\toverride dispose() {\n\t\tthis.i.forEach(d => d.dispose());\n\t\treturn super.dispose();\n\t}\n\n\tdetectPattern(s: string): boolean {\n\t\tif (!this.c.hasFired) {\n\t\t\tconst matches = this.g.exec(s);\n\t\t\tif (matches && matches.length >= 1) {\n\t\t\t\tthis.l(this.j, matches.length > 1 ? matches[1] : '');\n\t\t\t\tthis.c.fire();\n\t\t\t\tthis.k();\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate l(session: vscode.DebugSession, captureString: string) {\n\n\t\tconst args: ServerReadyAction = session.configuration.serverReadyAction;\n\n\t\tlet uri;\n\t\tif (captureString === '') {\n\t\t\t// nothing captured by reg exp -> use the uriFormat as the target uri without substitution\n\t\t\t// verify that format does not contain '%s'\n\t\t\tconst format = args.uriFormat || '';\n\t\t\tif (format.indexOf('%s') >= 0) {\n\t\t\t\tconst errMsg = vscode.l10n.t(\"Format uri ('{0}') uses a substitution placeholder but pattern did not capture anything.\", format);\n\t\t\t\tvscode.window.showErrorMessage(errMsg, { modal: true }).then(_ => undefined);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\turi = format;\n\t\t} else {\n\t\t\t// if no uriFormat is specified guess the appropriate format based on the captureString\n\t\t\tconst format = args.uriFormat || (/^[0-9]+$/.test(captureString) ? URI_PORT_FORMAT : URI_FORMAT);\n\t\t\t// verify that format only contains a single '%s'\n\t\t\tconst s = format.split('%s');\n\t\t\tif (s.length !== 2) {\n\t\t\t\tconst errMsg = vscode.l10n.t(\"Format uri ('{0}') must contain exactly one substitution placeholder.\", format);\n\t\t\t\tvscode.window.showErrorMessage(errMsg, { modal: true }).then(_ => undefined);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\turi = util.format(format, captureString);\n\t\t}\n\n\t\tthis.n(session, uri);\n\t}\n\n\tprivate async n(session: vscode.DebugSession, uri: string) {\n\n\t\tconst args: ServerReadyAction = session.configuration.serverReadyAction;\n\t\tswitch (args.action || 'openExternally') {\n\n\t\t\tcase 'openExternally':\n\t\t\t\tawait vscode.env.openExternal(vscode.Uri.parse(uri));\n\t\t\t\tbreak;\n\n\t\t\tcase 'debugWithChrome':\n\t\t\t\tawait this.o('pwa-chrome', session, uri);\n\t\t\t\tbreak;\n\n\t\t\tcase 'debugWithEdge':\n\t\t\t\tawait this.o('pwa-msedge', session, uri);\n\t\t\t\tbreak;\n\n\t\t\tcase 'startDebugging':\n\t\t\t\tawait this.q(session, args.name || 'unspecified');\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\t// not supported\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tprivate async o(type: string, session: vscode.DebugSession, uri: string) {\n\t\tconst args = session.configuration.serverReadyAction as ServerReadyAction;\n\t\tif (!args.killOnServerStop) {\n\t\t\tawait this.p(type, session, uri);\n\t\t\treturn;\n\t\t}\n\n\t\tconst trackerId = randomUUID();\n\t\tconst cts = new vscode.CancellationTokenSource();\n\t\tconst newSessionPromise = this.r(session => session.configuration._debugServerReadySessionId === trackerId, cts.token);\n\n\t\tif (!await this.p(type, session, uri, trackerId)) {\n\t\t\tcts.cancel();\n\t\t\tcts.dispose();\n\t\t\treturn;\n\t\t}\n\n\t\tconst createdSession = await newSessionPromise;\n\t\tcts.dispose();\n\n\t\tif (!createdSession) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst stopListener = vscode.debug.onDidTerminateDebugSession(async (terminated) => {\n\t\t\tif (terminated === session) {\n\t\t\t\tstopListener.dispose();\n\t\t\t\tthis.i.delete(stopListener);\n\t\t\t\tawait vscode.debug.stopDebugging(createdSession);\n\t\t\t}\n\t\t});\n\t\tthis.i.add(stopListener);\n\t}\n\n\tprivate p(type: string, session: vscode.DebugSession, uri: string, trackerId?: string) {\n\t\treturn vscode.debug.startDebugging(session.workspaceFolder, {\n\t\t\ttype,\n\t\t\tname: 'Browser Debug',\n\t\t\trequest: 'launch',\n\t\t\turl: uri,\n\t\t\twebRoot: session.configuration.serverReadyAction.webRoot || WEB_ROOT,\n\t\t\t_debugServerReadySessionId: trackerId,\n\t\t});\n\t}\n\n\tprivate async q(session: vscode.DebugSession, name: string) {\n\t\tconst args = session.configuration.serverReadyAction as ServerReadyAction;\n\t\tif (!args.killOnServerStop) {\n\t\t\tawait vscode.debug.startDebugging(session.workspaceFolder, name);\n\t\t\treturn;\n\t\t}\n\n\t\tconst cts = new vscode.CancellationTokenSource();\n\t\tconst newSessionPromise = this.r(x => x.name === name, cts.token);\n\n\t\tif (!await vscode.debug.startDebugging(session.workspaceFolder, name)) {\n\t\t\tcts.cancel();\n\t\t\tcts.dispose();\n\t\t\treturn;\n\t\t}\n\n\t\tconst createdSession = await newSessionPromise;\n\t\tcts.dispose();\n\n\t\tif (!createdSession) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst stopListener = vscode.debug.onDidTerminateDebugSession(async (terminated) => {\n\t\t\tif (terminated === session) {\n\t\t\t\tstopListener.dispose();\n\t\t\t\tthis.i.delete(stopListener);\n\t\t\t\tawait vscode.debug.stopDebugging(createdSession);\n\t\t\t}\n\t\t});\n\t\tthis.i.add(stopListener);\n\t}\n\n\tprivate r(predicate: (session: vscode.DebugSession) => boolean, cancellationToken: vscode.CancellationToken): Promise<vscode.DebugSession | undefined> {\n\t\treturn new Promise<vscode.DebugSession | undefined>(_resolve => {\n\t\t\tconst done = (value?: vscode.DebugSession) => {\n\t\t\t\tlistener.dispose();\n\t\t\t\tcancellationListener.dispose();\n\t\t\t\tthis.i.delete(listener);\n\t\t\t\tthis.i.delete(cancellationListener);\n\t\t\t\t_resolve(value);\n\t\t\t};\n\n\t\t\tconst cancellationListener = cancellationToken.onCancellationRequested(done);\n\t\t\tconst listener = vscode.debug.onDidStartDebugSession(session => {\n\t\t\t\tif (predicate(session)) {\n\t\t\t\t\tdone(session);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// In case the debug session of interest was never caught anyhow.\n\t\t\tthis.i.add(listener);\n\t\t\tthis.i.add(cancellationListener);\n\t\t});\n\t}\n}\n\nexport function activate(context: vscode.ExtensionContext) {\n\n\tcontext.subscriptions.push(vscode.debug.onDidChangeActiveDebugSession(session => {\n\t\tif (session && session.configuration.serverReadyAction) {\n\t\t\tconst detector = ServerReadyDetector.start(session);\n\t\t\tif (detector) {\n\t\t\t\tServerReadyDetector.startListeningTerminalData();\n\t\t\t}\n\t\t}\n\t}));\n\n\tcontext.subscriptions.push(vscode.debug.onDidTerminateDebugSession(session => {\n\t\tServerReadyDetector.stop(session);\n\t}));\n\n\tconst trackers = new Set<string>();\n\n\tcontext.subscriptions.push(vscode.debug.registerDebugConfigurationProvider('*', {\n\t\tresolveDebugConfigurationWithSubstitutedVariables(_folder: vscode.WorkspaceFolder | undefined, debugConfiguration: vscode.DebugConfiguration) {\n\t\t\tif (debugConfiguration.type && debugConfiguration.serverReadyAction) {\n\t\t\t\tif (!trackers.has(debugConfiguration.type)) {\n\t\t\t\t\ttrackers.add(debugConfiguration.type);\n\t\t\t\t\tstartTrackerForType(context, debugConfiguration.type);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn debugConfiguration;\n\t\t}\n\t}));\n}\n\nfunction startTrackerForType(context: vscode.ExtensionContext, type: string) {\n\n\t// scan debug console output for a PORT message\n\tcontext.subscriptions.push(vscode.debug.registerDebugAdapterTrackerFactory(type, {\n\t\tcreateDebugAdapterTracker(session: vscode.DebugSession) {\n\t\t\tconst detector = ServerReadyDetector.start(session);\n\t\t\tif (detector) {\n\t\t\t\tlet runInTerminalRequestSeq: number | undefined;\n\t\t\t\treturn {\n\t\t\t\t\tonDidSendMessage: m => {\n\t\t\t\t\t\tif (m.type === 'event' && m.event === 'output' && m.body) {\n\t\t\t\t\t\t\tswitch (m.body.category) {\n\t\t\t\t\t\t\t\tcase 'console':\n\t\t\t\t\t\t\t\tcase 'stderr':\n\t\t\t\t\t\t\t\tcase 'stdout':\n\t\t\t\t\t\t\t\t\tif (m.body.output) {\n\t\t\t\t\t\t\t\t\t\tdetector.detectPattern(m.body.output);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (m.type === 'request' && m.command === 'runInTerminal' && m.arguments) {\n\t\t\t\t\t\t\tif (m.arguments.kind === 'integrated') {\n\t\t\t\t\t\t\t\trunInTerminalRequestSeq = m.seq; // remember this to find matching response\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tonWillReceiveMessage: m => {\n\t\t\t\t\t\tif (runInTerminalRequestSeq && m.type === 'response' && m.command === 'runInTerminal' && m.body && runInTerminalRequestSeq === m.request_seq) {\n\t\t\t\t\t\t\trunInTerminalRequestSeq = undefined;\n\t\t\t\t\t\t\tServerReadyDetector.rememberShellPid(session, m.body.shellProcessId);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\t\t\treturn undefined;\n\t\t}\n\t}));\n}\n"],"names":["module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","CSI_SEQUENCE","Trigger","a","this","fire","ServerReadyDetector","vscode","Disposable","session","configuration","serverReadyAction","detector","get","set","delete","dispose","pid","f","b","window","onDidWriteTerminalData","async","e","terminal","processId","str","replace","removeAnsiEscapeCodes","data","detectPattern","j","super","k","h","i","Set","parentSession","c","start","g","RegExp","pattern","forEach","d","s","hasFired","matches","exec","length","l","captureString","args","uri","format","uriFormat","indexOf","errMsg","l10n","t","showErrorMessage","modal","then","_","test","split","util","n","action","env","openExternal","Uri","parse","o","q","name","type","killOnServerStop","p","trackerId","randomUUID","cts","CancellationTokenSource","newSessionPromise","r","_debugServerReadySessionId","token","cancel","createdSession","stopListener","debug","onDidTerminateDebugSession","terminated","stopDebugging","add","startDebugging","workspaceFolder","request","url","webRoot","x","predicate","cancellationToken","Promise","_resolve","done","value","listener","cancellationListener","onCancellationRequested","onDidStartDebugSession","Map","context","subscriptions","push","onDidChangeActiveDebugSession","startListeningTerminalData","stop","trackers","registerDebugConfigurationProvider","resolveDebugConfigurationWithSubstitutedVariables","_folder","debugConfiguration","has","registerDebugAdapterTrackerFactory","createDebugAdapterTracker","runInTerminalRequestSeq","onDidSendMessage","m","event","body","category","output","command","arguments","kind","seq","onWillReceiveMessage","request_seq","rememberShellPid","shellProcessId","startTrackerForType"],"sourceRoot":""}