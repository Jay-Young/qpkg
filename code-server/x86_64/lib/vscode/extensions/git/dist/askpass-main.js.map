{"version":3,"sources":["webpack://git/./src/ipc/ipcClient.ts","webpack://git/external \"fs\"","webpack://git/external \"http\"","webpack://git/webpack/bootstrap","webpack://git/./src/askpass-main.ts"],"names":["constructor","b","ipcHandlePath","process","env","Error","this","a","call","request","opts","socketPath","path","method","Promise","c","e","req","http","res","statusCode","chunks","on","d","push","JSON","parse","Buffer","concat","toString","err","write","stringify","end","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","fatal","console","error","exit","argv","output","askpassType","host","file","fingerprint","replace","test","IPCClient","then","fs","writeFileSync","setTimeout","catch","main"],"mappings":"6GAKA,gBAEA,kBAICA,YAAoBC,GAAA,KAAAA,IACnB,MAAMC,EAAgBC,QAAQC,IAA2B,sBAEzD,IAAKF,EACJ,MAAM,IAAIG,MAAM,iCAGjBC,KAAKC,EAAIL,EAGVM,KAAKC,GACJ,MAAMC,EAA4B,CACjCC,WAAYL,KAAKC,EACjBK,KAAM,IAAIN,KAAKL,IACfY,OAAQ,QAGT,OAAO,IAAIC,SAAQ,CAACC,EAAGC,KACtB,MAAMC,EAAMC,EAAKT,QAAQC,GAAMS,IAC9B,GAAuB,MAAnBA,EAAIC,WACP,OAAOJ,EAAE,IAAIX,MAAM,oBAAoBc,EAAIC,eAG5C,MAAMC,EAAmB,GACzBF,EAAIG,GAAG,QAAQC,GAAKF,EAAOG,KAAKD,KAChCJ,EAAIG,GAAG,OAAO,IAAMP,EAAEU,KAAKC,MAAMC,OAAOC,OAAOP,GAAQQ,SAAS,eAGjEZ,EAAIK,GAAG,SAASQ,GAAOd,EAAEc,KACzBb,EAAIc,MAAMN,KAAKO,UAAUvB,IACzBQ,EAAIgB,Y,SCzCPC,EAAOC,QAAUC,QAAQ,O,SCAzBF,EAAOC,QAAUC,QAAQ,UCCrBC,EAA2B,GAG/B,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaL,QAGrB,IAAID,EAASG,EAAyBE,GAAY,CAGjDJ,QAAS,IAOV,OAHAO,EAAoBH,GAAUL,EAAQA,EAAOC,QAASG,GAG/CJ,EAAOC,Q,wEChBf,gBACA,UAEA,SAASQ,EAAMb,GACdc,QAAQC,MAAM,mCACdD,QAAQC,MAAMf,GACd3B,QAAQ2C,KAAK,IAGd,SAAcC,GACb,IAAK5C,QAAQC,IAA6B,wBACzC,OAAOuC,EAAM,gBAGd,IAAKxC,QAAQC,IAA6B,wBACzC,OAAOuC,EAAM,gBAGd,GAA+C,UAA3CxC,QAAQC,IAA6B,yBAA4D,QAA3CD,QAAQC,IAA6B,wBAC9F,OAAOuC,EAAM,iBAAiBxC,QAAQC,IAA6B,2BAGpE,GAA0C,UAAtCD,QAAQC,IAAwB,oBAAmBD,QAAQC,IAA6B,wBAC3F,OAAOuC,EAAM,8BAGd,MAAMK,EAAS7C,QAAQC,IAA6B,wBAC9C6C,EAAc9C,QAAQC,IAA6B,wBAGnDK,EAA0B,UAAhBwC,EAA0BF,EAAK,GAAKA,EAAK,GAEzD,IAAIG,EACHC,EACAC,EAEmB,UAAhBH,IACHC,EAAOH,EAAK,GAAGM,QAAQ,kBAAmB,KAGvB,QAAhBJ,IACC,cAAcK,KAAK7C,GAEtB0C,EAAOJ,EAAK,GAAGM,QAAQ,kBAAmB,KAG1CH,EAAOH,EAAK,GAAGM,QAAQ,kBAAmB,IAC1CD,EAAcL,EAAK,MAIH,IAAI,EAAAQ,UAAU,WACtB/C,KAAK,CAAEyC,cAAaxC,UAASyC,OAAMC,OAAMC,gBAAeI,MAAKrC,IACtEsC,EAAGC,cAAcV,EAAQ7B,EAAM,MAC/BwC,YAAW,IAAMxD,QAAQ2C,KAAK,IAAI,MAChCc,OAAM9B,GAAOa,EAAMb,KAGvB+B,CAAK1D,QAAQ4C,O","file":"askpass-main.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as http from 'http';\n\nexport class IPCClient {\n\n\tprivate a: string;\n\n\tconstructor(private b: string) {\n\t\tconst ipcHandlePath = process.env['VSCODE_GIT_IPC_HANDLE'];\n\n\t\tif (!ipcHandlePath) {\n\t\t\tthrow new Error('Missing VSCODE_GIT_IPC_HANDLE');\n\t\t}\n\n\t\tthis.a = ipcHandlePath;\n\t}\n\n\tcall(request: any): Promise<any> {\n\t\tconst opts: http.RequestOptions = {\n\t\t\tsocketPath: this.a,\n\t\t\tpath: `/${this.b}`,\n\t\t\tmethod: 'POST'\n\t\t};\n\n\t\treturn new Promise((c, e) => {\n\t\t\tconst req = http.request(opts, res => {\n\t\t\t\tif (res.statusCode !== 200) {\n\t\t\t\t\treturn e(new Error(`Bad status code: ${res.statusCode}`));\n\t\t\t\t}\n\n\t\t\t\tconst chunks: Buffer[] = [];\n\t\t\t\tres.on('data', d => chunks.push(d));\n\t\t\t\tres.on('end', () => c(JSON.parse(Buffer.concat(chunks).toString('utf8'))));\n\t\t\t});\n\n\t\t\treq.on('error', err => e(err));\n\t\t\treq.write(JSON.stringify(request));\n\t\t\treq.end();\n\t\t});\n\t}\n}\n","module.exports = require(\"fs\");","module.exports = require(\"http\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as fs from 'fs';\nimport { IPCClient } from './ipc/ipcClient';\n\nfunction fatal(err: any): void {\n\tconsole.error('Missing or invalid credentials.');\n\tconsole.error(err);\n\tprocess.exit(1);\n}\n\nfunction main(argv: string[]): void {\n\tif (!process.env['VSCODE_GIT_ASKPASS_PIPE']) {\n\t\treturn fatal('Missing pipe');\n\t}\n\n\tif (!process.env['VSCODE_GIT_ASKPASS_TYPE']) {\n\t\treturn fatal('Missing type');\n\t}\n\n\tif (process.env['VSCODE_GIT_ASKPASS_TYPE'] !== 'https' && process.env['VSCODE_GIT_ASKPASS_TYPE'] !== 'ssh') {\n\t\treturn fatal(`Invalid type: ${process.env['VSCODE_GIT_ASKPASS_TYPE']}`);\n\t}\n\n\tif (process.env['VSCODE_GIT_COMMAND'] === 'fetch' && !!process.env['VSCODE_GIT_FETCH_SILENT']) {\n\t\treturn fatal('Skip silent fetch commands');\n\t}\n\n\tconst output = process.env['VSCODE_GIT_ASKPASS_PIPE'] as string;\n\tconst askpassType = process.env['VSCODE_GIT_ASKPASS_TYPE'] as 'https' | 'ssh';\n\n\t// HTTPS (username | password), SSH (passphrase | authenticity)\n\tconst request = askpassType === 'https' ? argv[2] : argv[3];\n\n\tlet host: string | undefined,\n\t\tfile: string | undefined,\n\t\tfingerprint: string | undefined;\n\n\tif (askpassType === 'https') {\n\t\thost = argv[4].replace(/^[\"']+|[\"':]+$/g, '');\n\t}\n\n\tif (askpassType === 'ssh') {\n\t\tif (/passphrase/i.test(request)) {\n\t\t\t// passphrase\n\t\t\tfile = argv[6].replace(/^[\"']+|[\"':]+$/g, '');\n\t\t} else {\n\t\t\t// authenticity\n\t\t\thost = argv[6].replace(/^[\"']+|[\"':]+$/g, '');\n\t\t\tfingerprint = argv[15];\n\t\t}\n\t}\n\n\tconst ipcClient = new IPCClient('askpass');\n\tipcClient.call({ askpassType, request, host, file, fingerprint }).then(res => {\n\t\tfs.writeFileSync(output, res + '\\n');\n\t\tsetTimeout(() => process.exit(0), 0);\n\t}).catch(err => fatal(err));\n}\n\nmain(process.argv);\n"],"sourceRoot":""}