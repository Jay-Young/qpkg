{"version":3,"sources":["out-vscode-reh-web/vs/workbench/services/languageDetection/browser/fake","out-vscode-reh-web/vs/workbench/services/languageDetection/browser/file:/home/runner/work/code-server/code-server/lib/vscode/src/vs/workbench/services/languageDetection/browser/languageDetectionSimpleWorker.ts"],"sourcesContent":["}).call(this);","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { ModelOperations, ModelResult } from '@vscode/vscode-languagedetection';\nimport { StopWatch } from 'vs/base/common/stopwatch';\nimport { IRequestHandler } from 'vs/base/common/worker/simpleWorker';\nimport { EditorSimpleWorker } from 'vs/editor/common/services/editorSimpleWorker';\nimport { IEditorWorkerHost } from 'vs/editor/common/services/editorWorkerHost';\n\ntype RegexpModel = { detect: (inp: string, langBiases: Record<string, number>, supportedLangs?: string[]) => string | undefined };\n\n/**\n * Called on the worker side\n * @internal\n */\nexport function create(host: IEditorWorkerHost): IRequestHandler {\n\treturn new LanguageDetectionSimpleWorker(host, null);\n}\n\n/**\n * @internal\n */\nexport class LanguageDetectionSimpleWorker extends EditorSimpleWorker {\n\tprivate static readonly expectedRelativeConfidence = 0.2;\n\tprivate static readonly positiveConfidenceCorrectionBucket1 = 0.05;\n\tprivate static readonly positiveConfidenceCorrectionBucket2 = 0.025;\n\tprivate static readonly negativeConfidenceCorrection = 0.5;\n\n\tprivate _regexpModel: RegexpModel | undefined;\n\tprivate _regexpLoadFailed: boolean = false;\n\n\tprivate _modelOperations: ModelOperations | undefined;\n\tprivate _loadFailed: boolean = false;\n\n\tprivate modelIdToCoreId = new Map<string, string>();\n\n\tpublic async detectLanguage(uri: string, langBiases: Record<string, number> | undefined, preferHistory: boolean, supportedLangs?: string[]): Promise<string | undefined> {\n\t\tconst languages: string[] = [];\n\t\tconst confidences: number[] = [];\n\t\tconst stopWatch = new StopWatch(true);\n\t\tconst documentTextSample = this.getTextForDetection(uri);\n\t\tif (!documentTextSample) { return; }\n\n\t\tconst neuralResolver = async () => {\n\t\t\tfor await (const language of this.detectLanguagesImpl(documentTextSample)) {\n\t\t\t\tif (!this.modelIdToCoreId.has(language.languageId)) {\n\t\t\t\t\tthis.modelIdToCoreId.set(language.languageId, await this._host.fhr('getLanguageId', [language.languageId]));\n\t\t\t\t}\n\t\t\t\tconst coreId = this.modelIdToCoreId.get(language.languageId);\n\t\t\t\tif (coreId && (!supportedLangs?.length || supportedLangs.includes(coreId))) {\n\t\t\t\t\tlanguages.push(coreId);\n\t\t\t\t\tconfidences.push(language.confidence);\n\t\t\t\t}\n\t\t\t}\n\t\t\tstopWatch.stop();\n\n\t\t\tif (languages.length) {\n\t\t\t\tthis._host.fhr('sendTelemetryEvent', [languages, confidences, stopWatch.elapsed()]);\n\t\t\t\treturn languages[0];\n\t\t\t}\n\t\t\treturn undefined;\n\t\t};\n\n\t\tconst historicalResolver = async () => this.runRegexpModel(documentTextSample, langBiases ?? {}, supportedLangs);\n\n\t\tif (preferHistory) {\n\t\t\tconst history = await historicalResolver();\n\t\t\tif (history) { return history; }\n\t\t\tconst neural = await neuralResolver();\n\t\t\tif (neural) { return neural; }\n\t\t} else {\n\t\t\tconst neural = await neuralResolver();\n\t\t\tif (neural) { return neural; }\n\t\t\tconst history = await historicalResolver();\n\t\t\tif (history) { return history; }\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprivate getTextForDetection(uri: string): string | undefined {\n\t\tconst editorModel = this._getModel(uri);\n\t\tif (!editorModel) { return; }\n\n\t\tconst end = editorModel.positionAt(10000);\n\t\tconst content = editorModel.getValueInRange({\n\t\t\tstartColumn: 1,\n\t\t\tstartLineNumber: 1,\n\t\t\tendColumn: end.column,\n\t\t\tendLineNumber: end.lineNumber\n\t\t});\n\t\treturn content;\n\t}\n\n\tprivate async getRegexpModel(): Promise<RegexpModel | undefined> {\n\t\tif (this._regexpLoadFailed) {\n\t\t\treturn;\n\t\t}\n\t\tif (this._regexpModel) {\n\t\t\treturn this._regexpModel;\n\t\t}\n\t\tconst uri: string = await this._host.fhr('getRegexpModelUri', []);\n\t\ttry {\n\t\t\tthis._regexpModel = await import(uri) as RegexpModel;\n\t\t\treturn this._regexpModel;\n\t\t} catch (e) {\n\t\t\tthis._regexpLoadFailed = true;\n\t\t\t// console.warn('error loading language detection model', e);\n\t\t\treturn;\n\t\t}\n\t}\n\n\tprivate async runRegexpModel(content: string, langBiases: Record<string, number>, supportedLangs?: string[]): Promise<string | undefined> {\n\t\tconst regexpModel = await this.getRegexpModel();\n\t\tif (!regexpModel) { return; }\n\n\t\tif (supportedLangs?.length) {\n\t\t\t// When using supportedLangs, normally computed biases are too extreme. Just use a \"bitmask\" of sorts.\n\t\t\tfor (const lang of Object.keys(langBiases)) {\n\t\t\t\tif (supportedLangs.includes(lang)) {\n\t\t\t\t\tlangBiases[lang] = 1;\n\t\t\t\t} else {\n\t\t\t\t\tlangBiases[lang] = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst detected = regexpModel.detect(content, langBiases, supportedLangs);\n\t\treturn detected;\n\t}\n\n\tprivate async getModelOperations(): Promise<ModelOperations> {\n\t\tif (this._modelOperations) {\n\t\t\treturn this._modelOperations;\n\t\t}\n\n\t\tconst uri: string = await this._host.fhr('getIndexJsUri', []);\n\t\tconst { ModelOperations } = await import(uri) as typeof import('@vscode/vscode-languagedetection');\n\t\tthis._modelOperations = new ModelOperations({\n\t\t\tmodelJsonLoaderFunc: async () => {\n\t\t\t\tconst response = await fetch(await this._host.fhr('getModelJsonUri', []));\n\t\t\t\ttry {\n\t\t\t\t\tconst modelJSON = await response.json();\n\t\t\t\t\treturn modelJSON;\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconst message = `Failed to parse model JSON.`;\n\t\t\t\t\tthrow new Error(message);\n\t\t\t\t}\n\t\t\t},\n\t\t\tweightsLoaderFunc: async () => {\n\t\t\t\tconst response = await fetch(await this._host.fhr('getWeightsUri', []));\n\t\t\t\tconst buffer = await response.arrayBuffer();\n\t\t\t\treturn buffer;\n\t\t\t}\n\t\t});\n\n\t\treturn this._modelOperations!;\n\t}\n\n\t// This adjusts the language confidence scores to be more accurate based on:\n\t// * VS Code's language usage\n\t// * Languages with 'problematic' syntaxes that have caused incorrect language detection\n\tprivate adjustLanguageConfidence(modelResult: ModelResult): ModelResult {\n\t\tswitch (modelResult.languageId) {\n\t\t\t// For the following languages, we increase the confidence because\n\t\t\t// these are commonly used languages in VS Code and supported\n\t\t\t// by the model.\n\t\t\tcase 'js':\n\t\t\tcase 'html':\n\t\t\tcase 'json':\n\t\t\tcase 'ts':\n\t\t\tcase 'css':\n\t\t\tcase 'py':\n\t\t\tcase 'xml':\n\t\t\tcase 'php':\n\t\t\t\tmodelResult.confidence += LanguageDetectionSimpleWorker.positiveConfidenceCorrectionBucket1;\n\t\t\t\tbreak;\n\t\t\t// case 'yaml': // YAML has been know to cause incorrect language detection because the language is pretty simple. We don't want to increase the confidence for this.\n\t\t\tcase 'cpp':\n\t\t\tcase 'sh':\n\t\t\tcase 'java':\n\t\t\tcase 'cs':\n\t\t\tcase 'c':\n\t\t\t\tmodelResult.confidence += LanguageDetectionSimpleWorker.positiveConfidenceCorrectionBucket2;\n\t\t\t\tbreak;\n\n\t\t\t// For the following languages, we need to be extra confident that the language is correct because\n\t\t\t// we've had issues like #131912 that caused incorrect guesses. To enforce this, we subtract the\n\t\t\t// negativeConfidenceCorrection from the confidence.\n\n\t\t\t// languages that are provided by default in VS Code\n\t\t\tcase 'bat':\n\t\t\tcase 'ini':\n\t\t\tcase 'makefile':\n\t\t\tcase 'sql':\n\t\t\t// languages that aren't provided by default in VS Code\n\t\t\tcase 'csv':\n\t\t\tcase 'toml':\n\t\t\t\t// Other considerations for negativeConfidenceCorrection that\n\t\t\t\t// aren't built in but suported by the model include:\n\t\t\t\t// * Assembly, TeX - These languages didn't have clear language modes in the community\n\t\t\t\t// * Markdown, Dockerfile - These languages are simple but they embed other languages\n\t\t\t\tmodelResult.confidence -= LanguageDetectionSimpleWorker.negativeConfidenceCorrection;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tbreak;\n\n\t\t}\n\t\treturn modelResult;\n\t}\n\n\tprivate async * detectLanguagesImpl(content: string): AsyncGenerator<ModelResult, void, unknown> {\n\t\tif (this._loadFailed) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet modelOperations: ModelOperations | undefined;\n\t\ttry {\n\t\t\tmodelOperations = await this.getModelOperations();\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t\tthis._loadFailed = true;\n\t\t\treturn;\n\t\t}\n\n\t\tlet modelResults: ModelResult[] | undefined;\n\n\t\ttry {\n\t\t\tmodelResults = await modelOperations.runModel(content);\n\t\t} catch (e) {\n\t\t\tconsole.warn(e);\n\t\t}\n\n\t\tif (!modelResults\n\t\t\t|| modelResults.length === 0\n\t\t\t|| modelResults[0].confidence < LanguageDetectionSimpleWorker.expectedRelativeConfidence) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst firstModelResult = this.adjustLanguageConfidence(modelResults[0]);\n\t\tif (firstModelResult.confidence < LanguageDetectionSimpleWorker.expectedRelativeConfidence) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst possibleLanguages: ModelResult[] = [firstModelResult];\n\n\t\tfor (let current of modelResults) {\n\t\t\tif (current === firstModelResult) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tcurrent = this.adjustLanguageConfidence(current);\n\t\t\tconst currentHighest = possibleLanguages[possibleLanguages.length - 1];\n\n\t\t\tif (currentHighest.confidence - current.confidence >= LanguageDetectionSimpleWorker.expectedRelativeConfidence) {\n\t\t\t\twhile (possibleLanguages.length) {\n\t\t\t\t\tyield possibleLanguages.shift()!;\n\t\t\t\t}\n\t\t\t\tif (current.confidence > LanguageDetectionSimpleWorker.expectedRelativeConfidence) {\n\t\t\t\t\tpossibleLanguages.push(current);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\tif (current.confidence > LanguageDetectionSimpleWorker.expectedRelativeConfidence) {\n\t\t\t\t\tpossibleLanguages.push(current);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n}\n"],"mappings":"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","names":["__m","__M","deps","result","i","len","create","host","LanguageDetectionSimpleWorker","exports","editorSimpleWorker_1","uri","langBiases","preferHistory","supportedLangs","languages","confidences","stopWatch","stopwatch_1","documentTextSample","neuralResolver","language","coreId","historicalResolver","history","neural","editorModel","end","resolve_1","reject_1","require","content","regexpModel","lang","ModelOperations","resolve_2","reject_2","response","message","modelResult","modelOperations","e","modelResults","firstModelResult","possibleLanguages","current"],"file":"languageDetectionSimpleWorker.js"}