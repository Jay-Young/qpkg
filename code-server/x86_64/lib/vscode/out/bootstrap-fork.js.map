{"version":3,"sources":["out-vscode-reh-web/bootstrap-fork.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n//@ts-check\n'use strict';\n\nconst performance = require('./vs/base/common/performance');\nperformance.mark('code/fork/start');\n\nconst bootstrap = require('./bootstrap');\nconst bootstrapNode = require('./bootstrap-node');\n\n// Crash reporter\nconfigureCrashReporter();\n\n// Remove global paths from the node module lookup\nbootstrapNode.removeGlobalNodeModuleLookupPaths();\n\n// Enable ASAR in our forked processes\nbootstrap.enableASARSupport();\n\nif (process.env['VSCODE_INJECT_NODE_MODULE_LOOKUP_PATH']) {\n\tbootstrapNode.injectNodeModuleLookupPath(process.env['VSCODE_INJECT_NODE_MODULE_LOOKUP_PATH']);\n}\n\n// Configure: pipe logging to parent process\nif (!!process.send && process.env['VSCODE_PIPE_LOGGING'] === 'true') {\n\tpipeLoggingToParent();\n}\n\n// Handle Exceptions\nif (!process.env['VSCODE_HANDLES_UNCAUGHT_ERRORS']) {\n\thandleExceptions();\n}\n\n// Terminate when parent terminates\nif (process.env['VSCODE_PARENT_PID']) {\n\tterminateWhenParentTerminates();\n}\n\n// Load AMD entry point\nrequire('./bootstrap-amd').load(process.env['VSCODE_AMD_ENTRYPOINT']);\n\n\n//#region Helpers\n\nfunction pipeLoggingToParent() {\n\tconst MAX_STREAM_BUFFER_LENGTH = 1024 * 1024;\n\tconst MAX_LENGTH = 100000;\n\n\t/**\n\t * Prevent circular stringify and convert arguments to real array\n\t *\n\t * @param {ArrayLike<unknown>} args\n\t */\n\tfunction safeToArray(args) {\n\t\tconst seen = [];\n\t\tconst argsArray = [];\n\n\t\t// Massage some arguments with special treatment\n\t\tif (args.length) {\n\t\t\tfor (let i = 0; i < args.length; i++) {\n\t\t\t\tlet arg = args[i];\n\n\t\t\t\t// Any argument of type 'undefined' needs to be specially treated because\n\t\t\t\t// JSON.stringify will simply ignore those. We replace them with the string\n\t\t\t\t// 'undefined' which is not 100% right, but good enough to be logged to console\n\t\t\t\tif (typeof arg === 'undefined') {\n\t\t\t\t\targ = 'undefined';\n\t\t\t\t}\n\n\t\t\t\t// Any argument that is an Error will be changed to be just the error stack/message\n\t\t\t\t// itself because currently cannot serialize the error over entirely.\n\t\t\t\telse if (arg instanceof Error) {\n\t\t\t\t\tconst errorObj = arg;\n\t\t\t\t\tif (errorObj.stack) {\n\t\t\t\t\t\targ = errorObj.stack;\n\t\t\t\t\t} else {\n\t\t\t\t\t\targ = errorObj.toString();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\targsArray.push(arg);\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\tconst res = JSON.stringify(argsArray, function (key, value) {\n\n\t\t\t\t// Objects get special treatment to prevent circles\n\t\t\t\tif (isObject(value) || Array.isArray(value)) {\n\t\t\t\t\tif (seen.indexOf(value) !== -1) {\n\t\t\t\t\t\treturn '[Circular]';\n\t\t\t\t\t}\n\n\t\t\t\t\tseen.push(value);\n\t\t\t\t}\n\n\t\t\t\treturn value;\n\t\t\t});\n\n\t\t\tif (res.length > MAX_LENGTH) {\n\t\t\t\treturn 'Output omitted for a large object that exceeds the limits';\n\t\t\t}\n\n\t\t\treturn res;\n\t\t} catch (error) {\n\t\t\treturn `Output omitted for an object that cannot be inspected ('${error.toString()}')`;\n\t\t}\n\t}\n\n\t/**\n\t * @param {{ type: string; severity: string; arguments: string; }} arg\n\t */\n\tfunction safeSend(arg) {\n\t\ttry {\n\t\t\tif (process.send) {\n\t\t\t\tprocess.send(arg);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\t// Can happen if the parent channel is closed meanwhile\n\t\t}\n\t}\n\n\t/**\n\t * @param {unknown} obj\n\t */\n\tfunction isObject(obj) {\n\t\treturn typeof obj === 'object'\n\t\t\t&& obj !== null\n\t\t\t&& !Array.isArray(obj)\n\t\t\t&& !(obj instanceof RegExp)\n\t\t\t&& !(obj instanceof Date);\n\t}\n\n\t/**\n\t *\n\t * @param {'log' | 'warn' | 'error'} severity\n\t * @param {string} args\n\t */\n\tfunction safeSendConsoleMessage(severity, args) {\n\t\tsafeSend({ type: '__$console', severity, arguments: args });\n\t}\n\n\t/**\n\t * Wraps a console message so that it is transmitted to the renderer.\n\t *\n\t * The wrapped property is not defined with `writable: false` to avoid\n\t * throwing errors, but rather a no-op setting. See https://github.com/microsoft/vscode-extension-telemetry/issues/88\n\t *\n\t * @param {'log' | 'info' | 'warn' | 'error'} method\n\t * @param {'log' | 'warn' | 'error'} severity\n\t */\n\tfunction wrapConsoleMethod(method, severity) {\n\t\tObject.defineProperty(console, method, {\n\t\t\tset: () => { },\n\t\t\tget: () => function () { safeSendConsoleMessage(severity, safeToArray(arguments)); },\n\t\t});\n\t}\n\n\t/**\n\t * Wraps process.stderr/stdout.write() so that it is transmitted to the\n\t * renderer or CLI. It both calls through to the original method as well\n\t * as to console.log with complete lines so that they're made available\n\t * to the debugger/CLI.\n\t *\n\t * @param {'stdout' | 'stderr'} streamName\n\t * @param {'log' | 'warn' | 'error'} severity\n\t */\n\tfunction wrapStream(streamName, severity) {\n\t\tconst stream = process[streamName];\n\t\tconst original = stream.write;\n\n\t\t/** @type string */\n\t\tlet buf = '';\n\n\t\tObject.defineProperty(stream, 'write', {\n\t\t\tset: () => { },\n\t\t\tget: () => (chunk, encoding, callback) => {\n\t\t\t\tbuf += chunk.toString(encoding);\n\t\t\t\tconst eol = buf.length > MAX_STREAM_BUFFER_LENGTH ? buf.length : buf.lastIndexOf('\\n');\n\t\t\t\tif (eol !== -1) {\n\t\t\t\t\tconsole[severity](buf.slice(0, eol));\n\t\t\t\t\tbuf = buf.slice(eol + 1);\n\t\t\t\t}\n\n\t\t\t\toriginal.call(stream, chunk, encoding, callback);\n\t\t\t},\n\t\t});\n\t}\n\n\t// Pass console logging to the outside so that we have it in the main side if told so\n\tif (process.env['VSCODE_VERBOSE_LOGGING'] === 'true') {\n\t\twrapConsoleMethod('info', 'log');\n\t\twrapConsoleMethod('log', 'log');\n\t\twrapConsoleMethod('warn', 'warn');\n\t\twrapConsoleMethod('error', 'error');\n\t} else {\n\t\tconsole.log = function () { /* ignore */ };\n\t\tconsole.warn = function () { /* ignore */ };\n\t\tconsole.info = function () { /* ignore */ };\n\t\twrapConsoleMethod('error', 'error');\n\t}\n\n\twrapStream('stderr', 'error');\n\twrapStream('stdout', 'log');\n}\n\nfunction handleExceptions() {\n\n\t// Handle uncaught exceptions\n\tprocess.on('uncaughtException', function (err) {\n\t\tconsole.error('Uncaught Exception: ', err);\n\t});\n\n\t// Handle unhandled promise rejections\n\tprocess.on('unhandledRejection', function (reason) {\n\t\tconsole.error('Unhandled Promise Rejection: ', reason);\n\t});\n}\n\nfunction terminateWhenParentTerminates() {\n\tconst parentPid = Number(process.env['VSCODE_PARENT_PID']);\n\n\tif (typeof parentPid === 'number' && !isNaN(parentPid)) {\n\t\tsetInterval(function () {\n\t\t\ttry {\n\t\t\t\tprocess.kill(parentPid, 0); // throws an exception if the main process doesn't exist anymore.\n\t\t\t} catch (e) {\n\t\t\t\tprocess.exit();\n\t\t\t}\n\t\t}, 5000);\n\t}\n}\n\nfunction configureCrashReporter() {\n\tconst crashReporterProcessType = process.env['VSCODE_CRASH_REPORTER_PROCESS_TYPE'];\n\tif (crashReporterProcessType) {\n\t\ttry {\n\t\t\tif (process['crashReporter'] && typeof process['crashReporter'].addExtraParameter === 'function' /* Electron only */) {\n\t\t\t\tprocess['crashReporter'].addExtraParameter('processType', crashReporterProcessType);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t}\n\t}\n}\n\n//#endregion\n"],"mappings":"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","names":["safeToArray","args","seen","argsArray","i","arg","errorObj","res","key","value","isObject","error","safeSend","obj","safeSendConsoleMessage","severity","wrapConsoleMethod","method","wrapStream","streamName","stream","original","buf","chunk","encoding","callback","eol","err","reason","parentPid","crashReporterProcessType"],"file":"bootstrap-fork.js"}