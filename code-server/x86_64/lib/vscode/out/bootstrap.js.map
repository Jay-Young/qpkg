{"version":3,"sources":["out-vscode-reh-web/bootstrap.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n//@ts-check\n'use strict';\n\n// Simple module style to support node.js and browser environments\n(function (globalThis, factory) {\n\n\t// Node.js\n\tif (typeof exports === 'object') {\n\t\tmodule.exports = factory();\n\t}\n\n\t// Browser\n\telse {\n\t\t// @ts-ignore\n\t\tglobalThis.MonacoBootstrap = factory();\n\t}\n}(this, function () {\n\tconst Module = typeof require === 'function' ? require('module') : undefined;\n\tconst path = typeof require === 'function' ? require('path') : undefined;\n\tconst fs = typeof require === 'function' ? require('fs') : undefined;\n\n\t//#region global bootstrapping\n\n\t// increase number of stack frames(from 10, https://github.com/v8/v8/wiki/Stack-Trace-API)\n\tError.stackTraceLimit = 100;\n\n\tif (typeof process !== 'undefined' && !process.env['VSCODE_HANDLES_SIGPIPE']) {\n\t\t// Workaround for Electron not installing a handler to ignore SIGPIPE\n\t\t// (https://github.com/electron/electron/issues/13254)\n\t\tlet didLogAboutSIGPIPE = false;\n\t\tprocess.on('SIGPIPE', () => {\n\t\t\t// See https://github.com/microsoft/vscode-remote-release/issues/6543\n\t\t\t// We would normally install a SIGPIPE listener in bootstrap.js\n\t\t\t// But in certain situations, the console itself can be in a broken pipe state\n\t\t\t// so logging SIGPIPE to the console will cause an infinite async loop\n\t\t\tif (!didLogAboutSIGPIPE) {\n\t\t\t\tdidLogAboutSIGPIPE = true;\n\t\t\t\tconsole.error(new Error(`Unexpected SIGPIPE`));\n\t\t\t}\n\t\t});\n\t}\n\n\t//#endregion\n\n\n\t//#region Add support for using node_modules.asar\n\n\t/**\n\t * @param {string=} appRoot\n\t */\n\tfunction enableASARSupport(appRoot) {\n\t\tif (!path || !Module || typeof process === 'undefined') {\n\t\t\tconsole.warn('enableASARSupport() is only available in node.js environments');\n\t\t\treturn;\n\t\t}\n\n\t\tconst NODE_MODULES_PATH = appRoot ? path.join(appRoot, 'node_modules') : path.join(__dirname, '../node_modules');\n\n\t\t// Windows only:\n\t\t// use both lowercase and uppercase drive letter\n\t\t// as a way to ensure we do the right check on\n\t\t// the node modules path: node.js might internally\n\t\t// use a different case compared to what we have\n\t\t/** @type {string | undefined} */\n\t\tlet NODE_MODULES_ALTERNATIVE_PATH;\n\t\tif (appRoot /* only used from renderer until `sandbox` enabled */ && process.platform === 'win32') {\n\t\t\tconst driveLetter = appRoot.substr(0, 1);\n\n\t\t\tlet alternativeDriveLetter;\n\t\t\tif (driveLetter.toLowerCase() !== driveLetter) {\n\t\t\t\talternativeDriveLetter = driveLetter.toLowerCase();\n\t\t\t} else {\n\t\t\t\talternativeDriveLetter = driveLetter.toUpperCase();\n\t\t\t}\n\n\t\t\tNODE_MODULES_ALTERNATIVE_PATH = alternativeDriveLetter + NODE_MODULES_PATH.substr(1);\n\t\t} else {\n\t\t\tNODE_MODULES_ALTERNATIVE_PATH = undefined;\n\t\t}\n\n\t\tconst NODE_MODULES_ASAR_PATH = `${NODE_MODULES_PATH}.asar`;\n\t\tconst NODE_MODULES_ASAR_ALTERNATIVE_PATH = NODE_MODULES_ALTERNATIVE_PATH ? `${NODE_MODULES_ALTERNATIVE_PATH}.asar` : undefined;\n\n\t\t// @ts-ignore\n\t\tconst originalResolveLookupPaths = Module._resolveLookupPaths;\n\n\t\t// @ts-ignore\n\t\tModule._resolveLookupPaths = function (request, parent) {\n\t\t\tconst paths = originalResolveLookupPaths(request, parent);\n\t\t\tif (Array.isArray(paths)) {\n\t\t\t\tlet asarPathAdded = false;\n\t\t\t\tfor (let i = 0, len = paths.length; i < len; i++) {\n\t\t\t\t\tif (paths[i] === NODE_MODULES_PATH) {\n\t\t\t\t\t\tasarPathAdded = true;\n\t\t\t\t\t\tpaths.splice(i, 0, NODE_MODULES_ASAR_PATH);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t} else if (paths[i] === NODE_MODULES_ALTERNATIVE_PATH) {\n\t\t\t\t\t\tasarPathAdded = true;\n\t\t\t\t\t\tpaths.splice(i, 0, NODE_MODULES_ASAR_ALTERNATIVE_PATH);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!asarPathAdded && appRoot) {\n\t\t\t\t\t// Assuming that adding just `NODE_MODULES_ASAR_PATH` is sufficient\n\t\t\t\t\t// because nodejs should find it even if it has a different drive letter case\n\t\t\t\t\tpaths.push(NODE_MODULES_ASAR_PATH);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn paths;\n\t\t};\n\t}\n\n\t//#endregion\n\n\n\t//#region URI helpers\n\n\t/**\n\t * @param {string} path\n\t * @param {{ isWindows?: boolean, scheme?: string, fallbackAuthority?: string }} config\n\t * @returns {string}\n\t */\n\tfunction fileUriFromPath(path, config) {\n\n\t\t// Since we are building a URI, we normalize any backslash\n\t\t// to slashes and we ensure that the path begins with a '/'.\n\t\tlet pathName = path.replace(/\\\\/g, '/');\n\t\tif (pathName.length > 0 && pathName.charAt(0) !== '/') {\n\t\t\tpathName = `/${pathName}`;\n\t\t}\n\n\t\t/** @type {string} */\n\t\tlet uri;\n\n\t\t// Windows: in order to support UNC paths (which start with '//')\n\t\t// that have their own authority, we do not use the provided authority\n\t\t// but rather preserve it.\n\t\tif (config.isWindows && pathName.startsWith('//')) {\n\t\t\turi = encodeURI(`${config.scheme || 'file'}:${pathName}`);\n\t\t}\n\n\t\t// Otherwise we optionally add the provided authority if specified\n\t\telse {\n\t\t\turi = encodeURI(`${config.scheme || 'file'}://${config.fallbackAuthority || ''}${pathName}`);\n\t\t}\n\n\t\treturn uri.replace(/#/g, '%23');\n\t}\n\n\t//#endregion\n\n\n\t//#region NLS helpers\n\n\t/**\n\t * @returns {{locale?: string, availableLanguages: {[lang: string]: string;}, pseudo?: boolean } | undefined}\n\t */\n\tfunction setupNLS() {\n\n\t\t// Get the nls configuration as early as possible.\n\t\tconst process = safeProcess();\n\t\t/** @type {{ availableLanguages: {}; loadBundle?: (bundle: string, language: string, cb: (err: Error | undefined, result: string | undefined) => void) => void; _resolvedLanguagePackCoreLocation?: string; _corruptedFile?: string }} */\n\t\tlet nlsConfig = { availableLanguages: {} };\n\t\tif (process && process.env['VSCODE_NLS_CONFIG']) {\n\t\t\ttry {\n\t\t\t\tnlsConfig = JSON.parse(process.env['VSCODE_NLS_CONFIG']);\n\t\t\t} catch (e) {\n\t\t\t\t// Ignore\n\t\t\t}\n\t\t}\n\n\t\tif (nlsConfig._resolvedLanguagePackCoreLocation) {\n\t\t\tconst bundles = Object.create(null);\n\n\t\t\t/**\n\t\t\t * @param {string} bundle\n\t\t\t * @param {string} language\n\t\t\t * @param {(err: Error | undefined, result: string | undefined) => void} cb\n\t\t\t */\n\t\t\tnlsConfig.loadBundle = function (bundle, language, cb) {\n\t\t\t\tconst result = bundles[bundle];\n\t\t\t\tif (result) {\n\t\t\t\t\tcb(undefined, result);\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// @ts-ignore\n\t\t\t\tsafeReadNlsFile(nlsConfig._resolvedLanguagePackCoreLocation, `${bundle.replace(/\\//g, '!')}.nls.json`).then(function (content) {\n\t\t\t\t\tconst json = JSON.parse(content);\n\t\t\t\t\tbundles[bundle] = json;\n\n\t\t\t\t\tcb(undefined, json);\n\t\t\t\t}).catch((error) => {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (nlsConfig._corruptedFile) {\n\t\t\t\t\t\t\tsafeWriteNlsFile(nlsConfig._corruptedFile, 'corrupted').catch(function (error) { console.error(error); });\n\t\t\t\t\t\t}\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tcb(error, undefined);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t};\n\t\t}\n\n\t\treturn nlsConfig;\n\t}\n\n\t/**\n\t * @returns {typeof import('./vs/base/parts/sandbox/electron-sandbox/globals') | undefined}\n\t */\n\tfunction safeSandboxGlobals() {\n\t\tconst globals = (typeof self === 'object' ? self : typeof global === 'object' ? global : {});\n\n\t\t// @ts-ignore\n\t\treturn globals.vscode;\n\t}\n\n\t/**\n\t * @returns {import('./vs/base/parts/sandbox/electron-sandbox/globals').ISandboxNodeProcess | NodeJS.Process | undefined}\n\t */\n\tfunction safeProcess() {\n\t\tconst sandboxGlobals = safeSandboxGlobals();\n\t\tif (sandboxGlobals) {\n\t\t\treturn sandboxGlobals.process; // Native environment (sandboxed)\n\t\t}\n\n\t\tif (typeof process !== 'undefined') {\n\t\t\treturn process; // Native environment (non-sandboxed)\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\t/**\n\t * @returns {import('./vs/base/parts/sandbox/electron-sandbox/electronTypes').IpcRenderer | undefined}\n\t */\n\tfunction safeIpcRenderer() {\n\t\tconst sandboxGlobals = safeSandboxGlobals();\n\t\tif (sandboxGlobals) {\n\t\t\treturn sandboxGlobals.ipcRenderer;\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\t/**\n\t * @param {string[]} pathSegments\n\t * @returns {Promise<string>}\n\t */\n\tasync function safeReadNlsFile(...pathSegments) {\n\t\tconst ipcRenderer = safeIpcRenderer();\n\t\tif (ipcRenderer) {\n\t\t\treturn ipcRenderer.invoke('vscode:readNlsFile', ...pathSegments);\n\t\t}\n\n\t\tif (fs && path) {\n\t\t\treturn (await fs.promises.readFile(path.join(...pathSegments))).toString();\n\t\t}\n\n\t\tthrow new Error('Unsupported operation (read NLS files)');\n\t}\n\n\t/**\n\t * @param {string} path\n\t * @param {string} content\n\t * @returns {Promise<void>}\n\t */\n\tfunction safeWriteNlsFile(path, content) {\n\t\tconst ipcRenderer = safeIpcRenderer();\n\t\tif (ipcRenderer) {\n\t\t\treturn ipcRenderer.invoke('vscode:writeNlsFile', path, content);\n\t\t}\n\n\t\tif (fs) {\n\t\t\treturn fs.promises.writeFile(path, content);\n\t\t}\n\n\t\tthrow new Error('Unsupported operation (write NLS files)');\n\t}\n\n\t//#endregion\n\n\treturn {\n\t\tenableASARSupport,\n\t\tsetupNLS,\n\t\tfileUriFromPath\n\t};\n}));\n"],"mappings":"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","names":["globalThis","factory","Module","path","fs","didLogAboutSIGPIPE","enableASARSupport","appRoot","NODE_MODULES_PATH","NODE_MODULES_ALTERNATIVE_PATH","driveLetter","alternativeDriveLetter","NODE_MODULES_ASAR_PATH","NODE_MODULES_ASAR_ALTERNATIVE_PATH","originalResolveLookupPaths","request","parent","paths","asarPathAdded","i","len","fileUriFromPath","config","pathName","uri","setupNLS","process","safeProcess","nlsConfig","bundles","bundle","language","cb","result","safeReadNlsFile","content","json","error","safeWriteNlsFile","safeSandboxGlobals","sandboxGlobals","safeIpcRenderer","pathSegments","ipcRenderer"],"file":"bootstrap.js"}