import{v as f,d as y,z as x,e as m,j as d,k as l,n as p,B as k,w as g,q as i,C as w,y as b,m as U,o as h,s as _,F as I,r as L}from"./index-3141604a.js";function C(t){const[a,e]=t.toString().split("e"),o=Number.parseFloat(a),s=o%1===0?o.toLocaleString():o.toFixed(2);return e?`${s}e${e}`:s}function F({seconds:t}){if(t<=.001)return"Instantly";if(t<=1)return"Less than a second";const a=[{unit:"millenium",secondsInUnit:31536e6,format:C},{unit:"century",secondsInUnit:31536e5},{unit:"decade",secondsInUnit:31536e4},{unit:"year",secondsInUnit:31536e3},{unit:"month",secondsInUnit:2592e3},{unit:"week",secondsInUnit:604800},{unit:"day",secondsInUnit:86400},{unit:"hour",secondsInUnit:3600},{unit:"minute",secondsInUnit:60},{unit:"second",secondsInUnit:1}];return f.chain(a).map(({unit:e,secondsInUnit:o,format:s=f.identity})=>{const n=Math.floor(t/o);return t%=o,n<=0?void 0:`${s(n)} ${e}${n>1?"s":""}`}).compact().take(2).join(", ").value()}function N({password:t,guessesPerSecond:a=1e9}){const e=$({password:t}),o=t.length,s=t===""?0:Math.log2(e)*o,n=2**s/a,r=F({seconds:n}),c=Math.min(s/128,1);return{entropy:s,charsetLength:e,passwordLength:o,crackDurationFormatted:r,secondsToCrack:n,score:c}}function $({password:t}){const a=/[a-z]/.test(t),e=/[A-Z]/.test(t),o=/\d/.test(t),s=/\W|_/.test(t);let n=0;return a&&(n+=26),e&&(n+=26),o&&(n+=10),s&&(n+=32),n}const D={flex:"","flex-col":"","gap-3":""},E=i("div",{"op-60":""}," Duration to crack this password with brute force ",-1),B={"text-2xl":"","data-test-id":"crack-duration"},M={"flex-1":"","text-right":"","op-60":""},S={"flex-1":"","text-left":""},T=i("div",{"op-70":""},[i("span",{"font-bold":""},"Note: "),U(" The computed strength is based on the time it would take to crack the password using a brute force approach, it does not take into account the possibility of a dictionary attack. ")],-1),V=y({__name:"password-strength-analyser",setup(t){const a=x(""),e=m(()=>N({password:a.value})),o=m(()=>[{label:"Password length:",value:e.value.passwordLength},{label:"Entropy:",value:Math.round(e.value.entropy*100)/100},{label:"Character set size:",value:e.value.charsetLength},{label:"Score:",value:`${Math.round(e.value.score*100)} / 100`}]);return(s,n)=>{const r=w,c=b;return h(),d("div",D,[l(r,{value:p(a),"onUpdate:value":n[0]||(n[0]=u=>k(a)?a.value=u:null),type:"password",placeholder:"Enter a password...",clearable:"",autofocus:"","raw-text":"","test-id":"password-input"},null,8,["value"]),l(c,{"text-center":""},{default:g(()=>[E,i("div",B,_(p(e).crackDurationFormatted),1)]),_:1}),l(c,null,{default:g(()=>[(h(!0),d(I,null,L(p(o),({label:u,value:v})=>(h(),d("div",{key:u,flex:"","gap-3":""},[i("div",M,_(u),1),i("div",S,_(v),1)]))),128))]),_:1}),T])}}});export{V as default};
